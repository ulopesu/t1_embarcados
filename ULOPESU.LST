     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                	mov 		ax,data
     8 00000003 8ED8                    	mov 		ds,ax
     9 00000005 B8[0000]                	mov 		ax,stack
    10 00000008 8ED0                    	mov 		ss,ax
    11 0000000A BC[0002]                	mov 		sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                    	mov  		ah,0Fh
    15 0000000F CD10                    	int  		10h
    16 00000011 A2[0100]                	mov  		[modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                    	mov     	al,12h
    20 00000016 B400                    	mov     	ah,0
    21 00000018 CD10                    	int     	10h
    22 0000001A E80300                  	call desenha_layout
    23 0000001D E99202                  	jmp espera_mouse
    24                                  	; jmp read_file			APENAS PARA TESTAR DIRETAMENTE A FUNÇÃO
    25                                  
    26                                  desenha_layout:
    27                                  ; desenha divisorias da tela 
    28                                  	; escreve nome
    29 00000020 B91B00                  	mov     	cx,27			;n�mero de caracteres
    30 00000023 BB0000                  	mov     	bx,0
    31 00000026 B61D                    	mov     	dh,29			;linha 0-29
    32 00000028 B223                    	mov     	dl,35			;coluna 0-79
    33 0000002A C606[0000]0A            	mov		byte[cor], verde_claro
    34                                  	l_w_name:
    35 0000002F E8C004                  		call	cursor
    36 00000032 8A87[0A00]              		mov     al,[bx+nome_aluno]
    37 00000036 E8D004                  		call	caracter
    38 00000039 43                      		inc     bx			;proximo caracter
    39 0000003A FEC2                    		inc		dl			;avanca a coluna
    40 0000003C E2F1                    		loop    l_w_name
    41                                  
    42                                  	; escreve sair
    43 0000003E B90400                  	mov     	cx,4			;n�mero de caracteres
    44 00000041 BB0000                  	mov     	bx,0
    45 00000044 B61B                    	mov     	dh,27			;linha 0-29
    46 00000046 B206                    	mov     	dl,6			;coluna 0-79
    47 00000048 C606[0000]0C            	mov		byte[cor], rosa
    48                                  	l_w_sair:
    49 0000004D E8A204                  		call	cursor
    50 00000050 8A87[3900]              		mov     al,[bx+sair_str]
    51 00000054 E8B204                  		call	caracter
    52 00000057 43                      		inc     bx			;proximo caracter
    53 00000058 FEC2                    		inc		dl			;avanca a coluna
    54 0000005A E2F1                    		loop    l_w_sair
    55                                  
    56                                  	; escreve FIR_3
    57 0000005C B90500                  	mov     	cx,5			;n�mero de caracteres
    58 0000005F BB0000                  	mov     	bx,0
    59 00000062 B616                    	mov     	dh,22			;linha 0-29
    60 00000064 B206                    	mov     	dl,6			;coluna 0-79
    61 00000066 C606[0000]0B            	mov		byte[cor], cyan_claro
    62                                  	l_w_fir3:
    63 0000006B E88404                  		call	cursor
    64 0000006E 8A87[3400]              		mov     al,[bx+fir3_str]
    65 00000072 E89404                  		call	caracter
    66 00000075 43                      		inc     bx			;proximo caracter
    67 00000076 FEC2                    		inc		dl			;avanca a coluna
    68 00000078 E2F1                    		loop    l_w_fir3
    69                                  
    70                                  	; escreve FIR_2
    71 0000007A B90500                  	mov     	cx,5			;n�mero de caracteres
    72 0000007D BB0000                  	mov     	bx,0
    73 00000080 B611                    	mov     	dh,17			;linha 0-29
    74 00000082 B206                    	mov     	dl,6			;coluna 0-79
    75 00000084 C606[0000]0E            	mov		byte[cor], amarelo
    76                                  	l_w_fir2:
    77 00000089 E86604                  		call	cursor
    78 0000008C 8A87[2F00]              		mov     al,[bx+fir2_str]
    79 00000090 E87604                  		call	caracter
    80 00000093 43                      		inc     bx			;proximo caracter
    81 00000094 FEC2                    		inc		dl			;avanca a coluna
    82 00000096 E2F1                    		loop    l_w_fir2
    83                                  
    84                                  	; escreve FIR_1
    85 00000098 B90500                  	mov     	cx,5			;n�mero de caracteres
    86 0000009B BB0000                  	mov     	bx,0
    87 0000009E B60C                    	mov     	dh,12			;linha 0-29
    88 000000A0 B206                    	mov     	dl,6			;coluna 0-79
    89 000000A2 C606[0000]0D            	mov		byte[cor], magenta_claro
    90                                  	l_w_fir1:
    91 000000A7 E84804                  		call	cursor
    92 000000AA 8A87[2A00]              		mov     al,[bx+fir1_str]
    93 000000AE E85804                  		call	caracter
    94 000000B1 43                      		inc     bx			;proximo caracter
    95 000000B2 FEC2                    		inc		dl			;avanca a coluna
    96 000000B4 E2F1                    		loop    l_w_fir1
    97                                  
    98                                  	; escreve setas 1
    99 000000B6 B90500                  	mov     	cx,5			;n�mero de caracteres
   100 000000B9 BB0000                  	mov     	bx,0
   101 000000BC B606                    	mov     	dh,6			;linha 0-29
   102 000000BE B206                    	mov     	dl,6			;coluna 0-79
   103 000000C0 C606[0000]0F            	mov		byte[cor], branco_intenso
   104 000000C5 E85101                  	call l_w_seta
   105                                  
   106                                  	; escreve setas 2
   107 000000C8 B90500                  	mov     	cx,5			;n�mero de caracteres
   108 000000CB BB0000                  	mov     	bx,0
   109 000000CE B608                    	mov     	dh,8			;linha 0-29
   110 000000D0 B206                    	mov     	dl,6			;coluna 0-79
   111 000000D2 C606[0000]0F            	mov		byte[cor], branco_intenso
   112 000000D7 E83F01                  	call l_w_seta
   113                                  
   114                                  	; escreve abrir
   115 000000DA B90500                  	mov     	cx,5			;n�mero de caracteres
   116 000000DD BB0000                  	mov     	bx,0
   117 000000E0 B602                    	mov     	dh,2			;linha 0-29
   118 000000E2 B206                    	mov     	dl,6			;coluna 0-79
   119 000000E4 C606[0000]02            	mov		byte[cor], verde
   120                                  	l_w_abrir:
   121 000000E9 E80604                  		call	cursor
   122 000000EC 8A87[2500]              		mov     al,[bx+abrir_str]
   123 000000F0 E81604                  		call	caracter
   124 000000F3 43                      		inc     bx			;proximo caracter
   125 000000F4 FEC2                    		inc		dl			;avanca a coluna
   126 000000F6 E2F1                    		loop    l_w_abrir
   127                                  
   128                                  
   129                                  	; bordas externas
   130 000000F8 C606[0000]0F            	mov		byte[cor], branco_intenso
   131 000000FD B80000                  	mov		ax,0
   132 00000100 50                      	push		ax
   133 00000101 B80000                  	mov		ax,0
   134 00000104 50                      	push		ax
   135 00000105 B80000                  	mov		ax,0
   136 00000108 50                      	push		ax
   137 00000109 B8DF01                  	mov		ax,479
   138 0000010C 50                      	push		ax
   139 0000010D E8D905                  	call		line
   140                                  
   141 00000110 C606[0000]0F            	mov		byte[cor], branco_intenso
   142 00000115 B80000                  	mov		ax,0
   143 00000118 50                      	push		ax
   144 00000119 B80000                  	mov		ax,0
   145 0000011C 50                      	push		ax
   146 0000011D B87F02                  	mov		ax,639
   147 00000120 50                      	push		ax
   148 00000121 B80000                  	mov		ax,0
   149 00000124 50                      	push		ax
   150 00000125 E8C105                  	call		line
   151                                  
   152 00000128 C606[0000]0F            	mov		byte[cor], branco_intenso
   153 0000012D B87F02                  	mov		ax,639
   154 00000130 50                      	push		ax
   155 00000131 B80000                  	mov		ax,0
   156 00000134 50                      	push		ax
   157 00000135 B87F02                  	mov		ax,639
   158 00000138 50                      	push		ax
   159 00000139 B8DF01                  	mov		ax,479
   160 0000013C 50                      	push		ax
   161 0000013D E8A905                  	call		line
   162                                  
   163 00000140 C606[0000]0F            	mov		byte[cor], branco_intenso
   164 00000145 B80000                  	mov		ax,0
   165 00000148 50                      	push		ax
   166 00000149 B8DF01                  	mov		ax,479
   167 0000014C 50                      	push		ax
   168 0000014D B87F02                  	mov		ax,639
   169 00000150 50                      	push		ax
   170 00000151 B8DF01                  	mov		ax,479
   171 00000154 50                      	push		ax
   172 00000155 E89105                  	call		line
   173                                  
   174                                  	; bordas internas centrais
   175 00000158 C606[0000]0F            	mov		byte[cor], branco_intenso
   176 0000015D B88A00                  	mov		ax,138
   177 00000160 50                      	push		ax
   178 00000161 B80000                  	mov		ax,0
   179 00000164 50                      	push		ax
   180 00000165 B88A00                  	mov		ax,138
   181 00000168 50                      	push		ax
   182 00000169 B8DF01                  	mov		ax,479
   183 0000016C 50                      	push		ax
   184 0000016D E87905                  	call		line
   185                                  
   186 00000170 C606[0000]0F            	mov		byte[cor], branco_intenso
   187 00000175 B88B00                  	mov		ax,139
   188 00000178 50                      	push		ax
   189 00000179 B81300                  	mov		ax,19
   190 0000017C 50                      	push		ax
   191 0000017D B87F02                  	mov		ax,639
   192 00000180 50                      	push		ax
   193 00000181 B81300                  	mov		ax,19
   194 00000184 50                      	push		ax
   195 00000185 E86105                  	call		line
   196                                  
   197 00000188 C606[0000]0F            	mov		byte[cor], branco_intenso
   198 0000018D B88B00                  	mov		ax,139
   199 00000190 50                      	push		ax
   200 00000191 B8F900                  	mov		ax,249
   201 00000194 50                      	push		ax
   202 00000195 B87F02                  	mov		ax,639
   203 00000198 50                      	push		ax
   204 00000199 B8F900                  	mov		ax,249
   205 0000019C 50                      	push		ax
   206 0000019D E84905                  	call		line
   207                                  
   208                                  	; bordas internas menu
   209 000001A0 C606[0000]0F            	mov		byte[cor], branco_intenso
   210 000001A5 B80000                  	mov		ax,0
   211 000001A8 50                      	push		ax
   212 000001A9 B84F00                  	mov		ax,79
   213 000001AC 50                      	push		ax
   214 000001AD B88A00                  	mov		ax,138
   215 000001B0 50                      	push		ax
   216 000001B1 B84F00                  	mov		ax,79
   217 000001B4 50                      	push		ax
   218 000001B5 E83105                  	call		line
   219                                  
   220 000001B8 C606[0000]0F            	mov		byte[cor], branco_intenso
   221 000001BD B80000                  	mov		ax,0
   222 000001C0 50                      	push		ax
   223 000001C1 B89F00                  	mov		ax,159
   224 000001C4 50                      	push		ax
   225 000001C5 B88A00                  	mov		ax,138
   226 000001C8 50                      	push		ax
   227 000001C9 B89F00                  	mov		ax,159
   228 000001CC 50                      	push		ax
   229 000001CD E81905                  	call		line
   230                                  
   231 000001D0 C606[0000]0F            	mov		byte[cor], branco_intenso
   232 000001D5 B80000                  	mov		ax,0
   233 000001D8 50                      	push		ax
   234 000001D9 B8EF00                  	mov		ax,239
   235 000001DC 50                      	push		ax
   236 000001DD B88A00                  	mov		ax,138
   237 000001E0 50                      	push		ax
   238 000001E1 B8EF00                  	mov		ax,239
   239 000001E4 50                      	push		ax
   240 000001E5 E80105                  	call		line
   241                                  
   242 000001E8 C606[0000]0F            	mov		byte[cor], branco_intenso
   243 000001ED B80000                  	mov		ax,0
   244 000001F0 50                      	push		ax
   245 000001F1 B83F01                  	mov		ax,319
   246 000001F4 50                      	push		ax
   247 000001F5 B88A00                  	mov		ax,138
   248 000001F8 50                      	push		ax
   249 000001F9 B83F01                  	mov		ax,319
   250 000001FC 50                      	push		ax
   251 000001FD E8E904                  	call		line
   252                                  
   253 00000200 C606[0000]0F            	mov		byte[cor], branco_intenso
   254 00000205 B80000                  	mov		ax,0
   255 00000208 50                      	push		ax
   256 00000209 B88F01                  	mov		ax,399
   257 0000020C 50                      	push		ax
   258 0000020D B88A00                  	mov		ax,138
   259 00000210 50                      	push		ax
   260 00000211 B88F01                  	mov		ax,399
   261 00000214 50                      	push		ax
   262 00000215 E8D104                  	call		line
   263 00000218 C3                      	ret
   264                                  
   265                                  l_w_seta:
   266 00000219 E8D602                  	call	cursor
   267 0000021C 8A87[3D00]              	mov     al, [bx+seta_str]
   268 00000220 E8E602                  	call	caracter
   269 00000223 43                      	inc     bx			;proximo caracter
   270 00000224 FEC2                    	inc		dl			;avanca a coluna
   271 00000226 E2F1                    	loop    l_w_seta
   272 00000228 C3                      	ret
   273                                  
   274                                  limpar_areas:
   275 00000229 E80400                  	call limpar_area1
   276 0000022C E83A00                  	call limpar_area2
   277 0000022F C3                      	ret
   278                                  
   279                                  limpar_area1:
   280 00000230 50                      	push ax
   281 00000231 53                      	push bx
   282 00000232 51                      	push cx
   283 00000233 C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   284 00000239 C606[0000]00            	mov	byte[cor],preto
   285                                  		loop_limpar_area1:
   286 0000023E 8B1E[6200]              			mov bx, word[contador]
   287 00000242 81FBE400                			cmp bx, 228
   288 00000246 745A                    			je volta_limpa
   289                                  		
   290                                  			;x1 ->  139
   291 00000248 B88B00                  			mov		ax, 139   ;->x1
   292 0000024B 50                      			push	ax
   293                                  		
   294                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   295 0000024C 31C9                    			xor cx, cx
   296 0000024E B9DE01                  			mov cx, 478
   297 00000251 29D9                    			sub cx, bx
   298 00000253 89C8                    			mov	ax, cx     ;->y1
   299 00000255 50                      			push ax
   300                                  		
   301                                  			;x2 = 638
   302 00000256 31C0                    			xor ax, ax
   303 00000258 057E02                  			add ax, 638
   304 0000025B 50                      			push ax
   305                                  		
   306                                  			;y2 = y1
   307 0000025C 89C8                    			mov	ax, cx     ;->y2=y1
   308 0000025E 50                      			push ax
   309 0000025F E88704                  			call line
   310                                  		
   311 00000262 FF06[6200]              			inc word[contador]
   312 00000266 E9D5FF                  			jmp loop_limpar_area1
   313                                  
   314                                  limpar_area2:
   315 00000269 50                      	push ax
   316 0000026A 53                      	push bx
   317 0000026B 51                      	push cx
   318 0000026C C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   319 00000272 C606[0000]00            	mov	byte[cor],preto
   320                                  		loop_limpar_area2:
   321 00000277 8B1E[6200]              			mov bx, word[contador]
   322 0000027B 81FBE400                			cmp bx, 228
   323 0000027F 7421                    			je volta_limpa
   324                                  		
   325                                  			;x1 ->  139
   326 00000281 B88B00                  			mov		ax, 139   ;->x1
   327 00000284 50                      			push	ax
   328                                  		
   329                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   330 00000285 31C9                    			xor cx, cx
   331 00000287 B9F800                  			mov cx, 248
   332 0000028A 29D9                    			sub cx, bx
   333 0000028C 89C8                    			mov	ax, cx     ;->y1
   334 0000028E 50                      			push ax
   335                                  		
   336                                  			;x2 = 638
   337 0000028F 31C0                    			xor ax, ax
   338 00000291 057E02                  			add ax, 638
   339 00000294 50                      			push ax
   340                                  		
   341                                  			;y2 = y1
   342 00000295 89C8                    			mov	ax, cx     ;->y2=y1
   343 00000297 50                      			push ax
   344 00000298 E84E04                  			call line
   345                                  
   346 0000029B FF06[6200]              			inc word[contador]
   347 0000029F E9D5FF                  			jmp loop_limpar_area2
   348                                  
   349                                  volta_limpa:
   350 000002A2 59                      	pop cx
   351 000002A3 5B                      	pop bx
   352 000002A4 58                      	pop ax
   353 000002A5 C3                      	ret
   354                                  
   355                                  exit:
   356                                  	; mov    	ah,08h
   357                                  	; int     21h
   358                                  
   359 000002A6 B400                    	mov  	ah,0   					; set video mode
   360 000002A8 A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   361 000002AB CD10                    	int  	10h
   362                                  
   363 000002AD B8004C                  	mov     ax,4C00H ; Exit to DOS function 
   364 000002B0 CD21                    	int     21h
   365                                  
   366                                  espera_mouse:
   367                                  		;mostrando mouse na tela
   368 000002B2 B80100                  		mov ax, 01h
   369 000002B5 CD33                    		int 33h
   370                                  		
   371                                  		;lendo mouse
   372 000002B7 31DB                    		xor bx, bx
   373 000002B9 B80300                  		mov ax, 03h
   374 000002BC CD33                    		int 33h
   375                                  
   376 000002BE 81FB0100                		cmp bx, 1
   377 000002C2 7403                    		je verifica
   378 000002C4 E9EBFF                  		jmp espera_mouse
   379                                  
   380                                  verifica:
   381                                  	;cx -> posicao horizontal do mouse
   382                                  	;dx -> posicao vertical do mouse	(INVERTIDO)
   383 000002C7 81F98C00                	cmp cx, 140
   384 000002CB 7DE5                    	jnl espera_mouse ;se o click ocorrer fora da barra de funcoes, nao faz nada e volta a esperar o mouse
   385 000002CD 81FA5000                	cmp dx, 80
   386 000002D1 7C3D                    	jl read_file	;abrir     	   dx < 80
   387 000002D3 81FAA000                	cmp dx, 160
   388 000002D7 7C24                    	jl load_data	;load  	080 <= dx < 160
   389 000002D9 81FAF000                	cmp dx, 240
   390 000002DD 7C1B                    	jl run_fir1		;FIR3  	160 <= dx < 240
   391 000002DF 81FA4001                	cmp dx, 320
   392 000002E3 7C12                    	jl run_fir2		;FIR2  	240 <= dx < 320
   393 000002E5 81FA9001                	cmp dx, 400
   394 000002E9 7C09                    	jl run_fir3		;FIR1  	320 <= dx < 400
   395 000002EB 81FAE001                	cmp dx, 480
   396 000002EF 7CB5                    	jl exit			;sair  	   dx > 400
   397 000002F1 E9BEFF                  	jmp espera_mouse
   398                                  
   399                                  run_fir3:
   400 000002F4 E9BBFF                  	jmp espera_mouse
   401                                  
   402                                  run_fir2:
   403 000002F7 E9B8FF                  	jmp espera_mouse
   404                                  
   405                                  run_fir1:
   406 000002FA E9B5FF                  	jmp espera_mouse
   407                                  
   408                                  load_data:
   409 000002FD 803E[4E00]00            	cmp byte[aberto],0
   410 00000302 740C                    	je read_file
   411 00000304 E84C00                  	call le_numeros
   412 00000307 E826FF                  	call limpar_area1
   413 0000030A E83F01                  	call plotar_entrada
   414 0000030D E9A2FF                  	jmp espera_mouse
   415                                  
   416                                  read_file:
   417 00000310 803E[4E00]01            	cmp byte[aberto],1
   418 00000315 7411                    	je fecha_arq_sinal
   419 00000317 C606[4E00]01            	mov byte[aberto], 1
   420 0000031C E81800                  	call open_file
   421 0000031F E83100                  	call le_numeros
   422 00000322 E82701                  	call plotar_entrada
   423 00000325 E98AFF                  	jmp espera_mouse
   424                                  
   425                                  fecha_arq_sinal:
   426 00000328 E81F00                  	call close_file
   427 0000032B C706[4E00]0000          	mov word [aberto], 0
   428 00000331 E8FCFE                  	call limpar_area1
   429 00000334 E8D9FF                  	call read_file
   430                                  
   431                                  open_file:
   432 00000337 C706[4F00]0000          	mov word[qtd_lida], 0  	; reseta a quantidade lida
   433 0000033D BA[4200]                	mov dx, filename 		; coloca o endere�o do nome do arquivo em dx (make a pointer to the filename)
   434 00000340 B000                    	mov al, 0        		; modo escrita e leitura (0 - for reading. 1 - for writing. 2 - both)
   435 00000342 B43D                    	mov ah, 3Dh      		; 3Dh of DOS Services opens a file
   436 00000344 CD21                    	int 21h    		 		; Call DOS (interruption 21h)
   437 00000346 A3[4C00]                	mov [handle], ax  		; Function 3Dh returns the file handle in AX, here we save it for later use.
   438 00000349 C3                      	ret
   439                                  
   440                                  close_file:
   441 0000034A 8B1E[4C00]              	mov bx, [handle]
   442 0000034E B43E                    	mov ah, 3eh
   443 00000350 CD21                    	int 21h ; close file...
   444 00000352 C3                      	ret
   445                                  
   446                                  le_numeros:
   447 00000353 C706[6200]0000          	mov word[contador], 0
   448                                  	loop_le_numeros:
   449                                  		;DOS Service Function number 3FH reads from a file.
   450 00000359 B43F                    		mov ah, 3FH
   451 0000035B B91000                  		mov cx, 16         	; I will assume "sinal.txt" has at least 16 bytes in it (ex:-5.6200000e+02  ).
   452 0000035E BA[5100]                		mov dx, buffer   	; DOS Functions like DX having pointers for some reason.
   453 00000361 8B1E[4C00]              		mov bx, [handle]  	; BX needs the file handle.
   454 00000365 CD21                    		int 21h           	; call DOS
   455                                  
   456                                  		; verifica se o final do arquivo foi encontrado 
   457 00000367 39C8                    		cmp ax, cx ;EOF reached?
   458 00000369 752E                    		jne EOF
   459                                  
   460 0000036B FF06[4F00]              		inc word[qtd_lida]
   461                                  
   462                                  		; Here we will put a $ after 4 bytes in the buffer
   463 0000036F BA[5100]                		mov dx, buffer
   464 00000372 01C2                    		add dx,ax
   465 00000374 89D3                    		mov bx,dx
   466 00000376 C60724                  		mov byte [bx], '$'
   467                                  
   468 00000379 E83800                  		call get_sinal_and_convert
   469                                  
   470 0000037C FF06[6200]              		inc word[contador]
   471 00000380 8B1E[6700]              		mov bx, word[qtd_pixels]
   472                                  
   473                                  		; verifica se os 500 números já foram lidos
   474 00000384 391E[6200]              		cmp word[contador], bx
   475 00000388 75CF                    		jne loop_le_numeros
   476 0000038A 7400                    		je  volta_le_numeros
   477                                  
   478                                  volta_le_numeros:
   479 0000038C E80100                  	call imprime_qtd_lida
   480 0000038F C3                      	ret
   481                                  
   482                                  imprime_qtd_lida:
   483 00000390 50                      	push ax
   484 00000391 A1[4F00]                	mov ax, word[qtd_lida]
   485 00000394 E8FD00                  	call print_dw_number
   486 00000397 58                      	pop ax
   487 00000398 C3                      	ret
   488                                  
   489                                  EOF:
   490 00000399 E974FF                  	jmp read_file	;	COMEÇA A LEITURA DO ARQUIVO DESDE O INÍCIO
   491                                  
   492                                  sinal_negativo:
   493 0000039C 8B1E[6200]              	mov bx, word[contador]
   494 000003A0 C687[5D02]01            	mov byte[vetor_input_sn+bx], 1
   495 000003A5 E91700                  	jmp converte_str
   496                                  
   497                                  sinal_positivo:
   498 000003A8 8B1E[6200]              	mov bx, word[contador]
   499 000003AC C687[5D02]00            	mov byte[vetor_input_sn+bx], 0
   500 000003B1 E90B00                  	jmp converte_str
   501                                  
   502                                  get_sinal_and_convert:
   503 000003B4 30E4                    	xor 	ah, ah                ; limpa ah
   504 000003B6 A0[5100]                	mov 	al, byte[buffer] 	  ; pega o primeiro valor do buffer, que indica o sinal (+ ou -)
   505 000003B9 3C2D                    	cmp  	al, 45				  ; compara com (-) em ASCII
   506 000003BB 74DF                    	je sinal_negativo
   507 000003BD 75E9                    	jne sinal_positivo
   508                                  
   509                                  converte_str:
   510 000003BF C606[5100]30            	mov byte[buffer], 30h
   511 000003C4 A0[5E00]                	mov al, byte[buffer + 13] ; anda 12 no vetor para ver o indice da potencia
   512 000003C7 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   513                                  	
   514                                  	;caso e02
   515 000003C9 3C02                    	cmp al, 2
   516 000003CB 7416                    	je calc_cem
   517                                  	
   518                                  	;caso e01
   519 000003CD 3C01                    	cmp al, 1
   520 000003CF 7450                    	je calc_dez
   521                                  	
   522                                  	;caso e00
   523 000003D1 30E4                    	xor ah,ah                 		; limpa ah
   524 000003D3 A0[5100]                	mov al, byte[buffer]
   525 000003D6 2C30                    	sub al, 30h               		; subtrai 30h do ASCII para saber o valor em decimal
   526                                  	
   527 000003D8 8B1E[6200]              	mov bx, word[contador]     		; pegamos o contador para incrementar na posicao do vetor_input_mod
   528 000003DC 0087[6900]              	add byte[vetor_input_mod+bx], al    ; somamos o valor da parte baixa da multiplicacao de "al" no "vetor_input_mod[]"
   529 000003E0 E96800                  	jmp cvt_retorna
   530                                  
   531                                  calc_cem:
   532                                  	;lembrar de push e pop antes de multiplicar
   533 000003E3 50                      	push ax
   534 000003E4 52                      	push dx
   535                                  	
   536 000003E5 30E4                    	xor ah,ah                 ; limpa ah
   537 000003E7 A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   538 000003EA 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   539 000003EC B96400                  	mov  cx, 100              ; cx = 100
   540 000003EF F7E1                    	mul  cx                   ; dx:ax = ax * cx
   541                                  	
   542 000003F1 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao da vetor_input_mod
   543 000003F5 8887[6900]              	mov byte[vetor_input_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" na "vetor_input_mod[]"
   544                                  
   545 000003F9 30E4                    	xor ah,ah                 ; limpa ah
   546 000003FB A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   547 000003FE 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   548 00000400 B90A00                  	mov  cx, 10               ; cx = 10
   549 00000403 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   550                                  	
   551 00000405 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do vetor_input_mod
   552 00000409 0087[6900]              	add byte[vetor_input_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "vetor_input_mod[]"
   553                                  	
   554 0000040D 30E4                    	xor ah,ah                 ; limpa ah
   555 0000040F A0[5500]                	mov al, byte[buffer+4]    ; al = ? (terceiro numero)
   556 00000412 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   557                                  	
   558 00000414 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do vetor_input_mod
   559 00000418 0087[6900]              	add byte[vetor_input_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "vetor_input_mod[]"
   560                                  
   561 0000041C 5A                      	pop dx                 ; volta aos valores originais
   562 0000041D 58                      	pop ax                 ; volta aos valores originais
   563 0000041E E92A00                  	jmp cvt_retorna
   564                                  	
   565                                  	
   566                                  calc_dez:
   567                                  	;lembrar de push e pop antes de multiplicar
   568 00000421 50                      	push ax
   569 00000422 52                      	push dx
   570                                  	
   571 00000423 30E4                    	xor ah,ah                 ; limpa ah
   572 00000425 A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   573 00000428 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   574 0000042A B90A00                  	mov  cx, 10               ; cx = 10
   575 0000042D F7E1                    	mul  cx                   ; dx:ax = ax * cx
   576                                  	
   577 0000042F 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do vetor_input_mod
   578 00000433 8887[6900]              	mov byte[vetor_input_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" no "vetor_input_mod[]"
   579                                  
   580 00000437 30E4                    	xor ah,ah                 ; limpa ah
   581 00000439 A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   582 0000043C 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   583                                  	
   584 0000043E 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do vetor_input_mod
   585 00000442 0087[6900]              	add byte[vetor_input_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "vetor_input_mod[]"
   586                                  	
   587 00000446 5A                      	pop dx                    ; volta aos valores originais
   588 00000447 58                      	pop ax                    ; volta aos valores originais
   589 00000448 E90000                  	jmp cvt_retorna
   590                                  
   591                                  
   592                                  cvt_retorna:
   593 0000044B C3                      	ret
   594                                  
   595                                  plotar_entrada:
   596 0000044C B9F301                  	mov cx, 499
   597 0000044F C706[6200]0000          	mov word[contador], 0
   598 00000455 C606[0000]0F            	mov	byte[cor],branco_intenso
   599                                  
   600                                  plot_num:
   601 0000045A A1[6200]                	mov		ax, word[contador]
   602 0000045D 058C00                  	add		ax, 140
   603 00000460 50                      	push	ax
   604 00000461 E80F00                  	call ajuste_ax
   605 00000464 50                      	push	ax
   606 00000465 B80100                  	mov ax, 1
   607 00000468 50                      	push	ax
   608 00000469 E8C001                  	call	full_circle
   609 0000046C FF06[6200]              	inc word[contador]
   610 00000470 E2E8                    	loop plot_num
   611 00000472 C3                      	ret
   612                                  
   613                                  ajuste_ax:
   614 00000473 8B1E[6200]              	mov bx, word[contador]
   615 00000477 B80000                  	mov ax, 0
   616 0000047A 8A87[5D02]              	mov al, byte[bx + vetor_input_sn]
   617 0000047E 3C00                    	cmp al, 0
   618 00000480 7402                    	je set_ax_positivo
   619 00000482 7508                    	jne set_ax_negativo
   620                                  
   621                                  set_ax_positivo:
   622 00000484 B86C01                  	mov ax, 364
   623 00000487 0287[6900]              	add al, byte[vetor_input_mod + bx]
   624 0000048B C3                      	ret
   625                                  
   626                                  set_ax_negativo:
   627 0000048C B86C01                  	mov ax, 364
   628 0000048F 2A87[6900]              	sub al, byte[vetor_input_mod + bx]
   629 00000493 C3                      	ret
   630                                  
   631                                  ;	imprime, em decimal, o valor númerico de AX 
   632                                  print_dw_number:
   633                                      ;initialize count
   634 00000494 53                      	push bx
   635 00000495 51                      	push cx
   636 00000496 52                      	push dx
   637                                  
   638 00000497 C706[6200]0000          	mov word[contador], 0
   639 0000049D B90000                      mov cx,0
   640 000004A0 BA0000                      mov dx,0
   641                                      loop_print_dw_number:
   642 000004A3 3D0000                          cmp ax,0
   643 000004A6 740C                            je print1     	; if ax is zero
   644 000004A8 BB0A00                          mov bx,10     	; initialize bx to 10  
   645 000004AB F7F3                            div bx    		; extract the last digit             
   646 000004AD 52                              push dx    		; push it in the stack         
   647 000004AE 41                              inc cx   		; increment the count          
   648 000004AF 31D2                            xor dx,dx		; set dx to 0
   649 000004B1 E9EFFF                          jmp loop_print_dw_number
   650                                      print1:
   651 000004B4 81F90000                        cmp cx,0
   652 000004B8 7434                            je volta_print	; if cx is zero
   653 000004BA 5A                              pop dx			; pop the top of stack
   654                                  
   655                                          ;add 48 so that it
   656                                          ;represents the ASCII
   657                                          ;value of digits
   658 000004BB 81C23000                        add dx, 48
   659                                  
   660                                  		; 	imprime DX
   661 000004BF 50                      		push ax
   662 000004C0 53                      		push bx
   663 000004C1 51                      		push cx
   664 000004C2 89D0                    		mov ax, dx
   665 000004C4 52                      		push dx
   666                                  
   667 000004C5 B607                    		mov     	dh, 7			;linha 0-29
   668 000004C7 B206                    		mov     	dl, 6			;coluna 0-79
   669 000004C9 C606[0000]0F            		mov			byte[cor], branco_intenso
   670 000004CE 0216[6200]              		add			dl, byte[contador]
   671                                  
   672 000004D2 E81D00                  		call	cursor
   673 000004D5 E83100                  		call	caracter
   674 000004D8 FEC2                    		inc		dl
   675 000004DA E81500                  		call	cursor
   676 000004DD 88E0                    		mov     al, ah
   677 000004DF E82700                  		call	caracter
   678                                  
   679 000004E2 5A                      		pop dx
   680 000004E3 59                      		pop cx
   681 000004E4 5B                      		pop bx
   682 000004E5 58                      		pop ax
   683                                  		; 	FIM imprime DX
   684                                  
   685 000004E6 FF06[6200]              		inc word[contador]
   686 000004EA 49                              dec cx			;decrease the count
   687 000004EB E9C6FF                          jmp print1
   688                                  volta_print:
   689 000004EE 5A                      	pop dx
   690 000004EF 59                      	pop cx
   691 000004F0 5B                      	pop bx
   692 000004F1 C3                      	ret
   693                                  
   694                                  ;***************************************************************************
   695                                  ;
   696                                  ;   fun��o cursor
   697                                  ;
   698                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   699                                  cursor:
   700 000004F2 9C                      		pushf
   701 000004F3 50                      		push 		ax
   702 000004F4 53                      		push 		bx
   703 000004F5 51                      		push		cx
   704 000004F6 52                      		push		dx
   705 000004F7 56                      		push		si
   706 000004F8 57                      		push		di
   707 000004F9 55                      		push		bp
   708 000004FA B402                    		mov     	ah,2
   709 000004FC B700                    		mov     	bh,0
   710 000004FE CD10                    		int     	10h
   711 00000500 5D                      		pop		bp
   712 00000501 5F                      		pop		di
   713 00000502 5E                      		pop		si
   714 00000503 5A                      		pop		dx
   715 00000504 59                      		pop		cx
   716 00000505 5B                      		pop		bx
   717 00000506 58                      		pop		ax
   718 00000507 9D                      		popf
   719 00000508 C3                      		ret
   720                                  ;_____________________________________________________________________________
   721                                  ;
   722                                  ;   fun��o caracter escrito na posi��o do cursor
   723                                  ;
   724                                  ; al= caracter a ser escrito
   725                                  ; cor definida na variavel cor
   726                                  caracter:
   727 00000509 9C                      		pushf
   728 0000050A 50                      		push 		ax
   729 0000050B 53                      		push 		bx
   730 0000050C 51                      		push		cx
   731 0000050D 52                      		push		dx
   732 0000050E 56                      		push		si
   733 0000050F 57                      		push		di
   734 00000510 55                      		push		bp
   735 00000511 B409                        	mov     	ah,9
   736 00000513 B700                        	mov     	bh,0
   737 00000515 B90100                      	mov     	cx,1
   738 00000518 8A1E[0000]                 		mov     	bl,[cor]
   739 0000051C CD10                        	int     	10h
   740 0000051E 5D                      		pop		bp
   741 0000051F 5F                      		pop		di
   742 00000520 5E                      		pop		si
   743 00000521 5A                      		pop		dx
   744 00000522 59                      		pop		cx
   745 00000523 5B                      		pop		bx
   746 00000524 58                      		pop		ax
   747 00000525 9D                      		popf
   748 00000526 C3                      		ret
   749                                  ;_____________________________________________________________________________
   750                                  ;
   751                                  ;   fun��o plot_xy
   752                                  ;
   753                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   754                                  ; cor definida na variavel cor
   755                                  plot_xy:
   756 00000527 55                      		push		bp
   757 00000528 89E5                    		mov		bp,sp
   758 0000052A 9C                      		pushf
   759 0000052B 50                      		push 		ax
   760 0000052C 53                      		push 		bx
   761 0000052D 51                      		push		cx
   762 0000052E 52                      		push		dx
   763 0000052F 56                      		push		si
   764 00000530 57                      		push		di
   765 00000531 B40C                    	    mov     	ah,0ch
   766 00000533 A0[0000]                	    mov     	al,[cor]
   767 00000536 B700                    	    mov     	bh,0
   768 00000538 BADF01                  	    mov     	dx,479
   769 0000053B 2B5604                  		sub		dx,[bp+4]
   770 0000053E 8B4E06                  	    mov     	cx,[bp+6]
   771 00000541 CD10                    	    int     	10h
   772 00000543 5F                      		pop		di
   773 00000544 5E                      		pop		si
   774 00000545 5A                      		pop		dx
   775 00000546 59                      		pop		cx
   776 00000547 5B                      		pop		bx
   777 00000548 58                      		pop		ax
   778 00000549 9D                      		popf
   779 0000054A 5D                      		pop		bp
   780 0000054B C20400                  		ret		4
   781                                  ;_____________________________________________________________________________
   782                                  ;    fun��o circle
   783                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   784                                  ; cor definida na variavel cor
   785                                  circle:
   786 0000054E 55                      	push 	bp
   787 0000054F 89E5                    	mov	 	bp,sp
   788 00000551 9C                      	pushf                        ;coloca os flags na pilha
   789 00000552 50                      	push 	ax
   790 00000553 53                      	push 	bx
   791 00000554 51                      	push	cx
   792 00000555 52                      	push	dx
   793 00000556 56                      	push	si
   794 00000557 57                      	push	di
   795                                  	
   796 00000558 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   797 0000055B 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   798 0000055E 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   799                                  	
   800 00000561 89DA                    	mov 	dx,bx	
   801 00000563 01CA                    	add		dx,cx       ;ponto extremo superior
   802 00000565 50                      	push    ax			
   803 00000566 52                      	push	dx
   804 00000567 E8BDFF                  	call plot_xy
   805                                  	
   806 0000056A 89DA                    	mov		dx,bx
   807 0000056C 29CA                    	sub		dx,cx       ;ponto extremo inferior
   808 0000056E 50                      	push    ax			
   809 0000056F 52                      	push	dx
   810 00000570 E8B4FF                  	call plot_xy
   811                                  	
   812 00000573 89C2                    	mov 	dx,ax	
   813 00000575 01CA                    	add		dx,cx       ;ponto extremo direita
   814 00000577 52                      	push    dx			
   815 00000578 53                      	push	bx
   816 00000579 E8ABFF                  	call plot_xy
   817                                  	
   818 0000057C 89C2                    	mov		dx,ax
   819 0000057E 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   820 00000580 52                      	push    dx			
   821 00000581 53                      	push	bx
   822 00000582 E8A2FF                  	call plot_xy
   823                                  		
   824 00000585 89CF                    	mov		di,cx
   825 00000587 81EF0100                	sub		di,1	 ;di=r-1
   826 0000058B BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   827                                  	
   828                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   829                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   830                                  ;valores positivos para d
   831                                  
   832                                  stay:				;loop
   833 0000058E 89FE                    	mov		si,di
   834 00000590 81FE0000                	cmp		si,0
   835 00000594 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   836 00000596 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   837 00000598 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   838 0000059A 81C60300                	add		si,3
   839 0000059E 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   840 000005A0 42                      	inc		dx		;incrementa dx
   841 000005A1 E90E00                  	jmp		plotar
   842                                  inf:	
   843 000005A4 89D6                    	mov		si,dx
   844 000005A6 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   845 000005A8 D1E6                    	sal		si,1
   846 000005AA 81C60500                	add		si,5
   847 000005AE 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   848 000005B0 42                      	inc		dx		;incrementa x (dx)
   849 000005B1 49                      	dec		cx		;decrementa y (cx)
   850                                  	
   851                                  plotar:	
   852 000005B2 89D6                    	mov		si,dx
   853 000005B4 01C6                    	add		si,ax
   854 000005B6 56                      	push    si			;coloca a abcisa x+xc na pilha
   855 000005B7 89CE                    	mov		si,cx
   856 000005B9 01DE                    	add		si,bx
   857 000005BB 56                      	push    si			;coloca a ordenada y+yc na pilha
   858 000005BC E868FF                  	call plot_xy		;toma conta do segundo octante
   859 000005BF 89C6                    	mov		si,ax
   860 000005C1 01D6                    	add		si,dx
   861 000005C3 56                      	push    si			;coloca a abcisa xc+x na pilha
   862 000005C4 89DE                    	mov		si,bx
   863 000005C6 29CE                    	sub		si,cx
   864 000005C8 56                      	push    si			;coloca a ordenada yc-y na pilha
   865 000005C9 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   866 000005CC 89C6                    	mov		si,ax
   867 000005CE 01CE                    	add		si,cx
   868 000005D0 56                      	push    si			;coloca a abcisa xc+y na pilha
   869 000005D1 89DE                    	mov		si,bx
   870 000005D3 01D6                    	add		si,dx
   871 000005D5 56                      	push    si			;coloca a ordenada yc+x na pilha
   872 000005D6 E84EFF                  	call plot_xy		;toma conta do segundo octante
   873 000005D9 89C6                    	mov		si,ax
   874 000005DB 01CE                    	add		si,cx
   875 000005DD 56                      	push    si			;coloca a abcisa xc+y na pilha
   876 000005DE 89DE                    	mov		si,bx
   877 000005E0 29D6                    	sub		si,dx
   878 000005E2 56                      	push    si			;coloca a ordenada yc-x na pilha
   879 000005E3 E841FF                  	call plot_xy		;toma conta do oitavo octante
   880 000005E6 89C6                    	mov		si,ax
   881 000005E8 29D6                    	sub		si,dx
   882 000005EA 56                      	push    si			;coloca a abcisa xc-x na pilha
   883 000005EB 89DE                    	mov		si,bx
   884 000005ED 01CE                    	add		si,cx
   885 000005EF 56                      	push    si			;coloca a ordenada yc+y na pilha
   886 000005F0 E834FF                  	call plot_xy		;toma conta do terceiro octante
   887 000005F3 89C6                    	mov		si,ax
   888 000005F5 29D6                    	sub		si,dx
   889 000005F7 56                      	push    si			;coloca a abcisa xc-x na pilha
   890 000005F8 89DE                    	mov		si,bx
   891 000005FA 29CE                    	sub		si,cx
   892 000005FC 56                      	push    si			;coloca a ordenada yc-y na pilha
   893 000005FD E827FF                  	call plot_xy		;toma conta do sexto octante
   894 00000600 89C6                    	mov		si,ax
   895 00000602 29CE                    	sub		si,cx
   896 00000604 56                      	push    si			;coloca a abcisa xc-y na pilha
   897 00000605 89DE                    	mov		si,bx
   898 00000607 29D6                    	sub		si,dx
   899 00000609 56                      	push    si			;coloca a ordenada yc-x na pilha
   900 0000060A E81AFF                  	call plot_xy		;toma conta do quinto octante
   901 0000060D 89C6                    	mov		si,ax
   902 0000060F 29CE                    	sub		si,cx
   903 00000611 56                      	push    si			;coloca a abcisa xc-y na pilha
   904 00000612 89DE                    	mov		si,bx
   905 00000614 01D6                    	add		si,dx
   906 00000616 56                      	push    si			;coloca a ordenada yc-x na pilha
   907 00000617 E80DFF                  	call plot_xy		;toma conta do quarto octante
   908                                  	
   909 0000061A 39D1                    	cmp		cx,dx
   910 0000061C 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   911 0000061E E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   912                                  	
   913                                  	
   914                                  fim_circle:
   915 00000621 5F                      	pop		di
   916 00000622 5E                      	pop		si
   917 00000623 5A                      	pop		dx
   918 00000624 59                      	pop		cx
   919 00000625 5B                      	pop		bx
   920 00000626 58                      	pop		ax
   921 00000627 9D                      	popf
   922 00000628 5D                      	pop		bp
   923 00000629 C20600                  	ret		6
   924                                  ;-----------------------------------------------------------------------------
   925                                  ;    fun��o full_circle
   926                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   927                                  ; cor definida na variavel cor					  
   928                                  full_circle:
   929 0000062C 55                      	push 	bp
   930 0000062D 89E5                    	mov	 	bp,sp
   931 0000062F 9C                      	pushf                        ;coloca os flags na pilha
   932 00000630 50                      	push 	ax
   933 00000631 53                      	push 	bx
   934 00000632 51                      	push	cx
   935 00000633 52                      	push	dx
   936 00000634 56                      	push	si
   937 00000635 57                      	push	di
   938                                  
   939 00000636 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   940 00000639 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   941 0000063C 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   942                                  	
   943 0000063F 89DE                    	mov		si,bx
   944 00000641 29CE                    	sub		si,cx
   945 00000643 50                      	push    ax			;coloca xc na pilha			
   946 00000644 56                      	push	si			;coloca yc-r na pilha
   947 00000645 89DE                    	mov		si,bx
   948 00000647 01CE                    	add		si,cx
   949 00000649 50                      	push	ax		;coloca xc na pilha
   950 0000064A 56                      	push	si		;coloca yc+r na pilha
   951 0000064B E89B00                  	call line
   952                                  	
   953                                  		
   954 0000064E 89CF                    	mov		di,cx
   955 00000650 81EF0100                	sub		di,1	 ;di=r-1
   956 00000654 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   957                                  	
   958                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   959                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   960                                  ;valores positivos para d
   961                                  
   962                                  stay_full:				;loop
   963 00000657 89FE                    	mov		si,di
   964 00000659 81FE0000                	cmp		si,0
   965 0000065D 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   966 0000065F 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   967 00000661 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   968 00000663 81C60300                	add		si,3
   969 00000667 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   970 00000669 42                      	inc		dx		;incrementa dx
   971 0000066A E90E00                  	jmp		plotar_full
   972                                  inf_full:	
   973 0000066D 89D6                    	mov		si,dx
   974 0000066F 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   975 00000671 D1E6                    	sal		si,1
   976 00000673 81C60500                	add		si,5
   977 00000677 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   978 00000679 42                      	inc		dx		;incrementa x (dx)
   979 0000067A 49                      	dec		cx		;decrementa y (cx)
   980                                  	
   981                                  plotar_full:	
   982 0000067B 89C6                    	mov		si,ax
   983 0000067D 01CE                    	add		si,cx
   984 0000067F 56                      	push	si		;coloca a abcisa y+xc na pilha			
   985 00000680 89DE                    	mov		si,bx
   986 00000682 29D6                    	sub		si,dx
   987 00000684 56                      	push    si		;coloca a ordenada yc-x na pilha
   988 00000685 89C6                    	mov		si,ax
   989 00000687 01CE                    	add		si,cx
   990 00000689 56                      	push	si		;coloca a abcisa y+xc na pilha	
   991 0000068A 89DE                    	mov		si,bx
   992 0000068C 01D6                    	add		si,dx
   993 0000068E 56                      	push    si		;coloca a ordenada yc+x na pilha	
   994 0000068F E85700                  	call 	line
   995                                  	
   996 00000692 89C6                    	mov		si,ax
   997 00000694 01D6                    	add		si,dx
   998 00000696 56                      	push	si		;coloca a abcisa xc+x na pilha			
   999 00000697 89DE                    	mov		si,bx
  1000 00000699 29CE                    	sub		si,cx
  1001 0000069B 56                      	push    si		;coloca a ordenada yc-y na pilha
  1002 0000069C 89C6                    	mov		si,ax
  1003 0000069E 01D6                    	add		si,dx
  1004 000006A0 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1005 000006A1 89DE                    	mov		si,bx
  1006 000006A3 01CE                    	add		si,cx
  1007 000006A5 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1008 000006A6 E84000                  	call	line
  1009                                  	
  1010 000006A9 89C6                    	mov		si,ax
  1011 000006AB 29D6                    	sub		si,dx
  1012 000006AD 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1013 000006AE 89DE                    	mov		si,bx
  1014 000006B0 29CE                    	sub		si,cx
  1015 000006B2 56                      	push    si		;coloca a ordenada yc-y na pilha
  1016 000006B3 89C6                    	mov		si,ax
  1017 000006B5 29D6                    	sub		si,dx
  1018 000006B7 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1019 000006B8 89DE                    	mov		si,bx
  1020 000006BA 01CE                    	add		si,cx
  1021 000006BC 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1022 000006BD E82900                  	call	line
  1023                                  	
  1024 000006C0 89C6                    	mov		si,ax
  1025 000006C2 29CE                    	sub		si,cx
  1026 000006C4 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1027 000006C5 89DE                    	mov		si,bx
  1028 000006C7 29D6                    	sub		si,dx
  1029 000006C9 56                      	push    si		;coloca a ordenada yc-x na pilha
  1030 000006CA 89C6                    	mov		si,ax
  1031 000006CC 29CE                    	sub		si,cx
  1032 000006CE 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1033 000006CF 89DE                    	mov		si,bx
  1034 000006D1 01D6                    	add		si,dx
  1035 000006D3 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1036 000006D4 E81200                  	call	line
  1037                                  	
  1038 000006D7 39D1                    	cmp		cx,dx
  1039 000006D9 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1040 000006DB E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1041                                  	
  1042                                  	
  1043                                  fim_full_circle:
  1044 000006DE 5F                      	pop		di
  1045 000006DF 5E                      	pop		si
  1046 000006E0 5A                      	pop		dx
  1047 000006E1 59                      	pop		cx
  1048 000006E2 5B                      	pop		bx
  1049 000006E3 58                      	pop		ax
  1050 000006E4 9D                      	popf
  1051 000006E5 5D                      	pop		bp
  1052 000006E6 C20600                  	ret		6
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  ;
  1055                                  ;   fun��o line
  1056                                  ;
  1057                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1058                                  line:
  1059 000006E9 55                      		push		bp
  1060 000006EA 89E5                    		mov		bp,sp
  1061 000006EC 9C                      		pushf                        ;coloca os flags na pilha
  1062 000006ED 50                      		push 		ax
  1063 000006EE 53                      		push 		bx
  1064 000006EF 51                      		push		cx
  1065 000006F0 52                      		push		dx
  1066 000006F1 56                      		push		si
  1067 000006F2 57                      		push		di
  1068 000006F3 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1069 000006F6 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1070 000006F9 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1071 000006FC 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1072 000006FF 39C8                    		cmp		ax,cx
  1073 00000701 7408                    		je		line2
  1074 00000703 721C                    		jb		line1
  1075 00000705 91                      		xchg		ax,cx
  1076 00000706 87DA                    		xchg		bx,dx
  1077 00000708 E91600                  		jmp		line1
  1078                                  line2:		; deltax=0
  1079 0000070B 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1080 0000070D 7202                    		jb		line3
  1081 0000070F 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1082                                  line3:	; dx > bx
  1083 00000711 50                      		push		ax
  1084 00000712 53                      		push		bx
  1085 00000713 E811FE                  		call 		plot_xy
  1086 00000716 39D3                    		cmp		bx,dx
  1087 00000718 7503                    		jne		line31
  1088 0000071A E9C600                  		jmp		fim_line
  1089 0000071D 43                      line31:		inc		bx
  1090 0000071E E9F0FF                  		jmp		line3
  1091                                  ;deltax <>0
  1092                                  line1:
  1093                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1094                                  	; cx > ax
  1095 00000721 51                      		push		cx
  1096 00000722 29C1                    		sub		cx,ax
  1097 00000724 890E[0600]              		mov		[deltax],cx
  1098 00000728 59                      		pop		cx
  1099 00000729 52                      		push		dx
  1100 0000072A 29DA                    		sub		dx,bx
  1101 0000072C 7702                    		ja		line32
  1102 0000072E F7DA                    		neg		dx
  1103                                  line32:		
  1104 00000730 8916[0800]              		mov		[deltay],dx
  1105 00000734 5A                      		pop		dx
  1106                                  
  1107 00000735 50                      		push		ax
  1108 00000736 A1[0600]                		mov		ax,[deltax]
  1109 00000739 3B06[0800]              		cmp		ax,[deltay]
  1110 0000073D 58                      		pop		ax
  1111 0000073E 724D                    		jb		line5
  1112                                  
  1113                                  	; cx > ax e deltax>deltay
  1114 00000740 51                      		push		cx
  1115 00000741 29C1                    		sub		cx,ax
  1116 00000743 890E[0600]              		mov		[deltax],cx
  1117 00000747 59                      		pop		cx
  1118 00000748 52                      		push		dx
  1119 00000749 29DA                    		sub		dx,bx
  1120 0000074B 8916[0800]              		mov		[deltay],dx
  1121 0000074F 5A                      		pop		dx
  1122                                  
  1123 00000750 89C6                    		mov		si,ax
  1124                                  line4:
  1125 00000752 50                      		push		ax
  1126 00000753 52                      		push		dx
  1127 00000754 56                      		push		si
  1128 00000755 29C6                    		sub		si,ax	;(x-x1)
  1129 00000757 A1[0800]                		mov		ax,[deltay]
  1130 0000075A F7EE                    		imul		si
  1131 0000075C 8B36[0600]              		mov		si,[deltax]		;arredondar
  1132 00000760 D1EE                    		shr		si,1
  1133                                  ; se numerador (DX)>0 soma se <0 subtrai
  1134 00000762 81FA0000                		cmp		dx,0
  1135 00000766 7C09                    		jl		ar1
  1136 00000768 01F0                    		add		ax,si
  1137 0000076A 81D20000                		adc		dx,0
  1138 0000076E E90600                  		jmp		arc1
  1139 00000771 29F0                    ar1:		sub		ax,si
  1140 00000773 81DA0000                		sbb		dx,0
  1141                                  arc1:
  1142 00000777 F73E[0600]              		idiv		word [deltax]
  1143 0000077B 01D8                    		add		ax,bx
  1144 0000077D 5E                      		pop		si
  1145 0000077E 56                      		push		si
  1146 0000077F 50                      		push		ax
  1147 00000780 E8A4FD                  		call		plot_xy
  1148 00000783 5A                      		pop		dx
  1149 00000784 58                      		pop		ax
  1150 00000785 39CE                    		cmp		si,cx
  1151 00000787 745A                    		je		fim_line
  1152 00000789 46                      		inc		si
  1153 0000078A E9C5FF                  		jmp		line4
  1154                                  
  1155 0000078D 39D3                    line5:		cmp		bx,dx
  1156 0000078F 7203                    		jb 		line7
  1157 00000791 91                      		xchg		ax,cx
  1158 00000792 87DA                    		xchg		bx,dx
  1159                                  line7:
  1160 00000794 51                      		push		cx
  1161 00000795 29C1                    		sub		cx,ax
  1162 00000797 890E[0600]              		mov		[deltax],cx
  1163 0000079B 59                      		pop		cx
  1164 0000079C 52                      		push		dx
  1165 0000079D 29DA                    		sub		dx,bx
  1166 0000079F 8916[0800]              		mov		[deltay],dx
  1167 000007A3 5A                      		pop		dx
  1168 000007A4 89DE                    		mov		si,bx
  1169                                  line6:
  1170 000007A6 52                      		push		dx
  1171 000007A7 56                      		push		si
  1172 000007A8 50                      		push		ax
  1173 000007A9 29DE                    		sub		si,bx	;(y-y1)
  1174 000007AB A1[0600]                		mov		ax,[deltax]
  1175 000007AE F7EE                    		imul		si
  1176 000007B0 8B36[0800]              		mov		si,[deltay]		;arredondar
  1177 000007B4 D1EE                    		shr		si,1
  1178                                  ; se numerador (DX)>0 soma se <0 subtrai
  1179 000007B6 81FA0000                		cmp		dx,0
  1180 000007BA 7C09                    		jl		ar2
  1181 000007BC 01F0                    		add		ax,si
  1182 000007BE 81D20000                		adc		dx,0
  1183 000007C2 E90600                  		jmp		arc2
  1184 000007C5 29F0                    ar2:		sub		ax,si
  1185 000007C7 81DA0000                		sbb		dx,0
  1186                                  arc2:
  1187 000007CB F73E[0800]              		idiv		word [deltay]
  1188 000007CF 89C7                    		mov		di,ax
  1189 000007D1 58                      		pop		ax
  1190 000007D2 01C7                    		add		di,ax
  1191 000007D4 5E                      		pop		si
  1192 000007D5 57                      		push		di
  1193 000007D6 56                      		push		si
  1194 000007D7 E84DFD                  		call		plot_xy
  1195 000007DA 5A                      		pop		dx
  1196 000007DB 39D6                    		cmp		si,dx
  1197 000007DD 7404                    		je		fim_line
  1198 000007DF 46                      		inc		si
  1199 000007E0 E9C3FF                  		jmp		line6
  1200                                  
  1201                                  fim_line:
  1202 000007E3 5F                      		pop		di
  1203 000007E4 5E                      		pop		si
  1204 000007E5 5A                      		pop		dx
  1205 000007E6 59                      		pop		cx
  1206 000007E7 5B                      		pop		bx
  1207 000007E8 58                      		pop		ax
  1208 000007E9 9D                      		popf
  1209 000007EA 5D                      		pop		bp
  1210 000007EB C20800                  		ret		8
  1211                                  ;*******************************************************************
  1212                                  segment data
  1213                                  
  1214 00000000 0F                      cor		db		branco_intenso
  1215                                  
  1216                                  ;	I R G B COR
  1217                                  ;	0 0 0 0 preto
  1218                                  ;	0 0 0 1 azul
  1219                                  ;	0 0 1 0 verde
  1220                                  ;	0 0 1 1 cyan
  1221                                  ;	0 1 0 0 vermelho
  1222                                  ;	0 1 0 1 magenta
  1223                                  ;	0 1 1 0 marrom
  1224                                  ;	0 1 1 1 branco
  1225                                  ;	1 0 0 0 cinza
  1226                                  ;	1 0 0 1 azul claro
  1227                                  ;	1 0 1 0 verde claro
  1228                                  ;	1 0 1 1 cyan claro
  1229                                  ;	1 1 0 0 rosa
  1230                                  ;	1 1 0 1 magenta claro
  1231                                  ;	1 1 1 0 amarelo
  1232                                  ;	1 1 1 1 branco intenso
  1233                                  
  1234                                  preto			equ		0
  1235                                  azul			equ		1
  1236                                  verde			equ		2
  1237                                  cyan			equ		3
  1238                                  vermelho		equ		4
  1239                                  magenta			equ		5
  1240                                  marrom			equ		6
  1241                                  branco			equ		7
  1242                                  cinza			equ		8
  1243                                  azul_claro		equ		9
  1244                                  verde_claro		equ		10
  1245                                  cyan_claro		equ		11
  1246                                  rosa			equ		12
  1247                                  magenta_claro	equ		13
  1248                                  amarelo			equ		14
  1249                                  branco_intenso	equ		15
  1250                                  
  1251 00000001 00                      modo_anterior	db		0
  1252 00000002 0000                    linha   		dw  	0
  1253 00000004 0000                    coluna  		dw  	0
  1254 00000006 0000                    deltax			dw		0
  1255 00000008 0000                    deltay			dw		0	
  1256 0000000A 557369656C20466572-     nome_aluno    	db  	'Usiel Ferreira Lopes Junior'
  1257 00000013 7265697261204C6F70-
  1258 0000001C 6573204A756E696F72 
  1259 00000025 4162726972              abrir_str    	db  	'Abrir'
  1260 0000002A 4649525F31              fir1_str    	db  	'FIR_1'
  1261 0000002F 4649525F32              fir2_str    	db  	'FIR_2'
  1262 00000034 4649525F33              fir3_str    	db  	'FIR_3'
  1263 00000039 53616972                sair_str    	db  	'Sair'
  1264 0000003D 3E203E203E              seta_str    	db  	'> > >'
  1265                                  
  1266 00000042 73696E616C2E747874-     filename 		db 		'sinal.txt',0
  1267 0000004B 00                 
  1268 0000004C 0000                    handle 			dw 		0
  1269 0000004E 00                      aberto 			db 		0
  1270 0000004F 0000                    qtd_lida 		dw 		0
  1271                                  
  1272 00000051 <res 00000010>          buffer 			resb 	16		
  1273 00000061 24                      				db 	'$'
  1274                                  
  1275 00000062 0000                    contador 		dw 		0
  1276 00000064 0000                    contador2 		dw 		0
  1277 00000066 00                      sinal 			db 		0
  1278 00000067 F401                    qtd_pixels  	dw 		500
  1279                                  
  1280 00000069 00<rept>                vetor_input_mod 	times 	500 	db 	0  	; Vetor Módulo
  1281 0000025D 00<rept>                vetor_input_sn 		times 	500 	db 	0  	; Vetor Sinal
  1282                                  
  1283                                  ;*************************************************************************
  1284                                  segment stack stack
  1285 00000000 <res 00000200>              resb 		512
  1286                                  stacktop:
  1287                                  
  1288                                  
