     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                	mov 		ax,data
     8 00000003 8ED8                    	mov 		ds,ax
     9 00000005 B8[0000]                	mov 		ax,stack
    10 00000008 8ED0                    	mov 		ss,ax
    11 0000000A BC[0002]                	mov 		sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                    	mov  		ah,0Fh
    15 0000000F CD10                    	int  		10h
    16 00000011 A2[0100]                	mov  		[modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                    	mov     	al,12h
    20 00000016 B400                    	mov     	ah,0
    21 00000018 CD10                    	int     	10h
    22 0000001A E80300                  	call desenha_layout
    23 0000001D E98602                  	jmp espera_mouse
    24                                  	; jmp read_file			APENAS PARA TESTAR DIRETAMENTE A FUNÇÃO
    25                                  
    26                                  desenha_layout:
    27                                  ; desenha divisorias da tela 
    28                                  	; escreve nome
    29 00000020 B91B00                  	mov     	cx,27			;n�mero de caracteres
    30 00000023 BB0000                  	mov     	bx,0
    31 00000026 B61D                    	mov     	dh,29			;linha 0-29
    32 00000028 B223                    	mov     	dl,35			;coluna 0-79
    33 0000002A C606[0000]0A            	mov		byte[cor], verde_claro
    34                                  	l_w_name:
    35 0000002F E8CF06                  		call	cursor
    36 00000032 8A87[0A00]              		mov     al,[bx+nome_aluno]
    37 00000036 E8DF06                  		call	caracter
    38 00000039 43                      		inc     bx			;proximo caracter
    39 0000003A FEC2                    		inc		dl			;avanca a coluna
    40 0000003C E2F1                    		loop    l_w_name
    41                                  
    42                                  	; escreve sair
    43 0000003E B90400                  	mov     	cx,4			;n�mero de caracteres
    44 00000041 BB0000                  	mov     	bx,0
    45 00000044 B61B                    	mov     	dh,27			;linha 0-29
    46 00000046 B206                    	mov     	dl,6			;coluna 0-79
    47 00000048 C606[0000]0C            	mov		byte[cor], rosa
    48                                  	l_w_sair:
    49 0000004D E8B106                  		call	cursor
    50 00000050 8A87[3900]              		mov     al,[bx+sair_str]
    51 00000054 E8C106                  		call	caracter
    52 00000057 43                      		inc     bx			;proximo caracter
    53 00000058 FEC2                    		inc		dl			;avanca a coluna
    54 0000005A E2F1                    		loop    l_w_sair
    55                                  
    56                                  	; escreve FIR_3
    57 0000005C B90500                  	mov     	cx,5			;n�mero de caracteres
    58 0000005F BB0000                  	mov     	bx,0
    59 00000062 B616                    	mov     	dh,22			;linha 0-29
    60 00000064 B206                    	mov     	dl,6			;coluna 0-79
    61 00000066 C606[0000]0B            	mov		byte[cor], cyan_claro
    62                                  	l_w_fir3:
    63 0000006B E89306                  		call	cursor
    64 0000006E 8A87[3400]              		mov     al,[bx+fir3_str]
    65 00000072 E8A306                  		call	caracter
    66 00000075 43                      		inc     bx			;proximo caracter
    67 00000076 FEC2                    		inc		dl			;avanca a coluna
    68 00000078 E2F1                    		loop    l_w_fir3
    69                                  
    70                                  	; escreve FIR_2
    71 0000007A B90500                  	mov     	cx,5			;n�mero de caracteres
    72 0000007D BB0000                  	mov     	bx,0
    73 00000080 B611                    	mov     	dh,17			;linha 0-29
    74 00000082 B206                    	mov     	dl,6			;coluna 0-79
    75 00000084 C606[0000]0E            	mov		byte[cor], amarelo
    76                                  	l_w_fir2:
    77 00000089 E87506                  		call	cursor
    78 0000008C 8A87[2F00]              		mov     al,[bx+fir2_str]
    79 00000090 E88506                  		call	caracter
    80 00000093 43                      		inc     bx			;proximo caracter
    81 00000094 FEC2                    		inc		dl			;avanca a coluna
    82 00000096 E2F1                    		loop    l_w_fir2
    83                                  
    84                                  	; escreve FIR_1
    85 00000098 B90500                  	mov     	cx,5			;n�mero de caracteres
    86 0000009B BB0000                  	mov     	bx,0
    87 0000009E B60C                    	mov     	dh,12			;linha 0-29
    88 000000A0 B206                    	mov     	dl,6			;coluna 0-79
    89 000000A2 C606[0000]0D            	mov		byte[cor], magenta_claro
    90                                  	l_w_fir1:
    91 000000A7 E85706                  		call	cursor
    92 000000AA 8A87[2A00]              		mov     al,[bx+fir1_str]
    93 000000AE E86706                  		call	caracter
    94 000000B1 43                      		inc     bx			;proximo caracter
    95 000000B2 FEC2                    		inc		dl			;avanca a coluna
    96 000000B4 E2F1                    		loop    l_w_fir1
    97                                  
    98                                  	; escreve setas 1
    99 000000B6 B90500                  	mov     	cx,5			;n�mero de caracteres
   100 000000B9 BB0000                  	mov     	bx,0
   101 000000BC B606                    	mov     	dh,6			;linha 0-29
   102 000000BE B206                    	mov     	dl,6			;coluna 0-79
   103 000000C0 C606[0000]0F            	mov		byte[cor], branco_intenso
   104 000000C5 E85101                  	call l_w_seta
   105                                  
   106                                  	; escreve setas 2
   107 000000C8 B90500                  	mov     	cx,5			;n�mero de caracteres
   108 000000CB BB0000                  	mov     	bx,0
   109 000000CE B608                    	mov     	dh,8			;linha 0-29
   110 000000D0 B206                    	mov     	dl,6			;coluna 0-79
   111 000000D2 C606[0000]0F            	mov		byte[cor], branco_intenso
   112 000000D7 E83F01                  	call l_w_seta
   113                                  
   114                                  	; escreve abrir
   115 000000DA B90500                  	mov     	cx,5			;n�mero de caracteres
   116 000000DD BB0000                  	mov     	bx,0
   117 000000E0 B602                    	mov     	dh,2			;linha 0-29
   118 000000E2 B206                    	mov     	dl,6			;coluna 0-79
   119 000000E4 C606[0000]02            	mov		byte[cor], verde
   120                                  	l_w_abrir:
   121 000000E9 E81506                  		call	cursor
   122 000000EC 8A87[2500]              		mov     al,[bx+abrir_str]
   123 000000F0 E82506                  		call	caracter
   124 000000F3 43                      		inc     bx			;proximo caracter
   125 000000F4 FEC2                    		inc		dl			;avanca a coluna
   126 000000F6 E2F1                    		loop    l_w_abrir
   127                                  
   128                                  
   129                                  	; bordas externas
   130 000000F8 C606[0000]0F            	mov		byte[cor], branco_intenso
   131 000000FD B80000                  	mov		ax,0
   132 00000100 50                      	push		ax
   133 00000101 B80000                  	mov		ax,0
   134 00000104 50                      	push		ax
   135 00000105 B80000                  	mov		ax,0
   136 00000108 50                      	push		ax
   137 00000109 B8DF01                  	mov		ax,479
   138 0000010C 50                      	push		ax
   139 0000010D E8E807                  	call		line
   140                                  
   141 00000110 C606[0000]0F            	mov		byte[cor], branco_intenso
   142 00000115 B80000                  	mov		ax,0
   143 00000118 50                      	push		ax
   144 00000119 B80000                  	mov		ax,0
   145 0000011C 50                      	push		ax
   146 0000011D B87F02                  	mov		ax,639
   147 00000120 50                      	push		ax
   148 00000121 B80000                  	mov		ax,0
   149 00000124 50                      	push		ax
   150 00000125 E8D007                  	call		line
   151                                  
   152 00000128 C606[0000]0F            	mov		byte[cor], branco_intenso
   153 0000012D B87F02                  	mov		ax,639
   154 00000130 50                      	push		ax
   155 00000131 B80000                  	mov		ax,0
   156 00000134 50                      	push		ax
   157 00000135 B87F02                  	mov		ax,639
   158 00000138 50                      	push		ax
   159 00000139 B8DF01                  	mov		ax,479
   160 0000013C 50                      	push		ax
   161 0000013D E8B807                  	call		line
   162                                  
   163 00000140 C606[0000]0F            	mov		byte[cor], branco_intenso
   164 00000145 B80000                  	mov		ax,0
   165 00000148 50                      	push		ax
   166 00000149 B8DF01                  	mov		ax,479
   167 0000014C 50                      	push		ax
   168 0000014D B87F02                  	mov		ax,639
   169 00000150 50                      	push		ax
   170 00000151 B8DF01                  	mov		ax,479
   171 00000154 50                      	push		ax
   172 00000155 E8A007                  	call		line
   173                                  
   174                                  	; bordas internas centrais
   175 00000158 C606[0000]0F            	mov		byte[cor], branco_intenso
   176 0000015D B88A00                  	mov		ax,138
   177 00000160 50                      	push		ax
   178 00000161 B80000                  	mov		ax,0
   179 00000164 50                      	push		ax
   180 00000165 B88A00                  	mov		ax,138
   181 00000168 50                      	push		ax
   182 00000169 B8DF01                  	mov		ax,479
   183 0000016C 50                      	push		ax
   184 0000016D E88807                  	call		line
   185                                  
   186 00000170 C606[0000]0F            	mov		byte[cor], branco_intenso
   187 00000175 B88B00                  	mov		ax,139
   188 00000178 50                      	push		ax
   189 00000179 B81300                  	mov		ax,19
   190 0000017C 50                      	push		ax
   191 0000017D B87F02                  	mov		ax,639
   192 00000180 50                      	push		ax
   193 00000181 B81300                  	mov		ax,19
   194 00000184 50                      	push		ax
   195 00000185 E87007                  	call		line
   196                                  
   197 00000188 C606[0000]0F            	mov		byte[cor], branco_intenso
   198 0000018D B88B00                  	mov		ax,139
   199 00000190 50                      	push		ax
   200 00000191 B8F900                  	mov		ax,249
   201 00000194 50                      	push		ax
   202 00000195 B87F02                  	mov		ax,639
   203 00000198 50                      	push		ax
   204 00000199 B8F900                  	mov		ax,249
   205 0000019C 50                      	push		ax
   206 0000019D E85807                  	call		line
   207                                  
   208                                  	; bordas internas menu
   209 000001A0 C606[0000]0F            	mov		byte[cor], branco_intenso
   210 000001A5 B80000                  	mov		ax,0
   211 000001A8 50                      	push		ax
   212 000001A9 B84F00                  	mov		ax,79
   213 000001AC 50                      	push		ax
   214 000001AD B88A00                  	mov		ax,138
   215 000001B0 50                      	push		ax
   216 000001B1 B84F00                  	mov		ax,79
   217 000001B4 50                      	push		ax
   218 000001B5 E84007                  	call		line
   219                                  
   220 000001B8 C606[0000]0F            	mov		byte[cor], branco_intenso
   221 000001BD B80000                  	mov		ax,0
   222 000001C0 50                      	push		ax
   223 000001C1 B89F00                  	mov		ax,159
   224 000001C4 50                      	push		ax
   225 000001C5 B88A00                  	mov		ax,138
   226 000001C8 50                      	push		ax
   227 000001C9 B89F00                  	mov		ax,159
   228 000001CC 50                      	push		ax
   229 000001CD E82807                  	call		line
   230                                  
   231 000001D0 C606[0000]0F            	mov		byte[cor], branco_intenso
   232 000001D5 B80000                  	mov		ax,0
   233 000001D8 50                      	push		ax
   234 000001D9 B8EF00                  	mov		ax,239
   235 000001DC 50                      	push		ax
   236 000001DD B88A00                  	mov		ax,138
   237 000001E0 50                      	push		ax
   238 000001E1 B8EF00                  	mov		ax,239
   239 000001E4 50                      	push		ax
   240 000001E5 E81007                  	call		line
   241                                  
   242 000001E8 C606[0000]0F            	mov		byte[cor], branco_intenso
   243 000001ED B80000                  	mov		ax,0
   244 000001F0 50                      	push		ax
   245 000001F1 B83F01                  	mov		ax,319
   246 000001F4 50                      	push		ax
   247 000001F5 B88A00                  	mov		ax,138
   248 000001F8 50                      	push		ax
   249 000001F9 B83F01                  	mov		ax,319
   250 000001FC 50                      	push		ax
   251 000001FD E8F806                  	call		line
   252                                  
   253 00000200 C606[0000]0F            	mov		byte[cor], branco_intenso
   254 00000205 B80000                  	mov		ax,0
   255 00000208 50                      	push		ax
   256 00000209 B88F01                  	mov		ax,399
   257 0000020C 50                      	push		ax
   258 0000020D B88A00                  	mov		ax,138
   259 00000210 50                      	push		ax
   260 00000211 B88F01                  	mov		ax,399
   261 00000214 50                      	push		ax
   262 00000215 E8E006                  	call		line
   263 00000218 C3                      	ret
   264                                  
   265                                  l_w_seta:
   266 00000219 E8E504                  	call	cursor
   267 0000021C 8A87[3D00]              	mov     al, [bx+seta_str]
   268 00000220 E8F504                  	call	caracter
   269 00000223 43                      	inc     bx			;proximo caracter
   270 00000224 FEC2                    	inc		dl			;avanca a coluna
   271 00000226 E2F1                    	loop    l_w_seta
   272 00000228 C3                      	ret
   273                                  
   274                                  limpar_areas:
   275 00000229 E80400                  	call limpar_area1
   276 0000022C E83A00                  	call limpar_area2
   277 0000022F C3                      	ret
   278                                  
   279                                  limpar_area1:
   280 00000230 50                      	push ax
   281 00000231 53                      	push bx
   282 00000232 51                      	push cx
   283 00000233 C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   284 00000239 C606[0000]00            	mov	byte[cor],preto
   285                                  		loop_limpar_area1:
   286 0000023E 8B1E[6200]              			mov bx, word[contador]
   287 00000242 81FBE400                			cmp bx, 228
   288 00000246 745A                    			je volta_limpa
   289                                  		
   290                                  			;x1 ->  139
   291 00000248 B88B00                  			mov		ax, 139   ;->x1
   292 0000024B 50                      			push	ax
   293                                  		
   294                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   295 0000024C 31C9                    			xor cx, cx
   296 0000024E B9DE01                  			mov cx, 478
   297 00000251 29D9                    			sub cx, bx
   298 00000253 89C8                    			mov	ax, cx     ;->y1
   299 00000255 50                      			push ax
   300                                  		
   301                                  			;x2 = 638
   302 00000256 31C0                    			xor ax, ax
   303 00000258 057E02                  			add ax, 638
   304 0000025B 50                      			push ax
   305                                  		
   306                                  			;y2 = y1
   307 0000025C 89C8                    			mov	ax, cx     ;->y2=y1
   308 0000025E 50                      			push ax
   309 0000025F E89606                  			call line
   310                                  		
   311 00000262 FF06[6200]              			inc word[contador]
   312 00000266 E9D5FF                  			jmp loop_limpar_area1
   313                                  
   314                                  limpar_area2:
   315 00000269 50                      	push ax
   316 0000026A 53                      	push bx
   317 0000026B 51                      	push cx
   318 0000026C C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   319 00000272 C606[0000]00            	mov	byte[cor],preto
   320                                  		loop_limpar_area2:
   321 00000277 8B1E[6200]              			mov bx, word[contador]
   322 0000027B 81FBE400                			cmp bx, 228
   323 0000027F 7421                    			je volta_limpa
   324                                  		
   325                                  			;x1 ->  139
   326 00000281 B88B00                  			mov		ax, 139   ;->x1
   327 00000284 50                      			push	ax
   328                                  		
   329                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   330 00000285 31C9                    			xor cx, cx
   331 00000287 B9F800                  			mov cx, 248
   332 0000028A 29D9                    			sub cx, bx
   333 0000028C 89C8                    			mov	ax, cx     ;->y1
   334 0000028E 50                      			push ax
   335                                  		
   336                                  			;x2 = 638
   337 0000028F 31C0                    			xor ax, ax
   338 00000291 057E02                  			add ax, 638
   339 00000294 50                      			push ax
   340                                  		
   341                                  			;y2 = y1
   342 00000295 89C8                    			mov	ax, cx     ;->y2=y1
   343 00000297 50                      			push ax
   344 00000298 E85D06                  			call line
   345                                  
   346 0000029B FF06[6200]              			inc word[contador]
   347 0000029F E9D5FF                  			jmp loop_limpar_area2
   348                                  
   349                                  volta_limpa:
   350 000002A2 59                      	pop cx
   351 000002A3 5B                      	pop bx
   352 000002A4 58                      	pop ax
   353 000002A5 C3                      	ret
   354                                  
   355                                  espera_mouse:
   356                                  		;mostrando mouse na tela
   357 000002A6 B80100                  		mov ax, 01h
   358 000002A9 CD33                    		int 33h
   359                                  		
   360                                  		;lendo mouse
   361 000002AB 31DB                    		xor bx, bx
   362 000002AD B80300                  		mov ax, 03h
   363 000002B0 CD33                    		int 33h
   364                                  
   365 000002B2 81FB0100                		cmp bx, 1
   366 000002B6 744F                    		je verifica
   367 000002B8 E9EBFF                  		jmp espera_mouse
   368                                  
   369                                  read_file:
   370 000002BB 803E[4E00]01            	cmp byte[aberto],1
   371 000002C0 7414                    	je fecha_arq_sinal
   372 000002C2 C606[4E00]01            	mov byte[aberto], 1
   373 000002C7 E81801                  	call open_file
   374 000002CA E83101                  	call le_numeros
   375 000002CD E8A302                  	call config_plotar_entrada
   376 000002D0 E88303                  	call plotar_vetor
   377 000002D3 E9D0FF                  	jmp espera_mouse
   378                                  
   379                                  fecha_arq_sinal:
   380 000002D6 E81C01                  	call close_file
   381 000002D9 C706[4E00]0000          	mov word [aberto], 0
   382 000002DF E84EFF                  	call limpar_area1
   383 000002E2 E8D6FF                  	call read_file
   384                                  
   385                                  load_data:
   386 000002E5 803E[4E00]00            	cmp byte[aberto],0
   387 000002EA 74CF                    	je read_file
   388 000002EC E80F01                  	call le_numeros
   389 000002EF E83EFF                  	call limpar_area1
   390 000002F2 E87E02                  	call config_plotar_entrada
   391 000002F5 E85E03                  	call plotar_vetor
   392 000002F8 E9ABFF                  	jmp espera_mouse
   393                                  
   394                                  exit:
   395 000002FB B400                    	mov  	ah,0   					; set video mode
   396 000002FD A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   397 00000300 CD10                    	int  	10h
   398 00000302 B8004C                  	mov     ax,4C00H
   399 00000305 CD21                    	int     21h
   400                                  
   401                                  verifica:
   402                                  	;cx -> posicao horizontal do mouse
   403                                  	;dx -> posicao vertical do mouse	(INVERTIDO)
   404 00000307 81F98C00                	cmp cx, 140
   405 0000030B 7D99                    	jnl espera_mouse ;se o click ocorrer fora da barra de funcoes, nao faz nada e volta a esperar o mouse
   406 0000030D 81FA5000                	cmp dx, 80
   407 00000311 7CA8                    	jl read_file	;abrir     	   dx < 80
   408 00000313 81FAA000                	cmp dx, 160
   409 00000317 7CCC                    	jl load_data	;load  	080 <= dx < 160
   410 00000319 81FAF000                	cmp dx, 240
   411 0000031D 7C15                    	jl run_fir1		;FIR3  	160 <= dx < 240
   412 0000031F 81FA4001                	cmp dx, 320
   413 00000323 7C49                    	jl run_fir2		;FIR2  	240 <= dx < 320
   414 00000325 81FA9001                	cmp dx, 400
   415 00000329 7C7D                    	jl run_fir3		;FIR1  	320 <= dx < 400
   416 0000032B 81FAE001                	cmp dx, 480
   417 0000032F 7CCA                    	jl exit			;sair  	   dx > 400
   418 00000331 E972FF                  	jmp espera_mouse
   419                                  
   420                                  run_fir1:
   421 00000334 C706[6200]0000          	mov word[contador], 0
   422                                  	loop_copy_f1:
   423 0000033A 8B1E[6200]              		mov bx, word[contador]
   424 0000033E 8A8F[240C]              		mov cl, byte[filtro1 + bx]
   425 00000342 888F[480C]              		mov byte[f_select + bx], cl
   426 00000346 FF06[6200]              		inc word[contador]
   427 0000034A 8B1E[6200]              		mov bx, word[contador]
   428 0000034E 3A1E[230C]              		cmp bl, byte[filtros_len]
   429 00000352 7CE6                    		jl loop_copy_f1
   430 00000354 8A1E[2F0C]              	mov bl, byte[filtro1_div]
   431 00000358 881E[530C]              	mov byte[f_select_div], bl
   432 0000035C E80B01                  	call aplicar_filtro
   433 0000035F E8BB01                  	call ajustar_vout
   434 00000362 E804FF                  	call limpar_area2
   435 00000365 E83602                  	call config_plotar_saida
   436 00000368 E8EB02                  	call plotar_vetor
   437 0000036B E938FF                  	jmp espera_mouse
   438                                  
   439                                  run_fir2:
   440 0000036E C706[6200]0000          	mov word[contador], 0
   441                                  	loop_copy_f2:
   442 00000374 8B1E[6200]              		mov bx, word[contador]
   443 00000378 8A8F[300C]              		mov cl, byte[filtro2 + bx]
   444 0000037C 888F[480C]              		mov byte[f_select + bx], cl
   445 00000380 FF06[6200]              		inc word[contador]
   446 00000384 8B1E[6200]              		mov bx, word[contador]
   447 00000388 3A1E[230C]              		cmp bl, byte[filtros_len]
   448 0000038C 7CE6                    		jl loop_copy_f2
   449 0000038E 8A1E[3B0C]              	mov bl, byte[filtro2_div]
   450 00000392 881E[530C]              	mov byte[f_select_div], bl
   451 00000396 E8D100                  	call aplicar_filtro
   452 00000399 E88101                  	call ajustar_vout
   453 0000039C E8CAFE                  	call limpar_area2
   454 0000039F E8FC01                  	call config_plotar_saida
   455 000003A2 E8B102                  	call plotar_vetor
   456 000003A5 E9FEFE                  	jmp espera_mouse
   457                                  
   458                                  run_fir3:
   459 000003A8 C706[6200]0000          	mov word[contador], 0
   460                                  	loop_copy_f3:
   461 000003AE 8B1E[6200]              		mov bx, word[contador]
   462 000003B2 8A8F[300C]              		mov cl, byte[filtro2 + bx]
   463 000003B6 888F[480C]              		mov byte[f_select + bx], cl
   464 000003BA FF06[6200]              		inc word[contador]
   465 000003BE 8B1E[6200]              		mov bx, word[contador]
   466 000003C2 3A1E[230C]              		cmp bl, byte[filtros_len]
   467 000003C6 7CE6                    		jl loop_copy_f3
   468 000003C8 8A1E[3B0C]              	mov bl, byte[filtro2_div]
   469 000003CC 881E[530C]              	mov byte[f_select_div], bl
   470 000003D0 E89700                  	call aplicar_filtro
   471 000003D3 E84701                  	call ajustar_vout
   472 000003D6 E890FE                  	call limpar_area2
   473 000003D9 E8C201                  	call config_plotar_saida
   474 000003DC E87702                  	call plotar_vetor
   475 000003DF E9C4FE                  	jmp espera_mouse
   476                                  
   477                                  open_file:
   478 000003E2 C706[4F00]0000          	mov word[qtd_lida], 0  	; reseta a quantidade lida
   479 000003E8 BA[4200]                	mov dx, filename 		; coloca o endere�o do nome do arquivo em dx (make a pointer to the filename)
   480 000003EB B000                    	mov al, 0        		; modo escrita e leitura (0 - for reading. 1 - for writing. 2 - both)
   481 000003ED B43D                    	mov ah, 3Dh      		; 3Dh of DOS Services opens a file
   482 000003EF CD21                    	int 21h    		 		; Call DOS (interruption 21h)
   483 000003F1 A3[4C00]                	mov [handle], ax  		; Function 3Dh returns the file handle in AX, here we save it for later use.
   484 000003F4 C3                      	ret
   485                                  
   486                                  close_file:
   487 000003F5 8B1E[4C00]              	mov bx, [handle]
   488 000003F9 B43E                    	mov ah, 3eh
   489 000003FB CD21                    	int 21h ; close file...
   490 000003FD C3                      	ret
   491                                  
   492                                  le_numeros:
   493 000003FE C706[6200]0000          	mov word[contador], 0
   494                                  	loop_le_numeros:
   495                                  		;DOS Service Function number 3FH reads from a file.
   496 00000404 B43F                    		mov ah, 3FH
   497 00000406 B91000                  		mov cx, 16         	; I will assume "sinal.txt" has at least 16 bytes in it (ex:-5.6200000e+02  ).
   498 00000409 BA[5100]                		mov dx, buffer   	; DOS Functions like DX having pointers for some reason.
   499 0000040C 8B1E[4C00]              		mov bx, [handle]  	; BX needs the file handle.
   500 00000410 CD21                    		int 21h           	; call DOS
   501                                  
   502                                  		; verifica se o final do arquivo foi encontrado 
   503 00000412 39C8                    		cmp ax, cx ;EOF reached?
   504 00000414 752E                    		jne EOF
   505                                  
   506 00000416 FF06[4F00]              		inc word[qtd_lida]
   507                                  
   508                                  		; Here we will put a $ after 4 bytes in the buffer
   509 0000041A BA[5100]                		mov dx, buffer
   510 0000041D 01C2                    		add dx,ax
   511 0000041F 89D3                    		mov bx,dx
   512 00000421 C60724                  		mov byte [bx], '$'
   513                                  
   514 00000424 E83800                  		call get_sinal_and_convert
   515                                  
   516 00000427 FF06[6200]              		inc word[contador]
   517 0000042B 8B1E[6700]              		mov bx, word[qtd_pixels]
   518                                  
   519                                  		; verifica se os 500 números já foram lidos
   520 0000042F 391E[6200]              		cmp word[contador], bx
   521 00000433 75CF                    		jne loop_le_numeros
   522 00000435 7400                    		je  volta_le_numeros
   523                                  
   524                                  volta_le_numeros:
   525 00000437 E80100                  	call imprime_qtd_lida
   526 0000043A C3                      	ret
   527                                  
   528                                  imprime_qtd_lida:
   529 0000043B 50                      	push ax
   530 0000043C A1[4F00]                	mov ax, word[qtd_lida]
   531 0000043F E86102                  	call print_dw_number
   532 00000442 58                      	pop ax
   533 00000443 C3                      	ret
   534                                  
   535                                  EOF:
   536 00000444 E974FE                  	jmp read_file	;	COMEÇA A LEITURA DO ARQUIVO DESDE O INÍCIO
   537                                  
   538                                  sinal_negativo:
   539 00000447 8B1E[6200]              	mov bx, word[contador]
   540 0000044B C687[5D02]01            	mov byte[v_in_sn+bx], 1
   541 00000450 E97601                  	jmp converte_str
   542                                  
   543                                  sinal_positivo:
   544 00000453 8B1E[6200]              	mov bx, word[contador]
   545 00000457 C687[5D02]00            	mov byte[v_in_sn+bx], 0
   546 0000045C E96A01                  	jmp converte_str
   547                                  
   548                                  get_sinal_and_convert:
   549 0000045F 30E4                    	xor 	ah, ah                ; limpa ah
   550 00000461 A0[5100]                	mov 	al, byte[buffer] 	  ; pega o primeiro valor do buffer, que indica o sinal (+ ou -)
   551 00000464 3C2D                    	cmp  	al, 45				  ; compara com (-) em ASCII
   552 00000466 74DF                    	je sinal_negativo
   553 00000468 75E9                    	jne sinal_positivo
   554                                  
   555                                  ;	f1[qtd_pixels] * f1[filtros_len]
   556                                  aplicar_filtro:
   557 0000046A C706[6200]0000          	mov word[contador], 0
   558                                  	l1_aplicar_filtro:
   559 00000470 8B1E[6200]              		mov bx, word[contador]
   560 00000474 C787[5104]0000          		mov word[v_out_mod + bx], 0
   561 0000047A B80000                  		mov ax,  0					;	set x_start
   562 0000047D 8B1E[230C]              		mov bx, word[filtros_len]
   563 00000481 F7DB                    		neg bx
   564 00000483 031E[6200]              		add bx, word[contador]
   565 00000487 81C30100                		add bx, 1
   566 0000048B E88800                  		call max_ax_bx 
   567 0000048E 890E[540C]              		mov word[x_start], cx
   568 00000492 A1[6200]                		mov ax, [contador]			;	set x_end
   569 00000495 050100                  		add ax, 1
   570 00000498 8B1E[6700]              		mov bx, [qtd_pixels]
   571 0000049C E87000                  		call min_ax_bx
   572 0000049F 890E[560C]              		mov word[x_end], cx
   573 000004A3 A1[6200]                		mov ax, word[contador]		;	set h_start
   574 000004A6 8B1E[230C]              		mov bx, [filtros_len]
   575 000004AA 81EB0100                		sub bx, 1
   576 000004AE E85E00                  		call min_ax_bx
   577 000004B1 890E[580C]              		mov[h_start], cx
   578                                  
   579 000004B5 A1[540C]                		mov ax, word[x_start]		; 	inicio loop_2
   580 000004B8 A3[6400]                		mov word[contador2], ax
   581                                  		l2_aplicar_filtro:
   582 000004BB E81F00                  			call conv_vin_filtro
   583 000004BE FF06[6400]              			inc word[contador2]			;	fim l2_aplicar_filtro
   584 000004C2 8B1E[560C]              			mov bx, word[x_end]
   585 000004C6 391E[6400]              			cmp word[contador2], bx
   586 000004CA 7CEF                    			jl l2_aplicar_filtro
   587 000004CC FF06[6200]              		inc word[contador]				;	fim l1_aplicar_filtro
   588 000004D0 8B1E[6700]              		mov bx, word[qtd_pixels]
   589 000004D4 391E[6200]              		cmp word[contador], bx
   590 000004D8 7C96                    		jl l1_aplicar_filtro
   591 000004DA 7400                    		je volta_aplicar_filtro
   592                                  
   593                                  volta_aplicar_filtro:
   594 000004DC C3                      	ret
   595                                  
   596                                  conv_vin_filtro:
   597 000004DD 8B1E[580C]              	mov bx, word[h_start]
   598 000004E1 8B87[480C]              	mov ax, [f_select + bx]
   599 000004E5 8B1E[6400]              	mov bx, word[contador2]
   600 000004E9 8B8F[6900]              	mov cx, [v_in_mod + bx]
   601 000004ED E80E00                  	call aplicar_sn_cx			; aplicar o sinal [v_in_sn + bx] a cx
   602 000004F0 F7E9                    	imul cx
   603 000004F2 0187[5104]              	add word[v_out_mod + bx], ax
   604 000004F6 FF0E[580C]              	dec word[h_start]			; decrementa h_start
   605 000004FA C3                      	ret
   606                                  
   607                                  neg_cx:
   608 000004FB F7D9                    	neg cx
   609 000004FD C3                      	ret
   610                                  
   611                                  aplicar_sn_cx:
   612 000004FE 8B97[5D02]              	mov dx, [v_in_sn + bx]
   613 00000502 81FA0000                	cmp dx, 0
   614 00000506 75F3                    	jne neg_cx
   615 00000508 C3                      	ret
   616                                  
   617                                  set_cx_ax:
   618 00000509 89C1                    	mov cx, ax
   619 0000050B C3                      	ret
   620                                  
   621                                  set_cx_bx:
   622 0000050C 89D9                    	mov cx, bx
   623 0000050E C3                      	ret
   624                                  
   625                                  min_ax_bx:			; MIN(AX, BX) -> CX
   626 0000050F 39D8                    	cmp ax, bx
   627 00000511 7CF6                    	jl set_cx_ax
   628 00000513 E9F6FF                  	jmp set_cx_bx
   629                                  
   630                                  max_ax_bx:			; MAX(AX, BX) -> CX
   631 00000516 39D8                    	cmp ax, bx
   632 00000518 7FEF                    	jg set_cx_ax
   633 0000051A E9EFFF                  	jmp set_cx_bx
   634                                  
   635                                  ajustar_vout:
   636 0000051D C706[6200]0000          	mov word[contador], 0
   637                                  	loop_as_vout:
   638 00000523 8B1E[6200]              		mov bx, word[contador]
   639 00000527 E82400                  		call set_sn_vout
   640 0000052A E83000                  		call set_mod_vout
   641                                  		; fim loop_as_vout
   642 0000052D FF06[6200]              		inc word[contador]
   643 00000531 8B1E[6700]              		mov bx, word[qtd_pixels]
   644 00000535 391E[6200]              		cmp word[contador], bx
   645 00000539 7CE8                    		jl loop_as_vout
   646 0000053B 7400                    		je ret_ajustar_vout
   647                                  ret_ajustar_vout:
   648 0000053D C3                      	ret
   649                                  
   650                                  corrige_sn_vout_neg:
   651 0000053E C687[4506]01            	mov byte[v_out_sn + bx], 1
   652 00000543 8A8F[5104]              	mov cl, byte[v_out_mod + bx]
   653 00000547 F6D9                    	neg cl
   654 00000549 888F[5104]              	mov byte[v_out_mod + bx], cl
   655 0000054D C3                      	ret
   656                                  
   657                                  set_sn_vout:
   658 0000054E 80BF[5104]00            	cmp byte[v_out_mod + bx], 0
   659 00000553 7CE9                    	jl corrige_sn_vout_neg
   660 00000555 7D00                    	jnl set_sn_vout_pos
   661                                  
   662                                  set_sn_vout_pos:
   663 00000557 C687[4506]00            	mov byte[v_out_sn + bx], 0
   664 0000055C C3                      	ret
   665                                  
   666                                  set_mod_vout:
   667 0000055D 30E4                    	xor ah, ah
   668 0000055F 30ED                    	xor ch, ch
   669 00000561 8A87[5104]              	mov al, byte[v_out_mod + bx]
   670 00000565 8A0E[530C]              	mov	cl, byte[f_select_div]
   671 00000569 BA0000                  	mov dx, 0
   672 0000056C F6F1                    	div cl
   673 0000056E 8887[5104]              	mov byte[v_out_mod + bx], al
   674 00000572 C3                      	ret
   675                                  
   676                                  config_plotar_entrada:
   677                                  	;	Configurações para  a função plotar
   678 00000573 C706[6200]0000          	mov word[contador], 0
   679                                  	loop_config1:
   680 00000579 8B1E[6200]              		mov bx, word[contador]
   681 0000057D 8A87[6900]              		mov al, byte[v_in_mod + bx]
   682 00000581 8887[3908]              		mov byte[v_select_mod + bx], al
   683 00000585 8A87[5D02]              		mov al, byte[v_in_sn + bx]
   684 00000589 8887[2D0A]              		mov byte[v_select_sn + bx], al
   685 0000058D FF06[6200]              		inc word[contador]
   686 00000591 3B1E[6700]              		cmp bx, word[qtd_pixels]
   687 00000595 7CE2                    		jl loop_config1
   688 00000597 C706[210C]6C01          	mov word[ponto_central], 364
   689 0000059D C3                      	ret
   690                                  
   691                                  config_plotar_saida:
   692 0000059E C706[6200]0000          	mov word[contador], 0
   693                                  	loop_config2:
   694 000005A4 8B1E[6200]              		mov bx, word[contador]
   695 000005A8 8A87[5104]              		mov al, byte[v_out_mod + bx]
   696 000005AC 8887[3908]              		mov byte[v_select_mod + bx], al
   697 000005B0 8A87[4506]              		mov al, byte[v_out_sn + bx]
   698 000005B4 8887[2D0A]              		mov byte[v_select_sn + bx], al
   699 000005B8 FF06[6200]              		inc word[contador]
   700 000005BC 3B1E[6700]              		cmp bx, word[qtd_pixels]
   701 000005C0 7CE2                    		jl loop_config2
   702 000005C2 C706[210C]8500          	mov word[ponto_central], 133
   703 000005C8 C3                      	ret
   704                                  
   705                                  converte_str:
   706 000005C9 C606[5100]30            	mov byte[buffer], 30h
   707 000005CE A0[5E00]                	mov al, byte[buffer + 13] ; anda 12 no vetor para ver o indice da potencia
   708 000005D1 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   709                                  	
   710                                  	;caso e02
   711 000005D3 3C02                    	cmp al, 2
   712 000005D5 7416                    	je calc_cem
   713                                  	
   714                                  	;caso e01
   715 000005D7 3C01                    	cmp al, 1
   716 000005D9 7450                    	je calc_dez
   717                                  	
   718                                  	;caso e00
   719 000005DB 30E4                    	xor ah,ah                 		; limpa ah
   720 000005DD A0[5100]                	mov al, byte[buffer]
   721 000005E0 2C30                    	sub al, 30h               		; subtrai 30h do ASCII para saber o valor em decimal
   722                                  	
   723 000005E2 8B1E[6200]              	mov bx, word[contador]     		; pegamos o contador para incrementar na posicao do v_in_mod
   724 000005E6 0087[6900]              	add byte[v_in_mod+bx], al    ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   725 000005EA E96800                  	jmp cvt_retorna
   726                                  
   727                                  calc_cem:
   728                                  	;lembrar de push e pop antes de multiplicar
   729 000005ED 50                      	push ax
   730 000005EE 52                      	push dx
   731                                  	
   732 000005EF 30E4                    	xor ah,ah                 ; limpa ah
   733 000005F1 A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   734 000005F4 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   735 000005F6 B96400                  	mov  cx, 100              ; cx = 100
   736 000005F9 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   737                                  	
   738 000005FB 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao da v_in_mod
   739 000005FF 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" na "v_in_mod[]"
   740                                  
   741 00000603 30E4                    	xor ah,ah                 ; limpa ah
   742 00000605 A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   743 00000608 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   744 0000060A B90A00                  	mov  cx, 10               ; cx = 10
   745 0000060D F7E1                    	mul  cx                   ; dx:ax = ax * cx
   746                                  	
   747 0000060F 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   748 00000613 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   749                                  	
   750 00000617 30E4                    	xor ah,ah                 ; limpa ah
   751 00000619 A0[5500]                	mov al, byte[buffer+4]    ; al = ? (terceiro numero)
   752 0000061C 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   753                                  	
   754 0000061E 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   755 00000622 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   756                                  
   757 00000626 5A                      	pop dx                 ; volta aos valores originais
   758 00000627 58                      	pop ax                 ; volta aos valores originais
   759 00000628 E92A00                  	jmp cvt_retorna
   760                                  	
   761                                  	
   762                                  calc_dez:
   763                                  	;lembrar de push e pop antes de multiplicar
   764 0000062B 50                      	push ax
   765 0000062C 52                      	push dx
   766                                  	
   767 0000062D 30E4                    	xor ah,ah                 ; limpa ah
   768 0000062F A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   769 00000632 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   770 00000634 B90A00                  	mov  cx, 10               ; cx = 10
   771 00000637 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   772                                  	
   773 00000639 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   774 0000063D 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   775                                  
   776 00000641 30E4                    	xor ah,ah                 ; limpa ah
   777 00000643 A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   778 00000646 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   779                                  	
   780 00000648 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   781 0000064C 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   782                                  	
   783 00000650 5A                      	pop dx                    ; volta aos valores originais
   784 00000651 58                      	pop ax                    ; volta aos valores originais
   785 00000652 E90000                  	jmp cvt_retorna
   786                                  
   787                                  cvt_retorna:
   788 00000655 C3                      	ret
   789                                  
   790                                  plotar_vetor:
   791 00000656 8B0E[6700]              	mov cx, word[qtd_pixels]
   792 0000065A 81E90100                	sub cx, 1
   793 0000065E C706[6200]0000          	mov word[contador], 0
   794 00000664 C606[0000]0F            	mov	byte[cor],branco_intenso
   795                                  
   796                                  plot_num:
   797 00000669 A1[6200]                	mov		ax, word[contador]
   798 0000066C 058C00                  	add		ax, 140
   799 0000066F 50                      	push	ax
   800 00000670 E80F00                  	call ajuste_ax
   801 00000673 50                      	push	ax
   802 00000674 B80100                  	mov ax, 1
   803 00000677 50                      	push	ax
   804 00000678 E8C001                  	call	full_circle
   805 0000067B FF06[6200]              	inc word[contador]
   806 0000067F E2E8                    	loop plot_num
   807 00000681 C3                      	ret
   808                                  
   809                                  ajuste_ax:
   810 00000682 8B1E[6200]              	mov bx, word[contador]
   811 00000686 B80000                  	mov ax, 0
   812 00000689 8A87[2D0A]              	mov al, byte[v_select_sn + bx]
   813 0000068D 3C00                    	cmp al, 0
   814 0000068F 7402                    	je set_ax_positivo
   815 00000691 7508                    	jne set_ax_negativo
   816                                  
   817                                  set_ax_positivo:
   818 00000693 A1[210C]                	mov ax, word[ponto_central]
   819 00000696 0287[3908]              	add al, byte[v_select_mod + bx]
   820 0000069A C3                      	ret
   821                                  
   822                                  set_ax_negativo:
   823 0000069B A1[210C]                	mov ax, word[ponto_central]
   824 0000069E 2A87[3908]              	sub al, byte[v_select_mod + bx]
   825 000006A2 C3                      	ret
   826                                  
   827                                  ;	imprime, em decimal, o valor númerico de AX 
   828                                  print_dw_number:
   829                                      ;initialize count
   830 000006A3 53                      	push bx
   831 000006A4 51                      	push cx
   832 000006A5 52                      	push dx
   833                                  
   834 000006A6 C706[6200]0000          	mov word[contador], 0
   835 000006AC B90000                      mov cx,0
   836 000006AF BA0000                      mov dx,0
   837                                      loop_print_dw_number:
   838 000006B2 3D0000                          cmp ax,0
   839 000006B5 740C                            je print1     	; if ax is zero
   840 000006B7 BB0A00                          mov bx,10     	; initialize bx to 10  
   841 000006BA F7F3                            div bx    		; extract the last digit             
   842 000006BC 52                              push dx    		; push it in the stack         
   843 000006BD 41                              inc cx   		; increment the count          
   844 000006BE 31D2                            xor dx,dx		; set dx to 0
   845 000006C0 E9EFFF                          jmp loop_print_dw_number
   846                                      print1:
   847 000006C3 81F90000                        cmp cx,0
   848 000006C7 7434                            je volta_print	; if cx is zero
   849 000006C9 5A                              pop dx			; pop the top of stack
   850                                  
   851                                          ;add 48 so that it
   852                                          ;represents the ASCII
   853                                          ;value of digits
   854 000006CA 81C23000                        add dx, 48
   855                                  
   856                                  		; 	imprime DX
   857 000006CE 50                      		push ax
   858 000006CF 53                      		push bx
   859 000006D0 51                      		push cx
   860 000006D1 89D0                    		mov ax, dx
   861 000006D3 52                      		push dx
   862                                  
   863 000006D4 B607                    		mov     	dh, 7			;linha 0-29
   864 000006D6 B206                    		mov     	dl, 6			;coluna 0-79
   865 000006D8 C606[0000]0F            		mov			byte[cor], branco_intenso
   866 000006DD 0216[6200]              		add			dl, byte[contador]
   867                                  
   868 000006E1 E81D00                  		call	cursor
   869 000006E4 E83100                  		call	caracter
   870 000006E7 FEC2                    		inc		dl
   871 000006E9 E81500                  		call	cursor
   872 000006EC 88E0                    		mov     al, ah
   873 000006EE E82700                  		call	caracter
   874                                  
   875 000006F1 5A                      		pop dx
   876 000006F2 59                      		pop cx
   877 000006F3 5B                      		pop bx
   878 000006F4 58                      		pop ax
   879                                  		; 	FIM imprime DX
   880                                  
   881 000006F5 FF06[6200]              		inc word[contador]
   882 000006F9 49                              dec cx			;decrease the count
   883 000006FA E9C6FF                          jmp print1
   884                                  volta_print:
   885 000006FD 5A                      	pop dx
   886 000006FE 59                      	pop cx
   887 000006FF 5B                      	pop bx
   888 00000700 C3                      	ret
   889                                  
   890                                  ;***************************************************************************
   891                                  ;
   892                                  ;   fun��o cursor
   893                                  ;
   894                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   895                                  cursor:
   896 00000701 9C                      		pushf
   897 00000702 50                      		push 		ax
   898 00000703 53                      		push 		bx
   899 00000704 51                      		push		cx
   900 00000705 52                      		push		dx
   901 00000706 56                      		push		si
   902 00000707 57                      		push		di
   903 00000708 55                      		push		bp
   904 00000709 B402                    		mov     	ah,2
   905 0000070B B700                    		mov     	bh,0
   906 0000070D CD10                    		int     	10h
   907 0000070F 5D                      		pop		bp
   908 00000710 5F                      		pop		di
   909 00000711 5E                      		pop		si
   910 00000712 5A                      		pop		dx
   911 00000713 59                      		pop		cx
   912 00000714 5B                      		pop		bx
   913 00000715 58                      		pop		ax
   914 00000716 9D                      		popf
   915 00000717 C3                      		ret
   916                                  ;_____________________________________________________________________________
   917                                  ;
   918                                  ;   fun��o caracter escrito na posi��o do cursor
   919                                  ;
   920                                  ; al= caracter a ser escrito
   921                                  ; cor definida na variavel cor
   922                                  caracter:
   923 00000718 9C                      		pushf
   924 00000719 50                      		push 		ax
   925 0000071A 53                      		push 		bx
   926 0000071B 51                      		push		cx
   927 0000071C 52                      		push		dx
   928 0000071D 56                      		push		si
   929 0000071E 57                      		push		di
   930 0000071F 55                      		push		bp
   931 00000720 B409                        	mov     	ah,9
   932 00000722 B700                        	mov     	bh,0
   933 00000724 B90100                      	mov     	cx,1
   934 00000727 8A1E[0000]                 		mov     	bl,[cor]
   935 0000072B CD10                        	int     	10h
   936 0000072D 5D                      		pop		bp
   937 0000072E 5F                      		pop		di
   938 0000072F 5E                      		pop		si
   939 00000730 5A                      		pop		dx
   940 00000731 59                      		pop		cx
   941 00000732 5B                      		pop		bx
   942 00000733 58                      		pop		ax
   943 00000734 9D                      		popf
   944 00000735 C3                      		ret
   945                                  ;_____________________________________________________________________________
   946                                  ;
   947                                  ;   fun��o plot_xy
   948                                  ;
   949                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   950                                  ; cor definida na variavel cor
   951                                  plot_xy:
   952 00000736 55                      		push		bp
   953 00000737 89E5                    		mov		bp,sp
   954 00000739 9C                      		pushf
   955 0000073A 50                      		push 		ax
   956 0000073B 53                      		push 		bx
   957 0000073C 51                      		push		cx
   958 0000073D 52                      		push		dx
   959 0000073E 56                      		push		si
   960 0000073F 57                      		push		di
   961 00000740 B40C                    	    mov     	ah,0ch
   962 00000742 A0[0000]                	    mov     	al,[cor]
   963 00000745 B700                    	    mov     	bh,0
   964 00000747 BADF01                  	    mov     	dx,479
   965 0000074A 2B5604                  		sub		dx,[bp+4]
   966 0000074D 8B4E06                  	    mov     	cx,[bp+6]
   967 00000750 CD10                    	    int     	10h
   968 00000752 5F                      		pop		di
   969 00000753 5E                      		pop		si
   970 00000754 5A                      		pop		dx
   971 00000755 59                      		pop		cx
   972 00000756 5B                      		pop		bx
   973 00000757 58                      		pop		ax
   974 00000758 9D                      		popf
   975 00000759 5D                      		pop		bp
   976 0000075A C20400                  		ret		4
   977                                  ;_____________________________________________________________________________
   978                                  ;    fun��o circle
   979                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   980                                  ; cor definida na variavel cor
   981                                  circle:
   982 0000075D 55                      	push 	bp
   983 0000075E 89E5                    	mov	 	bp,sp
   984 00000760 9C                      	pushf                        ;coloca os flags na pilha
   985 00000761 50                      	push 	ax
   986 00000762 53                      	push 	bx
   987 00000763 51                      	push	cx
   988 00000764 52                      	push	dx
   989 00000765 56                      	push	si
   990 00000766 57                      	push	di
   991                                  	
   992 00000767 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   993 0000076A 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   994 0000076D 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   995                                  	
   996 00000770 89DA                    	mov 	dx,bx	
   997 00000772 01CA                    	add		dx,cx       ;ponto extremo superior
   998 00000774 50                      	push    ax			
   999 00000775 52                      	push	dx
  1000 00000776 E8BDFF                  	call plot_xy
  1001                                  	
  1002 00000779 89DA                    	mov		dx,bx
  1003 0000077B 29CA                    	sub		dx,cx       ;ponto extremo inferior
  1004 0000077D 50                      	push    ax			
  1005 0000077E 52                      	push	dx
  1006 0000077F E8B4FF                  	call plot_xy
  1007                                  	
  1008 00000782 89C2                    	mov 	dx,ax	
  1009 00000784 01CA                    	add		dx,cx       ;ponto extremo direita
  1010 00000786 52                      	push    dx			
  1011 00000787 53                      	push	bx
  1012 00000788 E8ABFF                  	call plot_xy
  1013                                  	
  1014 0000078B 89C2                    	mov		dx,ax
  1015 0000078D 29CA                    	sub		dx,cx       ;ponto extremo esquerda
  1016 0000078F 52                      	push    dx			
  1017 00000790 53                      	push	bx
  1018 00000791 E8A2FF                  	call plot_xy
  1019                                  		
  1020 00000794 89CF                    	mov		di,cx
  1021 00000796 81EF0100                	sub		di,1	 ;di=r-1
  1022 0000079A BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1023                                  	
  1024                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1025                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1026                                  ;valores positivos para d
  1027                                  
  1028                                  stay:				;loop
  1029 0000079D 89FE                    	mov		si,di
  1030 0000079F 81FE0000                	cmp		si,0
  1031 000007A3 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1032 000007A5 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1033 000007A7 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1034 000007A9 81C60300                	add		si,3
  1035 000007AD 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1036 000007AF 42                      	inc		dx		;incrementa dx
  1037 000007B0 E90E00                  	jmp		plotar
  1038                                  inf:	
  1039 000007B3 89D6                    	mov		si,dx
  1040 000007B5 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1041 000007B7 D1E6                    	sal		si,1
  1042 000007B9 81C60500                	add		si,5
  1043 000007BD 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1044 000007BF 42                      	inc		dx		;incrementa x (dx)
  1045 000007C0 49                      	dec		cx		;decrementa y (cx)
  1046                                  	
  1047                                  plotar:	
  1048 000007C1 89D6                    	mov		si,dx
  1049 000007C3 01C6                    	add		si,ax
  1050 000007C5 56                      	push    si			;coloca a abcisa x+xc na pilha
  1051 000007C6 89CE                    	mov		si,cx
  1052 000007C8 01DE                    	add		si,bx
  1053 000007CA 56                      	push    si			;coloca a ordenada y+yc na pilha
  1054 000007CB E868FF                  	call plot_xy		;toma conta do segundo octante
  1055 000007CE 89C6                    	mov		si,ax
  1056 000007D0 01D6                    	add		si,dx
  1057 000007D2 56                      	push    si			;coloca a abcisa xc+x na pilha
  1058 000007D3 89DE                    	mov		si,bx
  1059 000007D5 29CE                    	sub		si,cx
  1060 000007D7 56                      	push    si			;coloca a ordenada yc-y na pilha
  1061 000007D8 E85BFF                  	call plot_xy		;toma conta do s�timo octante
  1062 000007DB 89C6                    	mov		si,ax
  1063 000007DD 01CE                    	add		si,cx
  1064 000007DF 56                      	push    si			;coloca a abcisa xc+y na pilha
  1065 000007E0 89DE                    	mov		si,bx
  1066 000007E2 01D6                    	add		si,dx
  1067 000007E4 56                      	push    si			;coloca a ordenada yc+x na pilha
  1068 000007E5 E84EFF                  	call plot_xy		;toma conta do segundo octante
  1069 000007E8 89C6                    	mov		si,ax
  1070 000007EA 01CE                    	add		si,cx
  1071 000007EC 56                      	push    si			;coloca a abcisa xc+y na pilha
  1072 000007ED 89DE                    	mov		si,bx
  1073 000007EF 29D6                    	sub		si,dx
  1074 000007F1 56                      	push    si			;coloca a ordenada yc-x na pilha
  1075 000007F2 E841FF                  	call plot_xy		;toma conta do oitavo octante
  1076 000007F5 89C6                    	mov		si,ax
  1077 000007F7 29D6                    	sub		si,dx
  1078 000007F9 56                      	push    si			;coloca a abcisa xc-x na pilha
  1079 000007FA 89DE                    	mov		si,bx
  1080 000007FC 01CE                    	add		si,cx
  1081 000007FE 56                      	push    si			;coloca a ordenada yc+y na pilha
  1082 000007FF E834FF                  	call plot_xy		;toma conta do terceiro octante
  1083 00000802 89C6                    	mov		si,ax
  1084 00000804 29D6                    	sub		si,dx
  1085 00000806 56                      	push    si			;coloca a abcisa xc-x na pilha
  1086 00000807 89DE                    	mov		si,bx
  1087 00000809 29CE                    	sub		si,cx
  1088 0000080B 56                      	push    si			;coloca a ordenada yc-y na pilha
  1089 0000080C E827FF                  	call plot_xy		;toma conta do sexto octante
  1090 0000080F 89C6                    	mov		si,ax
  1091 00000811 29CE                    	sub		si,cx
  1092 00000813 56                      	push    si			;coloca a abcisa xc-y na pilha
  1093 00000814 89DE                    	mov		si,bx
  1094 00000816 29D6                    	sub		si,dx
  1095 00000818 56                      	push    si			;coloca a ordenada yc-x na pilha
  1096 00000819 E81AFF                  	call plot_xy		;toma conta do quinto octante
  1097 0000081C 89C6                    	mov		si,ax
  1098 0000081E 29CE                    	sub		si,cx
  1099 00000820 56                      	push    si			;coloca a abcisa xc-y na pilha
  1100 00000821 89DE                    	mov		si,bx
  1101 00000823 01D6                    	add		si,dx
  1102 00000825 56                      	push    si			;coloca a ordenada yc-x na pilha
  1103 00000826 E80DFF                  	call plot_xy		;toma conta do quarto octante
  1104                                  	
  1105 00000829 39D1                    	cmp		cx,dx
  1106 0000082B 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1107 0000082D E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  1108                                  
  1109                                  
  1110                                  fim_circle:
  1111 00000830 5F                      	pop		di
  1112 00000831 5E                      	pop		si
  1113 00000832 5A                      	pop		dx
  1114 00000833 59                      	pop		cx
  1115 00000834 5B                      	pop		bx
  1116 00000835 58                      	pop		ax
  1117 00000836 9D                      	popf
  1118 00000837 5D                      	pop		bp
  1119 00000838 C20600                  	ret		6
  1120                                  ;-----------------------------------------------------------------------------
  1121                                  ;    fun��o full_circle
  1122                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1123                                  ; cor definida na variavel cor					  
  1124                                  full_circle:
  1125 0000083B 55                      	push 	bp
  1126 0000083C 89E5                    	mov	 	bp,sp
  1127 0000083E 9C                      	pushf                        ;coloca os flags na pilha
  1128 0000083F 50                      	push 	ax
  1129 00000840 53                      	push 	bx
  1130 00000841 51                      	push	cx
  1131 00000842 52                      	push	dx
  1132 00000843 56                      	push	si
  1133 00000844 57                      	push	di
  1134                                  
  1135 00000845 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1136 00000848 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1137 0000084B 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1138                                  	
  1139 0000084E 89DE                    	mov		si,bx
  1140 00000850 29CE                    	sub		si,cx
  1141 00000852 50                      	push    ax			;coloca xc na pilha			
  1142 00000853 56                      	push	si			;coloca yc-r na pilha
  1143 00000854 89DE                    	mov		si,bx
  1144 00000856 01CE                    	add		si,cx
  1145 00000858 50                      	push	ax		;coloca xc na pilha
  1146 00000859 56                      	push	si		;coloca yc+r na pilha
  1147 0000085A E89B00                  	call line
  1148                                  	
  1149                                  		
  1150 0000085D 89CF                    	mov		di,cx
  1151 0000085F 81EF0100                	sub		di,1	 ;di=r-1
  1152 00000863 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1153                                  	
  1154                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1155                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1156                                  ;valores positivos para d
  1157                                  
  1158                                  stay_full:				;loop
  1159 00000866 89FE                    	mov		si,di
  1160 00000868 81FE0000                	cmp		si,0
  1161 0000086C 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1162 0000086E 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1163 00000870 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1164 00000872 81C60300                	add		si,3
  1165 00000876 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1166 00000878 42                      	inc		dx		;incrementa dx
  1167 00000879 E90E00                  	jmp		plotar_full
  1168                                  inf_full:	
  1169 0000087C 89D6                    	mov		si,dx
  1170 0000087E 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1171 00000880 D1E6                    	sal		si,1
  1172 00000882 81C60500                	add		si,5
  1173 00000886 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1174 00000888 42                      	inc		dx		;incrementa x (dx)
  1175 00000889 49                      	dec		cx		;decrementa y (cx)
  1176                                  	
  1177                                  plotar_full:	
  1178 0000088A 89C6                    	mov		si,ax
  1179 0000088C 01CE                    	add		si,cx
  1180 0000088E 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1181 0000088F 89DE                    	mov		si,bx
  1182 00000891 29D6                    	sub		si,dx
  1183 00000893 56                      	push    si		;coloca a ordenada yc-x na pilha
  1184 00000894 89C6                    	mov		si,ax
  1185 00000896 01CE                    	add		si,cx
  1186 00000898 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1187 00000899 89DE                    	mov		si,bx
  1188 0000089B 01D6                    	add		si,dx
  1189 0000089D 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1190 0000089E E85700                  	call 	line
  1191                                  	
  1192 000008A1 89C6                    	mov		si,ax
  1193 000008A3 01D6                    	add		si,dx
  1194 000008A5 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1195 000008A6 89DE                    	mov		si,bx
  1196 000008A8 29CE                    	sub		si,cx
  1197 000008AA 56                      	push    si		;coloca a ordenada yc-y na pilha
  1198 000008AB 89C6                    	mov		si,ax
  1199 000008AD 01D6                    	add		si,dx
  1200 000008AF 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1201 000008B0 89DE                    	mov		si,bx
  1202 000008B2 01CE                    	add		si,cx
  1203 000008B4 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1204 000008B5 E84000                  	call	line
  1205                                  	
  1206 000008B8 89C6                    	mov		si,ax
  1207 000008BA 29D6                    	sub		si,dx
  1208 000008BC 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1209 000008BD 89DE                    	mov		si,bx
  1210 000008BF 29CE                    	sub		si,cx
  1211 000008C1 56                      	push    si		;coloca a ordenada yc-y na pilha
  1212 000008C2 89C6                    	mov		si,ax
  1213 000008C4 29D6                    	sub		si,dx
  1214 000008C6 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1215 000008C7 89DE                    	mov		si,bx
  1216 000008C9 01CE                    	add		si,cx
  1217 000008CB 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1218 000008CC E82900                  	call	line
  1219                                  	
  1220 000008CF 89C6                    	mov		si,ax
  1221 000008D1 29CE                    	sub		si,cx
  1222 000008D3 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1223 000008D4 89DE                    	mov		si,bx
  1224 000008D6 29D6                    	sub		si,dx
  1225 000008D8 56                      	push    si		;coloca a ordenada yc-x na pilha
  1226 000008D9 89C6                    	mov		si,ax
  1227 000008DB 29CE                    	sub		si,cx
  1228 000008DD 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1229 000008DE 89DE                    	mov		si,bx
  1230 000008E0 01D6                    	add		si,dx
  1231 000008E2 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1232 000008E3 E81200                  	call	line
  1233                                  	
  1234 000008E6 39D1                    	cmp		cx,dx
  1235 000008E8 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1236 000008EA E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1237                                  	
  1238                                  	
  1239                                  fim_full_circle:
  1240 000008ED 5F                      	pop		di
  1241 000008EE 5E                      	pop		si
  1242 000008EF 5A                      	pop		dx
  1243 000008F0 59                      	pop		cx
  1244 000008F1 5B                      	pop		bx
  1245 000008F2 58                      	pop		ax
  1246 000008F3 9D                      	popf
  1247 000008F4 5D                      	pop		bp
  1248 000008F5 C20600                  	ret		6
  1249                                  ;-----------------------------------------------------------------------------
  1250                                  ;
  1251                                  ;   fun��o line
  1252                                  ;
  1253                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1254                                  line:
  1255 000008F8 55                      		push		bp
  1256 000008F9 89E5                    		mov		bp,sp
  1257 000008FB 9C                      		pushf                        ;coloca os flags na pilha
  1258 000008FC 50                      		push 		ax
  1259 000008FD 53                      		push 		bx
  1260 000008FE 51                      		push		cx
  1261 000008FF 52                      		push		dx
  1262 00000900 56                      		push		si
  1263 00000901 57                      		push		di
  1264 00000902 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1265 00000905 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1266 00000908 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1267 0000090B 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1268 0000090E 39C8                    		cmp		ax,cx
  1269 00000910 7408                    		je		line2
  1270 00000912 721C                    		jb		line1
  1271 00000914 91                      		xchg		ax,cx
  1272 00000915 87DA                    		xchg		bx,dx
  1273 00000917 E91600                  		jmp		line1
  1274                                  line2:		; deltax=0
  1275 0000091A 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1276 0000091C 7202                    		jb		line3
  1277 0000091E 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1278                                  line3:	; dx > bx
  1279 00000920 50                      		push		ax
  1280 00000921 53                      		push		bx
  1281 00000922 E811FE                  		call 		plot_xy
  1282 00000925 39D3                    		cmp		bx,dx
  1283 00000927 7503                    		jne		line31
  1284 00000929 E9C600                  		jmp		fim_line
  1285 0000092C 43                      line31:		inc		bx
  1286 0000092D E9F0FF                  		jmp		line3
  1287                                  ;deltax <>0
  1288                                  line1:
  1289                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1290                                  	; cx > ax
  1291 00000930 51                      		push		cx
  1292 00000931 29C1                    		sub		cx,ax
  1293 00000933 890E[0600]              		mov		[deltax],cx
  1294 00000937 59                      		pop		cx
  1295 00000938 52                      		push		dx
  1296 00000939 29DA                    		sub		dx,bx
  1297 0000093B 7702                    		ja		line32
  1298 0000093D F7DA                    		neg		dx
  1299                                  line32:		
  1300 0000093F 8916[0800]              		mov		[deltay],dx
  1301 00000943 5A                      		pop		dx
  1302                                  
  1303 00000944 50                      		push		ax
  1304 00000945 A1[0600]                		mov		ax,[deltax]
  1305 00000948 3B06[0800]              		cmp		ax,[deltay]
  1306 0000094C 58                      		pop		ax
  1307 0000094D 724D                    		jb		line5
  1308                                  
  1309                                  	; cx > ax e deltax>deltay
  1310 0000094F 51                      		push		cx
  1311 00000950 29C1                    		sub		cx,ax
  1312 00000952 890E[0600]              		mov		[deltax],cx
  1313 00000956 59                      		pop		cx
  1314 00000957 52                      		push		dx
  1315 00000958 29DA                    		sub		dx,bx
  1316 0000095A 8916[0800]              		mov		[deltay],dx
  1317 0000095E 5A                      		pop		dx
  1318                                  
  1319 0000095F 89C6                    		mov		si,ax
  1320                                  line4:
  1321 00000961 50                      		push		ax
  1322 00000962 52                      		push		dx
  1323 00000963 56                      		push		si
  1324 00000964 29C6                    		sub		si,ax	;(x-x1)
  1325 00000966 A1[0800]                		mov		ax,[deltay]
  1326 00000969 F7EE                    		imul		si
  1327 0000096B 8B36[0600]              		mov		si,[deltax]		;arredondar
  1328 0000096F D1EE                    		shr		si,1
  1329                                  ; se numerador (DX)>0 soma se <0 subtrai
  1330 00000971 81FA0000                		cmp		dx,0
  1331 00000975 7C09                    		jl		ar1
  1332 00000977 01F0                    		add		ax,si
  1333 00000979 81D20000                		adc		dx,0
  1334 0000097D E90600                  		jmp		arc1
  1335 00000980 29F0                    ar1:		sub		ax,si
  1336 00000982 81DA0000                		sbb		dx,0
  1337                                  arc1:
  1338 00000986 F73E[0600]              		idiv		word [deltax]
  1339 0000098A 01D8                    		add		ax,bx
  1340 0000098C 5E                      		pop		si
  1341 0000098D 56                      		push		si
  1342 0000098E 50                      		push		ax
  1343 0000098F E8A4FD                  		call		plot_xy
  1344 00000992 5A                      		pop		dx
  1345 00000993 58                      		pop		ax
  1346 00000994 39CE                    		cmp		si,cx
  1347 00000996 745A                    		je		fim_line
  1348 00000998 46                      		inc		si
  1349 00000999 E9C5FF                  		jmp		line4
  1350                                  
  1351 0000099C 39D3                    line5:		cmp		bx,dx
  1352 0000099E 7203                    		jb 		line7
  1353 000009A0 91                      		xchg		ax,cx
  1354 000009A1 87DA                    		xchg		bx,dx
  1355                                  line7:
  1356 000009A3 51                      		push		cx
  1357 000009A4 29C1                    		sub		cx,ax
  1358 000009A6 890E[0600]              		mov		[deltax],cx
  1359 000009AA 59                      		pop		cx
  1360 000009AB 52                      		push		dx
  1361 000009AC 29DA                    		sub		dx,bx
  1362 000009AE 8916[0800]              		mov		[deltay],dx
  1363 000009B2 5A                      		pop		dx
  1364 000009B3 89DE                    		mov		si,bx
  1365                                  line6:
  1366 000009B5 52                      		push		dx
  1367 000009B6 56                      		push		si
  1368 000009B7 50                      		push		ax
  1369 000009B8 29DE                    		sub		si,bx	;(y-y1)
  1370 000009BA A1[0600]                		mov		ax,[deltax]
  1371 000009BD F7EE                    		imul		si
  1372 000009BF 8B36[0800]              		mov		si,[deltay]		;arredondar
  1373 000009C3 D1EE                    		shr		si,1
  1374                                  ; se numerador (DX)>0 soma se <0 subtrai
  1375 000009C5 81FA0000                		cmp		dx,0
  1376 000009C9 7C09                    		jl		ar2
  1377 000009CB 01F0                    		add		ax,si
  1378 000009CD 81D20000                		adc		dx,0
  1379 000009D1 E90600                  		jmp		arc2
  1380 000009D4 29F0                    ar2:		sub		ax,si
  1381 000009D6 81DA0000                		sbb		dx,0
  1382                                  arc2:
  1383 000009DA F73E[0800]              		idiv		word [deltay]
  1384 000009DE 89C7                    		mov		di,ax
  1385 000009E0 58                      		pop		ax
  1386 000009E1 01C7                    		add		di,ax
  1387 000009E3 5E                      		pop		si
  1388 000009E4 57                      		push		di
  1389 000009E5 56                      		push		si
  1390 000009E6 E84DFD                  		call		plot_xy
  1391 000009E9 5A                      		pop		dx
  1392 000009EA 39D6                    		cmp		si,dx
  1393 000009EC 7404                    		je		fim_line
  1394 000009EE 46                      		inc		si
  1395 000009EF E9C3FF                  		jmp		line6
  1396                                  
  1397                                  fim_line:
  1398 000009F2 5F                      		pop		di
  1399 000009F3 5E                      		pop		si
  1400 000009F4 5A                      		pop		dx
  1401 000009F5 59                      		pop		cx
  1402 000009F6 5B                      		pop		bx
  1403 000009F7 58                      		pop		ax
  1404 000009F8 9D                      		popf
  1405 000009F9 5D                      		pop		bp
  1406 000009FA C20800                  		ret		8
  1407                                  ;*******************************************************************
  1408                                  segment data
  1409                                  
  1410                                  
  1411 00000000 0F                      cor		db		branco_intenso
  1412                                  
  1413                                  ;	I R G B COR
  1414                                  ;	0 0 0 0 preto
  1415                                  ;	0 0 0 1 azul
  1416                                  ;	0 0 1 0 verde
  1417                                  ;	0 0 1 1 cyan
  1418                                  ;	0 1 0 0 vermelho
  1419                                  ;	0 1 0 1 magenta
  1420                                  ;	0 1 1 0 marrom
  1421                                  ;	0 1 1 1 branco
  1422                                  ;	1 0 0 0 cinza
  1423                                  ;	1 0 0 1 azul claro
  1424                                  ;	1 0 1 0 verde claro
  1425                                  ;	1 0 1 1 cyan claro
  1426                                  ;	1 1 0 0 rosa
  1427                                  ;	1 1 0 1 magenta claro
  1428                                  ;	1 1 1 0 amarelo
  1429                                  ;	1 1 1 1 branco intenso
  1430                                  
  1431                                  preto			equ		0
  1432                                  azul			equ		1
  1433                                  verde			equ		2
  1434                                  cyan			equ		3
  1435                                  vermelho		equ		4
  1436                                  magenta			equ		5
  1437                                  marrom			equ		6
  1438                                  branco			equ		7
  1439                                  cinza			equ		8
  1440                                  azul_claro		equ		9
  1441                                  verde_claro		equ		10
  1442                                  cyan_claro		equ		11
  1443                                  rosa			equ		12
  1444                                  magenta_claro	equ		13
  1445                                  amarelo			equ		14
  1446                                  branco_intenso	equ		15
  1447                                  
  1448 00000001 00                      modo_anterior	db		0
  1449 00000002 0000                    linha   		dw  	0
  1450 00000004 0000                    coluna  		dw  	0
  1451 00000006 0000                    deltax			dw		0
  1452 00000008 0000                    deltay			dw		0	
  1453 0000000A 557369656C20466572-     nome_aluno    	db  	'Usiel Ferreira Lopes Junior'
  1454 00000013 7265697261204C6F70-
  1455 0000001C 6573204A756E696F72 
  1456 00000025 4162726972              abrir_str    	db  	'Abrir'
  1457 0000002A 4649525F31              fir1_str    	db  	'FIR_1'
  1458 0000002F 4649525F32              fir2_str    	db  	'FIR_2'
  1459 00000034 4649525F33              fir3_str    	db  	'FIR_3'
  1460 00000039 53616972                sair_str    	db  	'Sair'
  1461 0000003D 3E203E203E              seta_str    	db  	'> > >'
  1462                                  
  1463 00000042 73696E616C2E747874-     filename 		db 		'sinal.txt',0
  1464 0000004B 00                 
  1465 0000004C 0000                    handle 			dw 		0
  1466 0000004E 00                      aberto 			db 		0
  1467 0000004F 0000                    qtd_lida 		dw 		0
  1468                                  
  1469 00000051 <res 00000010>          buffer 			resb 	16		
  1470 00000061 24                      				db 		'$'
  1471                                  
  1472 00000062 0000                    contador 		dw 		0
  1473 00000064 0000                    contador2 		dw 		0
  1474 00000066 00                      sinal 			db 		0
  1475 00000067 F401                    qtd_pixels  	dw 		500
  1476                                  
  1477 00000069 00<rept>                v_in_mod 		times 	500 	db 	0  	; Vetor Módulo
  1478 0000025D 00<rept>                v_in_sn 		times 	500		db 	0  	; Vetor Sinal
  1479                                  
  1480 00000451 00<rept>                v_out_mod 		times 	500		db 	0  	; Vetor Módulo
  1481 00000645 00<rept>                v_out_sn 		times 	500		db 	0  	; Vetor Saída
  1482                                  
  1483 00000839 00<rept>                v_select_mod 	times 	500		db 	0  	; Vetor Módulo
  1484 00000A2D 00<rept>                v_select_sn		times 	500		db 	0  	; Vetor Saída
  1485                                  
  1486 00000C21 0000                    ponto_central	dw 		0
  1487                                  
  1488                                  ; 	Obs o tamanho de v_out pode ir até  len(v_in) + len(filtro) - 1,
  1489                                  ; 	neste caso 510, mascomo vamos plotar apenas 500 pixels 
  1490                                  ;	não faz sentido realizar o calculo de convolução até o final.
  1491                                  
  1492 00000C23 0B                      filtros_len 	db 		11
  1493 00000C24 010101010101010101-     filtro1 		db 		1,1,1,1,1,1,1,1,1,1,1
  1494 00000C2D 0101               
  1495 00000C2F 0B                      filtro1_div		db  	11
  1496                                  
  1497 00000C30 010101010202020101-     filtro2 		db 		1,1,1,1,2,2,2,1,1,1,1
  1498 00000C39 0101               
  1499 00000C3B 0E                      filtro2_div		db  	14
  1500                                  
  1501 00000C3C 01010202FDFDFD0202-     filtro3 		db 		1,1,2,2,-3,-3,-3,2,2,1,1
  1502 00000C45 0101               
  1503 00000C47 09                      filtro3_div		db  	9
  1504                                  
  1505 00000C48 00<rept>                f_select		times 	11		db 	0
  1506 00000C53 00                      f_select_div	db		0
  1507                                  
  1508 00000C54 0000                    x_start			dw		0
  1509 00000C56 0000                    x_end			dw		0
  1510 00000C58 0000                    h_start			dw		0
  1511                                  
  1512                                  ;*************************************************************************
  1513                                  segment stack stack
  1514 00000000 <res 00000200>              resb 		512
  1515                                  stacktop:
  1516                                  
  1517                                  
