     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                	mov 		ax,data
     8 00000003 8ED8                    	mov 		ds,ax
     9 00000005 B8[0000]                	mov 		ax,stack
    10 00000008 8ED0                    	mov 		ss,ax
    11 0000000A BC[0002]                	mov 		sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                    	mov  		ah,0Fh
    15 0000000F CD10                    	int  		10h
    16 00000011 A2[0100]                	mov  		[modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                    	mov     	al,12h
    20 00000016 B400                    	mov     	ah,0
    21 00000018 CD10                    	int     	10h
    22 0000001A E80300                  	call desenha_layout
    23 0000001D E98602                  	jmp espera_mouse
    24                                  	; jmp read_file			APENAS PARA TESTAR DIRETAMENTE A FUNÇÃO
    25                                  
    26                                  desenha_layout:
    27                                  ; desenha divisorias da tela 
    28                                  	; escreve nome
    29 00000020 B91B00                  	mov     	cx,27			;n�mero de caracteres
    30 00000023 BB0000                  	mov     	bx,0
    31 00000026 B61D                    	mov     	dh,29			;linha 0-29
    32 00000028 B223                    	mov     	dl,35			;coluna 0-79
    33 0000002A C606[0000]0A            	mov		byte[cor], verde_claro
    34                                  	l_w_name:
    35 0000002F E8DF06                  		call	cursor
    36 00000032 8A87[0A00]              		mov     al,[bx+nome_aluno]
    37 00000036 E8EF06                  		call	caracter
    38 00000039 43                      		inc     bx			;proximo caracter
    39 0000003A FEC2                    		inc		dl			;avanca a coluna
    40 0000003C E2F1                    		loop    l_w_name
    41                                  
    42                                  	; escreve sair
    43 0000003E B90400                  	mov     	cx,4			;n�mero de caracteres
    44 00000041 BB0000                  	mov     	bx,0
    45 00000044 B61B                    	mov     	dh,27			;linha 0-29
    46 00000046 B206                    	mov     	dl,6			;coluna 0-79
    47 00000048 C606[0000]0C            	mov		byte[cor], rosa
    48                                  	l_w_sair:
    49 0000004D E8C106                  		call	cursor
    50 00000050 8A87[3900]              		mov     al,[bx+sair_str]
    51 00000054 E8D106                  		call	caracter
    52 00000057 43                      		inc     bx			;proximo caracter
    53 00000058 FEC2                    		inc		dl			;avanca a coluna
    54 0000005A E2F1                    		loop    l_w_sair
    55                                  
    56                                  	; escreve FIR_3
    57 0000005C B90500                  	mov     	cx,5			;n�mero de caracteres
    58 0000005F BB0000                  	mov     	bx,0
    59 00000062 B616                    	mov     	dh,22			;linha 0-29
    60 00000064 B206                    	mov     	dl,6			;coluna 0-79
    61 00000066 C606[0000]0B            	mov		byte[cor], cyan_claro
    62                                  	l_w_fir3:
    63 0000006B E8A306                  		call	cursor
    64 0000006E 8A87[3400]              		mov     al,[bx+fir3_str]
    65 00000072 E8B306                  		call	caracter
    66 00000075 43                      		inc     bx			;proximo caracter
    67 00000076 FEC2                    		inc		dl			;avanca a coluna
    68 00000078 E2F1                    		loop    l_w_fir3
    69                                  
    70                                  	; escreve FIR_2
    71 0000007A B90500                  	mov     	cx,5			;n�mero de caracteres
    72 0000007D BB0000                  	mov     	bx,0
    73 00000080 B611                    	mov     	dh,17			;linha 0-29
    74 00000082 B206                    	mov     	dl,6			;coluna 0-79
    75 00000084 C606[0000]0E            	mov		byte[cor], amarelo
    76                                  	l_w_fir2:
    77 00000089 E88506                  		call	cursor
    78 0000008C 8A87[2F00]              		mov     al,[bx+fir2_str]
    79 00000090 E89506                  		call	caracter
    80 00000093 43                      		inc     bx			;proximo caracter
    81 00000094 FEC2                    		inc		dl			;avanca a coluna
    82 00000096 E2F1                    		loop    l_w_fir2
    83                                  
    84                                  	; escreve FIR_1
    85 00000098 B90500                  	mov     	cx,5			;n�mero de caracteres
    86 0000009B BB0000                  	mov     	bx,0
    87 0000009E B60C                    	mov     	dh,12			;linha 0-29
    88 000000A0 B206                    	mov     	dl,6			;coluna 0-79
    89 000000A2 C606[0000]0D            	mov		byte[cor], magenta_claro
    90                                  	l_w_fir1:
    91 000000A7 E86706                  		call	cursor
    92 000000AA 8A87[2A00]              		mov     al,[bx+fir1_str]
    93 000000AE E87706                  		call	caracter
    94 000000B1 43                      		inc     bx			;proximo caracter
    95 000000B2 FEC2                    		inc		dl			;avanca a coluna
    96 000000B4 E2F1                    		loop    l_w_fir1
    97                                  
    98                                  	; escreve setas 1
    99 000000B6 B90500                  	mov     	cx,5			;n�mero de caracteres
   100 000000B9 BB0000                  	mov     	bx,0
   101 000000BC B606                    	mov     	dh,6			;linha 0-29
   102 000000BE B206                    	mov     	dl,6			;coluna 0-79
   103 000000C0 C606[0000]0F            	mov		byte[cor], branco_intenso
   104 000000C5 E85101                  	call l_w_seta
   105                                  
   106                                  	; escreve setas 2
   107 000000C8 B90500                  	mov     	cx,5			;n�mero de caracteres
   108 000000CB BB0000                  	mov     	bx,0
   109 000000CE B608                    	mov     	dh,8			;linha 0-29
   110 000000D0 B206                    	mov     	dl,6			;coluna 0-79
   111 000000D2 C606[0000]0F            	mov		byte[cor], branco_intenso
   112 000000D7 E83F01                  	call l_w_seta
   113                                  
   114                                  	; escreve abrir
   115 000000DA B90500                  	mov     	cx,5			;n�mero de caracteres
   116 000000DD BB0000                  	mov     	bx,0
   117 000000E0 B602                    	mov     	dh,2			;linha 0-29
   118 000000E2 B206                    	mov     	dl,6			;coluna 0-79
   119 000000E4 C606[0000]02            	mov		byte[cor], verde
   120                                  	l_w_abrir:
   121 000000E9 E82506                  		call	cursor
   122 000000EC 8A87[2500]              		mov     al,[bx+abrir_str]
   123 000000F0 E83506                  		call	caracter
   124 000000F3 43                      		inc     bx			;proximo caracter
   125 000000F4 FEC2                    		inc		dl			;avanca a coluna
   126 000000F6 E2F1                    		loop    l_w_abrir
   127                                  
   128                                  
   129                                  	; bordas externas
   130 000000F8 C606[0000]0F            	mov		byte[cor], branco_intenso
   131 000000FD B80000                  	mov		ax,0
   132 00000100 50                      	push		ax
   133 00000101 B80000                  	mov		ax,0
   134 00000104 50                      	push		ax
   135 00000105 B80000                  	mov		ax,0
   136 00000108 50                      	push		ax
   137 00000109 B8DF01                  	mov		ax,479
   138 0000010C 50                      	push		ax
   139 0000010D E8F807                  	call		line
   140                                  
   141 00000110 C606[0000]0F            	mov		byte[cor], branco_intenso
   142 00000115 B80000                  	mov		ax,0
   143 00000118 50                      	push		ax
   144 00000119 B80000                  	mov		ax,0
   145 0000011C 50                      	push		ax
   146 0000011D B87F02                  	mov		ax,639
   147 00000120 50                      	push		ax
   148 00000121 B80000                  	mov		ax,0
   149 00000124 50                      	push		ax
   150 00000125 E8E007                  	call		line
   151                                  
   152 00000128 C606[0000]0F            	mov		byte[cor], branco_intenso
   153 0000012D B87F02                  	mov		ax,639
   154 00000130 50                      	push		ax
   155 00000131 B80000                  	mov		ax,0
   156 00000134 50                      	push		ax
   157 00000135 B87F02                  	mov		ax,639
   158 00000138 50                      	push		ax
   159 00000139 B8DF01                  	mov		ax,479
   160 0000013C 50                      	push		ax
   161 0000013D E8C807                  	call		line
   162                                  
   163 00000140 C606[0000]0F            	mov		byte[cor], branco_intenso
   164 00000145 B80000                  	mov		ax,0
   165 00000148 50                      	push		ax
   166 00000149 B8DF01                  	mov		ax,479
   167 0000014C 50                      	push		ax
   168 0000014D B87F02                  	mov		ax,639
   169 00000150 50                      	push		ax
   170 00000151 B8DF01                  	mov		ax,479
   171 00000154 50                      	push		ax
   172 00000155 E8B007                  	call		line
   173                                  
   174                                  	; bordas internas centrais
   175 00000158 C606[0000]0F            	mov		byte[cor], branco_intenso
   176 0000015D B88A00                  	mov		ax,138
   177 00000160 50                      	push		ax
   178 00000161 B80000                  	mov		ax,0
   179 00000164 50                      	push		ax
   180 00000165 B88A00                  	mov		ax,138
   181 00000168 50                      	push		ax
   182 00000169 B8DF01                  	mov		ax,479
   183 0000016C 50                      	push		ax
   184 0000016D E89807                  	call		line
   185                                  
   186 00000170 C606[0000]0F            	mov		byte[cor], branco_intenso
   187 00000175 B88B00                  	mov		ax,139
   188 00000178 50                      	push		ax
   189 00000179 B81300                  	mov		ax,19
   190 0000017C 50                      	push		ax
   191 0000017D B87F02                  	mov		ax,639
   192 00000180 50                      	push		ax
   193 00000181 B81300                  	mov		ax,19
   194 00000184 50                      	push		ax
   195 00000185 E88007                  	call		line
   196                                  
   197 00000188 C606[0000]0F            	mov		byte[cor], branco_intenso
   198 0000018D B88B00                  	mov		ax,139
   199 00000190 50                      	push		ax
   200 00000191 B8F900                  	mov		ax,249
   201 00000194 50                      	push		ax
   202 00000195 B87F02                  	mov		ax,639
   203 00000198 50                      	push		ax
   204 00000199 B8F900                  	mov		ax,249
   205 0000019C 50                      	push		ax
   206 0000019D E86807                  	call		line
   207                                  
   208                                  	; bordas internas menu
   209 000001A0 C606[0000]0F            	mov		byte[cor], branco_intenso
   210 000001A5 B80000                  	mov		ax,0
   211 000001A8 50                      	push		ax
   212 000001A9 B84F00                  	mov		ax,79
   213 000001AC 50                      	push		ax
   214 000001AD B88A00                  	mov		ax,138
   215 000001B0 50                      	push		ax
   216 000001B1 B84F00                  	mov		ax,79
   217 000001B4 50                      	push		ax
   218 000001B5 E85007                  	call		line
   219                                  
   220 000001B8 C606[0000]0F            	mov		byte[cor], branco_intenso
   221 000001BD B80000                  	mov		ax,0
   222 000001C0 50                      	push		ax
   223 000001C1 B89F00                  	mov		ax,159
   224 000001C4 50                      	push		ax
   225 000001C5 B88A00                  	mov		ax,138
   226 000001C8 50                      	push		ax
   227 000001C9 B89F00                  	mov		ax,159
   228 000001CC 50                      	push		ax
   229 000001CD E83807                  	call		line
   230                                  
   231 000001D0 C606[0000]0F            	mov		byte[cor], branco_intenso
   232 000001D5 B80000                  	mov		ax,0
   233 000001D8 50                      	push		ax
   234 000001D9 B8EF00                  	mov		ax,239
   235 000001DC 50                      	push		ax
   236 000001DD B88A00                  	mov		ax,138
   237 000001E0 50                      	push		ax
   238 000001E1 B8EF00                  	mov		ax,239
   239 000001E4 50                      	push		ax
   240 000001E5 E82007                  	call		line
   241                                  
   242 000001E8 C606[0000]0F            	mov		byte[cor], branco_intenso
   243 000001ED B80000                  	mov		ax,0
   244 000001F0 50                      	push		ax
   245 000001F1 B83F01                  	mov		ax,319
   246 000001F4 50                      	push		ax
   247 000001F5 B88A00                  	mov		ax,138
   248 000001F8 50                      	push		ax
   249 000001F9 B83F01                  	mov		ax,319
   250 000001FC 50                      	push		ax
   251 000001FD E80807                  	call		line
   252                                  
   253 00000200 C606[0000]0F            	mov		byte[cor], branco_intenso
   254 00000205 B80000                  	mov		ax,0
   255 00000208 50                      	push		ax
   256 00000209 B88F01                  	mov		ax,399
   257 0000020C 50                      	push		ax
   258 0000020D B88A00                  	mov		ax,138
   259 00000210 50                      	push		ax
   260 00000211 B88F01                  	mov		ax,399
   261 00000214 50                      	push		ax
   262 00000215 E8F006                  	call		line
   263 00000218 C3                      	ret
   264                                  
   265                                  l_w_seta:
   266 00000219 E8F504                  	call	cursor
   267 0000021C 8A87[3D00]              	mov     al, [bx+seta_str]
   268 00000220 E80505                  	call	caracter
   269 00000223 43                      	inc     bx			;proximo caracter
   270 00000224 FEC2                    	inc		dl			;avanca a coluna
   271 00000226 E2F1                    	loop    l_w_seta
   272 00000228 C3                      	ret
   273                                  
   274                                  limpar_areas:
   275 00000229 E80400                  	call limpar_area1
   276 0000022C E83A00                  	call limpar_area2
   277 0000022F C3                      	ret
   278                                  
   279                                  limpar_area1:
   280 00000230 50                      	push ax
   281 00000231 53                      	push bx
   282 00000232 51                      	push cx
   283 00000233 C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   284 00000239 C606[0000]00            	mov	byte[cor],preto
   285                                  		loop_limpar_area1:
   286 0000023E 8B1E[6200]              			mov bx, word[contador]
   287 00000242 81FBE400                			cmp bx, 228
   288 00000246 745A                    			je volta_limpa
   289                                  		
   290                                  			;x1 ->  139
   291 00000248 B88B00                  			mov		ax, 139   ;->x1
   292 0000024B 50                      			push	ax
   293                                  		
   294                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   295 0000024C 31C9                    			xor cx, cx
   296 0000024E B9DE01                  			mov cx, 478
   297 00000251 29D9                    			sub cx, bx
   298 00000253 89C8                    			mov	ax, cx     ;->y1
   299 00000255 50                      			push ax
   300                                  		
   301                                  			;x2 = 638
   302 00000256 31C0                    			xor ax, ax
   303 00000258 057E02                  			add ax, 638
   304 0000025B 50                      			push ax
   305                                  		
   306                                  			;y2 = y1
   307 0000025C 89C8                    			mov	ax, cx     ;->y2=y1
   308 0000025E 50                      			push ax
   309 0000025F E8A606                  			call line
   310                                  		
   311 00000262 FF06[6200]              			inc word[contador]
   312 00000266 E9D5FF                  			jmp loop_limpar_area1
   313                                  
   314                                  limpar_area2:
   315 00000269 50                      	push ax
   316 0000026A 53                      	push bx
   317 0000026B 51                      	push cx
   318 0000026C C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   319 00000272 C606[0000]00            	mov	byte[cor],preto
   320                                  		loop_limpar_area2:
   321 00000277 8B1E[6200]              			mov bx, word[contador]
   322 0000027B 81FBE400                			cmp bx, 228
   323 0000027F 7421                    			je volta_limpa
   324                                  		
   325                                  			;x1 ->  139
   326 00000281 B88B00                  			mov		ax, 139   ;->x1
   327 00000284 50                      			push	ax
   328                                  		
   329                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   330 00000285 31C9                    			xor cx, cx
   331 00000287 B9F800                  			mov cx, 248
   332 0000028A 29D9                    			sub cx, bx
   333 0000028C 89C8                    			mov	ax, cx     ;->y1
   334 0000028E 50                      			push ax
   335                                  		
   336                                  			;x2 = 638
   337 0000028F 31C0                    			xor ax, ax
   338 00000291 057E02                  			add ax, 638
   339 00000294 50                      			push ax
   340                                  		
   341                                  			;y2 = y1
   342 00000295 89C8                    			mov	ax, cx     ;->y2=y1
   343 00000297 50                      			push ax
   344 00000298 E86D06                  			call line
   345                                  
   346 0000029B FF06[6200]              			inc word[contador]
   347 0000029F E9D5FF                  			jmp loop_limpar_area2
   348                                  
   349                                  volta_limpa:
   350 000002A2 59                      	pop cx
   351 000002A3 5B                      	pop bx
   352 000002A4 58                      	pop ax
   353 000002A5 C3                      	ret
   354                                  
   355                                  espera_mouse:
   356                                  		;mostrando mouse na tela
   357 000002A6 B80100                  		mov ax, 01h
   358 000002A9 CD33                    		int 33h
   359                                  		
   360                                  		;lendo mouse
   361 000002AB 31DB                    		xor bx, bx
   362 000002AD B80300                  		mov ax, 03h
   363 000002B0 CD33                    		int 33h
   364                                  
   365 000002B2 81FB0100                		cmp bx, 1
   366 000002B6 744F                    		je verifica
   367 000002B8 E9EBFF                  		jmp espera_mouse
   368                                  
   369                                  read_file:
   370 000002BB 803E[4E00]01            	cmp byte[aberto],1
   371 000002C0 7414                    	je fecha_arq_sinal
   372 000002C2 C606[4E00]01            	mov byte[aberto], 1
   373 000002C7 E81801                  	call open_file
   374 000002CA E83101                  	call le_numeros
   375 000002CD E8AB02                  	call config_plotar_entrada
   376 000002D0 E88D03                  	call plotar_vetor
   377 000002D3 E9D0FF                  	jmp espera_mouse
   378                                  
   379                                  fecha_arq_sinal:
   380 000002D6 E81C01                  	call close_file
   381 000002D9 C706[4E00]0000          	mov word [aberto], 0
   382 000002DF E84EFF                  	call limpar_area1
   383 000002E2 E8D6FF                  	call read_file
   384                                  
   385                                  load_data:
   386 000002E5 803E[4E00]00            	cmp byte[aberto],0
   387 000002EA 74CF                    	je read_file
   388 000002EC E80F01                  	call le_numeros
   389 000002EF E83EFF                  	call limpar_area1
   390 000002F2 E88602                  	call config_plotar_entrada
   391 000002F5 E86803                  	call plotar_vetor
   392 000002F8 E9ABFF                  	jmp espera_mouse
   393                                  
   394                                  exit:
   395 000002FB B400                    	mov  	ah,0   					; set video mode
   396 000002FD A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   397 00000300 CD10                    	int  	10h
   398 00000302 B8004C                  	mov     ax,4C00H
   399 00000305 CD21                    	int     21h
   400                                  
   401                                  verifica:
   402                                  	;cx -> posicao horizontal do mouse
   403                                  	;dx -> posicao vertical do mouse	(INVERTIDO)
   404 00000307 81F98C00                	cmp cx, 140
   405 0000030B 7D99                    	jnl espera_mouse ;se o click ocorrer fora da barra de funcoes, nao faz nada e volta a esperar o mouse
   406 0000030D 81FA5000                	cmp dx, 80
   407 00000311 7CA8                    	jl read_file	;abrir     	   dx < 80
   408 00000313 81FAA000                	cmp dx, 160
   409 00000317 7CCC                    	jl load_data	;load  	080 <= dx < 160
   410 00000319 81FAF000                	cmp dx, 240
   411 0000031D 7C15                    	jl run_fir1		;FIR3  	160 <= dx < 240
   412 0000031F 81FA4001                	cmp dx, 320
   413 00000323 7C49                    	jl run_fir2		;FIR2  	240 <= dx < 320
   414 00000325 81FA9001                	cmp dx, 400
   415 00000329 7C7D                    	jl run_fir3		;FIR1  	320 <= dx < 400
   416 0000032B 81FAE001                	cmp dx, 480
   417 0000032F 7CCA                    	jl exit			;sair  	   dx > 400
   418 00000331 E972FF                  	jmp espera_mouse
   419                                  
   420                                  run_fir1:
   421 00000334 C706[6200]0000          	mov word[contador], 0
   422                                  	loop_copy_f1:
   423 0000033A 8B1E[6200]              		mov bx, word[contador]
   424 0000033E 8A8F[0C10]              		mov cl, byte[filtro1 + bx]
   425 00000342 888F[3010]              		mov byte[f_select + bx], cl
   426 00000346 FF06[6200]              		inc word[contador]
   427 0000034A 8B1E[6200]              		mov bx, word[contador]
   428 0000034E 3A1E[0B10]              		cmp bl, byte[filtros_len]
   429 00000352 7CE6                    		jl loop_copy_f1
   430 00000354 8A1E[1710]              	mov bl, byte[filtro1_div]
   431 00000358 881E[3B10]              	mov byte[f_select_div], bl
   432 0000035C E80B01                  	call aplicar_filtro
   433 0000035F E8C401                  	call ajustar_vout
   434 00000362 E804FF                  	call limpar_area2
   435 00000365 E84002                  	call config_plotar_saida
   436 00000368 E8F502                  	call plotar_vetor
   437 0000036B E938FF                  	jmp espera_mouse
   438                                  
   439                                  run_fir2:
   440 0000036E C706[6200]0000          	mov word[contador], 0
   441                                  	loop_copy_f2:
   442 00000374 8B1E[6200]              		mov bx, word[contador]
   443 00000378 8A8F[1810]              		mov cl, byte[filtro2 + bx]
   444 0000037C 888F[3010]              		mov byte[f_select + bx], cl
   445 00000380 FF06[6200]              		inc word[contador]
   446 00000384 8B1E[6200]              		mov bx, word[contador]
   447 00000388 3A1E[0B10]              		cmp bl, byte[filtros_len]
   448 0000038C 7CE6                    		jl loop_copy_f2
   449 0000038E 8A1E[2310]              	mov bl, byte[filtro2_div]
   450 00000392 881E[3B10]              	mov byte[f_select_div], bl
   451 00000396 E8D100                  	call aplicar_filtro
   452 00000399 E88A01                  	call ajustar_vout
   453 0000039C E8CAFE                  	call limpar_area2
   454 0000039F E80602                  	call config_plotar_saida
   455 000003A2 E8BB02                  	call plotar_vetor
   456 000003A5 E9FEFE                  	jmp espera_mouse
   457                                  
   458                                  run_fir3:
   459 000003A8 C706[6200]0000          	mov word[contador], 0
   460                                  	loop_copy_f3:
   461 000003AE 8B1E[6200]              		mov bx, word[contador]
   462 000003B2 8A8F[1810]              		mov cl, byte[filtro2 + bx]
   463 000003B6 888F[3010]              		mov byte[f_select + bx], cl
   464 000003BA FF06[6200]              		inc word[contador]
   465 000003BE 8B1E[6200]              		mov bx, word[contador]
   466 000003C2 3A1E[0B10]              		cmp bl, byte[filtros_len]
   467 000003C6 7CE6                    		jl loop_copy_f3
   468 000003C8 8A1E[2310]              	mov bl, byte[filtro2_div]
   469 000003CC 881E[3B10]              	mov byte[f_select_div], bl
   470 000003D0 E89700                  	call aplicar_filtro
   471 000003D3 E85001                  	call ajustar_vout
   472 000003D6 E890FE                  	call limpar_area2
   473 000003D9 E8CC01                  	call config_plotar_saida
   474 000003DC E88102                  	call plotar_vetor
   475 000003DF E9C4FE                  	jmp espera_mouse
   476                                  
   477                                  open_file:
   478 000003E2 C706[4F00]0000          	mov word[qtd_lida], 0  	; reseta a quantidade lida
   479 000003E8 BA[4200]                	mov dx, filename 		; coloca o endere�o do nome do arquivo em dx (make a pointer to the filename)
   480 000003EB B000                    	mov al, 0        		; modo escrita e leitura (0 - for reading. 1 - for writing. 2 - both)
   481 000003ED B43D                    	mov ah, 3Dh      		; 3Dh of DOS Services opens a file
   482 000003EF CD21                    	int 21h    		 		; Call DOS (interruption 21h)
   483 000003F1 A3[4C00]                	mov [handle], ax  		; Function 3Dh returns the file handle in AX, here we save it for later use.
   484 000003F4 C3                      	ret
   485                                  
   486                                  close_file:
   487 000003F5 8B1E[4C00]              	mov bx, [handle]
   488 000003F9 B43E                    	mov ah, 3eh
   489 000003FB CD21                    	int 21h ; close file...
   490 000003FD C3                      	ret
   491                                  
   492                                  le_numeros:
   493 000003FE C706[6200]0000          	mov word[contador], 0
   494                                  	loop_le_numeros:
   495                                  		;DOS Service Function number 3FH reads from a file.
   496 00000404 B43F                    		mov ah, 3FH
   497 00000406 B91000                  		mov cx, 16         	; I will assume "sinal.txt" has at least 16 bytes in it (ex:-5.6200000e+02  ).
   498 00000409 BA[5100]                		mov dx, buffer   	; DOS Functions like DX having pointers for some reason.
   499 0000040C 8B1E[4C00]              		mov bx, [handle]  	; BX needs the file handle.
   500 00000410 CD21                    		int 21h           	; call DOS
   501                                  
   502                                  		; verifica se o final do arquivo foi encontrado 
   503 00000412 39C8                    		cmp ax, cx ;EOF reached?
   504 00000414 752E                    		jne EOF
   505                                  
   506 00000416 FF06[4F00]              		inc word[qtd_lida]
   507                                  
   508                                  		; Here we will put a $ after 4 bytes in the buffer
   509 0000041A BA[5100]                		mov dx, buffer
   510 0000041D 01C2                    		add dx,ax
   511 0000041F 89D3                    		mov bx,dx
   512 00000421 C60724                  		mov byte [bx], '$'
   513                                  
   514 00000424 E83800                  		call get_sinal_and_convert
   515                                  
   516 00000427 FF06[6200]              		inc word[contador]
   517 0000042B 8B1E[6700]              		mov bx, word[qtd_pixels]
   518                                  
   519                                  		; verifica se os 500 números já foram lidos
   520 0000042F 391E[6200]              		cmp word[contador], bx
   521 00000433 75CF                    		jne loop_le_numeros
   522 00000435 7400                    		je  volta_le_numeros
   523                                  
   524                                  volta_le_numeros:
   525 00000437 E80100                  	call imprime_qtd_lida
   526 0000043A C3                      	ret
   527                                  
   528                                  imprime_qtd_lida:
   529 0000043B 50                      	push ax
   530 0000043C A1[4F00]                	mov ax, word[qtd_lida]
   531 0000043F E86F02                  	call print_dw_number
   532 00000442 58                      	pop ax
   533 00000443 C3                      	ret
   534                                  
   535                                  EOF:
   536 00000444 E974FE                  	jmp read_file	;	COMEÇA A LEITURA DO ARQUIVO DESDE O INÍCIO
   537                                  
   538                                  sinal_negativo:
   539 00000447 8B1E[6200]              	mov bx, word[contador]
   540 0000044B C687[5D02]01            	mov byte[v_in_sn+bx], 1
   541 00000450 E98001                  	jmp converte_str
   542                                  
   543                                  sinal_positivo:
   544 00000453 8B1E[6200]              	mov bx, word[contador]
   545 00000457 C687[5D02]00            	mov byte[v_in_sn+bx], 0
   546 0000045C E97401                  	jmp converte_str
   547                                  
   548                                  get_sinal_and_convert:
   549 0000045F 30E4                    	xor 	ah, ah                ; limpa ah
   550 00000461 A0[5100]                	mov 	al, byte[buffer] 	  ; pega o primeiro valor do buffer, que indica o sinal (+ ou -)
   551 00000464 3C2D                    	cmp  	al, 45				  ; compara com (-) em ASCII
   552 00000466 74DF                    	je sinal_negativo
   553 00000468 75E9                    	jne sinal_positivo
   554                                  
   555                                  aplicar_filtro:
   556 0000046A C706[6200]0000          	mov word[contador], 0
   557                                  	l1_aplicar_filtro:
   558 00000470 8B1E[6200]              		mov bx, word[contador]
   559 00000474 C787[5104]0000          		mov word[v_out_mod + bx], 0
   560 0000047A B80000                  		mov ax,  0						;	set x_start
   561 0000047D BB0000                  		mov bx, 0
   562 00000480 8A1E[0B10]              		mov bl, byte[filtros_len]
   563 00000484 F7DB                    		neg bx
   564 00000486 031E[6200]              		add bx, word[contador]
   565 0000048A 81C30100                		add bx, 1
   566 0000048E E88E00                  		call max_ax_bx 
   567 00000491 890E[3C10]              		mov word[x_start], cx
   568                                  
   569 00000495 A1[6200]                		mov ax, word[contador]			;	set x_end
   570 00000498 050100                  		add ax, 1
   571 0000049B 8B1E[6700]              		mov bx, word[qtd_pixels]
   572 0000049F E87600                  		call min_ax_bx
   573 000004A2 890E[3E10]              		mov word[x_end], cx
   574                                  
   575 000004A6 A1[6200]                		mov ax, word[contador]			;	set h_start
   576 000004A9 BB0000                  		mov bx, 0
   577 000004AC 8A1E[0B10]              		mov bl, byte[filtros_len]
   578 000004B0 81EB0100                		sub bx, 1
   579 000004B4 E86100                  		call min_ax_bx
   580 000004B7 890E[4010]              		mov[h_start], cx
   581                                  
   582 000004BB A1[3C10]                		mov ax, word[x_start]			; 	inicio loop_2
   583 000004BE A3[6400]                		mov word[contador2], ax
   584                                  		l2_aplicar_filtro:
   585 000004C1 E81F00                  			call conv_vin_filtro
   586 000004C4 FF06[6400]              			inc word[contador2]			;	fim l2_aplicar_filtro
   587 000004C8 8B1E[3E10]              			mov bx, word[x_end]
   588 000004CC 391E[6400]              			cmp word[contador2], bx
   589 000004D0 7CEF                    			jl l2_aplicar_filtro
   590 000004D2 FF06[6200]              		inc word[contador]				;	fim l1_aplicar_filtro
   591 000004D6 8B1E[6700]              		mov bx, word[qtd_pixels]
   592 000004DA 391E[6200]              		cmp word[contador], bx
   593 000004DE 7C90                    		jl l1_aplicar_filtro
   594 000004E0 7400                    		je volta_aplicar_filtro
   595                                  
   596                                  volta_aplicar_filtro:
   597 000004E2 C3                      	ret
   598                                  
   599                                  conv_vin_filtro:
   600 000004E3 8B1E[4010]              	mov bx, word[h_start]
   601 000004E7 30E4                    	xor ah, ah
   602 000004E9 8A87[3010]              	mov al, byte[f_select + bx]
   603 000004ED 8B1E[6400]              	mov bx, word[contador2]
   604 000004F1 30ED                    	xor ch, ch
   605 000004F3 8A8F[6900]              	mov cl, byte[v_in_mod + bx]
   606 000004F7 E80E00                  	call aplicar_sn_cl			; aplicar o sinal [v_in_sn + bx] a cx
   607 000004FA F6E9                    	imul cl
   608 000004FC 0187[5104]              	add word[v_out_mod + bx], ax
   609 00000500 FF0E[4010]              	dec word[h_start]			; decrementa h_start
   610 00000504 C3                      	ret
   611                                  
   612                                  neg_cl:
   613 00000505 F6D9                    	neg cl
   614 00000507 C3                      	ret
   615                                  
   616                                  aplicar_sn_cl:
   617 00000508 8A97[5D02]              	mov dl, byte[v_in_sn + bx]
   618 0000050C 80FA00                  	cmp dl, 0
   619 0000050F 75F4                    	jne neg_cl
   620 00000511 C3                      	ret
   621                                  
   622                                  set_cx_ax:
   623 00000512 89C1                    	mov cx, ax
   624 00000514 C3                      	ret
   625                                  
   626                                  set_cx_bx:
   627 00000515 89D9                    	mov cx, bx
   628 00000517 C3                      	ret
   629                                  
   630                                  min_ax_bx:			; MIN(AX, BX) -> CX
   631 00000518 39D8                    	cmp ax, bx
   632 0000051A 7CF6                    	jl set_cx_ax
   633 0000051C E9F6FF                  	jmp set_cx_bx
   634                                  
   635                                  max_ax_bx:			; MAX(AX, BX) -> CX
   636 0000051F 39D8                    	cmp ax, bx
   637 00000521 7FEF                    	jg set_cx_ax
   638 00000523 E9EFFF                  	jmp set_cx_bx
   639                                  
   640                                  ajustar_vout:
   641 00000526 C706[6200]0000          	mov word[contador], 0
   642                                  	loop_as_vout:
   643 0000052C 8B1E[6200]              		mov bx, word[contador]
   644 00000530 E82400                  		call set_sn_vout
   645 00000533 E83100                  		call set_mod_vout
   646                                  		; fim loop_as_vout
   647 00000536 FF06[6200]              		inc word[contador]
   648 0000053A 8B1E[6700]              		mov bx, word[qtd_pixels]
   649 0000053E 391E[6200]              		cmp word[contador], bx
   650 00000542 7CE8                    		jl loop_as_vout
   651 00000544 7400                    		je ret_ajustar_vout
   652                                  ret_ajustar_vout:
   653 00000546 C3                      	ret
   654                                  
   655                                  corrige_sn_vout_neg:
   656 00000547 C687[3908]01            	mov byte[v_out_sn + bx], 1
   657 0000054C 8B8F[5104]              	mov cx, word[v_out_mod + bx]
   658 00000550 F7D9                    	neg cx
   659 00000552 898F[5104]              	mov word[v_out_mod + bx], cx
   660 00000556 C3                      	ret
   661                                  
   662                                  set_sn_vout:
   663 00000557 81BF[5104]0000          	cmp word[v_out_mod + bx], 0
   664 0000055D 7CE8                    	jl corrige_sn_vout_neg
   665 0000055F 7D00                    	jnl set_sn_vout_pos
   666                                  
   667                                  set_sn_vout_pos:
   668 00000561 C687[3908]00            	mov byte[v_out_sn + bx], 0
   669 00000566 C3                      	ret
   670                                  
   671                                  set_mod_vout:
   672 00000567 30ED                    	xor ch, ch
   673 00000569 8B87[5104]              	mov ax, word[v_out_mod + bx]
   674 0000056D 8A0E[3B10]              	mov	cl, byte[f_select_div]
   675 00000571 BA0000                  	mov dx, 0
   676 00000574 F7F1                    	div cx
   677 00000576 8987[5104]              	mov word[v_out_mod + bx], ax
   678 0000057A C3                      	ret
   679                                  
   680                                  config_plotar_entrada:
   681                                  	;	Configurações para  a função plotar
   682 0000057B C706[6200]0000          	mov word[contador], 0
   683                                  	loop_config1:
   684 00000581 8B1E[6200]              		mov bx, word[contador]
   685 00000585 30E4                    		xor ah, ah
   686 00000587 8A87[6900]              		mov al, byte[v_in_mod + bx]
   687 0000058B 8987[2D0A]              		mov word[v_select_mod + bx], ax
   688 0000058F 8A87[5D02]              		mov al, byte[v_in_sn + bx]
   689 00000593 8887[150E]              		mov byte[v_select_sn + bx], al
   690 00000597 FF06[6200]              		inc word[contador]
   691 0000059B 3B1E[6700]              		cmp bx, word[qtd_pixels]
   692 0000059F 7CE0                    		jl loop_config1
   693 000005A1 C706[0910]6C01          	mov word[ponto_central], 364
   694 000005A7 C3                      	ret
   695                                  
   696                                  config_plotar_saida:
   697 000005A8 C706[6200]0000          	mov word[contador], 0
   698                                  	loop_config2:
   699 000005AE 8B1E[6200]              		mov bx, word[contador]
   700 000005B2 8B87[5104]              		mov ax, word[v_out_mod + bx]
   701 000005B6 8987[2D0A]              		mov word[v_select_mod + bx], ax
   702 000005BA 8A87[3908]              		mov al, byte[v_out_sn + bx]
   703 000005BE 8887[150E]              		mov byte[v_select_sn + bx], al
   704 000005C2 FF06[6200]              		inc word[contador]
   705 000005C6 3B1E[6700]              		cmp bx, word[qtd_pixels]
   706 000005CA 7CE2                    		jl loop_config2
   707 000005CC C706[0910]8500          	mov word[ponto_central], 133
   708 000005D2 C3                      	ret
   709                                  
   710                                  converte_str:
   711 000005D3 C606[5100]30            	mov byte[buffer], 30h
   712 000005D8 A0[5E00]                	mov al, byte[buffer + 13] ; anda 12 no vetor para ver o indice da potencia
   713 000005DB 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   714                                  	
   715                                  	;caso e02
   716 000005DD 3C02                    	cmp al, 2
   717 000005DF 7416                    	je calc_cem
   718                                  	
   719                                  	;caso e01
   720 000005E1 3C01                    	cmp al, 1
   721 000005E3 7450                    	je calc_dez
   722                                  	
   723                                  	;caso e00
   724 000005E5 30E4                    	xor ah,ah                 		; limpa ah
   725 000005E7 A0[5100]                	mov al, byte[buffer]
   726 000005EA 2C30                    	sub al, 30h               		; subtrai 30h do ASCII para saber o valor em decimal
   727                                  	
   728 000005EC 8B1E[6200]              	mov bx, word[contador]     		; pegamos o contador para incrementar na posicao do v_in_mod
   729 000005F0 0087[6900]              	add byte[v_in_mod+bx], al    ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   730 000005F4 E96800                  	jmp cvt_retorna
   731                                  
   732                                  calc_cem:
   733                                  	;lembrar de push e pop antes de multiplicar
   734 000005F7 50                      	push ax
   735 000005F8 52                      	push dx
   736                                  	
   737 000005F9 30E4                    	xor ah,ah                 ; limpa ah
   738 000005FB A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   739 000005FE 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   740 00000600 B96400                  	mov  cx, 100              ; cx = 100
   741 00000603 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   742                                  	
   743 00000605 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao da v_in_mod
   744 00000609 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" na "v_in_mod[]"
   745                                  
   746 0000060D 30E4                    	xor ah,ah                 ; limpa ah
   747 0000060F A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   748 00000612 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   749 00000614 B90A00                  	mov  cx, 10               ; cx = 10
   750 00000617 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   751                                  	
   752 00000619 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   753 0000061D 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   754                                  	
   755 00000621 30E4                    	xor ah,ah                 ; limpa ah
   756 00000623 A0[5500]                	mov al, byte[buffer+4]    ; al = ? (terceiro numero)
   757 00000626 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   758                                  	
   759 00000628 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   760 0000062C 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   761                                  
   762 00000630 5A                      	pop dx                 ; volta aos valores originais
   763 00000631 58                      	pop ax                 ; volta aos valores originais
   764 00000632 E92A00                  	jmp cvt_retorna
   765                                  	
   766                                  	
   767                                  calc_dez:
   768                                  	;lembrar de push e pop antes de multiplicar
   769 00000635 50                      	push ax
   770 00000636 52                      	push dx
   771                                  	
   772 00000637 30E4                    	xor ah,ah                 ; limpa ah
   773 00000639 A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   774 0000063C 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   775 0000063E B90A00                  	mov  cx, 10               ; cx = 10
   776 00000641 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   777                                  	
   778 00000643 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   779 00000647 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   780                                  
   781 0000064B 30E4                    	xor ah,ah                 ; limpa ah
   782 0000064D A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   783 00000650 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   784                                  	
   785 00000652 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   786 00000656 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   787                                  	
   788 0000065A 5A                      	pop dx                    ; volta aos valores originais
   789 0000065B 58                      	pop ax                    ; volta aos valores originais
   790 0000065C E90000                  	jmp cvt_retorna
   791                                  
   792                                  cvt_retorna:
   793 0000065F C3                      	ret
   794                                  
   795                                  plotar_vetor:
   796 00000660 8B0E[6700]              	mov cx, word[qtd_pixels]
   797 00000664 81E90100                	sub cx, 1
   798 00000668 C706[6200]0000          	mov word[contador], 0
   799 0000066E C606[0000]0F            	mov	byte[cor],branco_intenso
   800                                  
   801                                  plot_num:
   802 00000673 A1[6200]                	mov		ax, word[contador]
   803 00000676 058C00                  	add		ax, 140
   804 00000679 50                      	push	ax
   805 0000067A E80F00                  	call 	ajuste_ax
   806 0000067D 50                      	push	ax
   807 0000067E B80100                  	mov 	ax, 1
   808 00000681 50                      	push	ax
   809 00000682 E8C601                  	call	full_circle
   810 00000685 FF06[6200]              	inc word[contador]
   811 00000689 E2E8                    	loop plot_num
   812 0000068B C3                      	ret
   813                                  
   814                                  ajuste_ax:
   815 0000068C 8B1E[6200]              	mov bx, word[contador]
   816 00000690 B80000                  	mov ax, 0
   817 00000693 8A87[150E]              	mov al, byte[v_select_sn + bx]
   818 00000697 3C00                    	cmp al, 0
   819 00000699 7402                    	je set_ax_positivo
   820 0000069B 750A                    	jne set_ax_negativo
   821                                  
   822                                  set_ax_positivo:
   823 0000069D A1[0910]                	mov ax, word[ponto_central]
   824 000006A0 8B97[2D0A]              	mov dx, word[v_select_mod + bx]
   825 000006A4 00D0                    	add al, dl
   826 000006A6 C3                      	ret
   827                                  
   828                                  set_ax_negativo:
   829 000006A7 A1[0910]                	mov ax, word[ponto_central]
   830 000006AA 8B97[2D0A]              	mov dx, word[v_select_mod + bx]
   831 000006AE 28D0                    	sub al, dl
   832 000006B0 C3                      	ret
   833                                  
   834                                  ;	imprime, em decimal, o valor númerico de AX 
   835                                  print_dw_number:
   836                                      ;initialize count
   837 000006B1 53                      	push bx
   838 000006B2 51                      	push cx
   839 000006B3 52                      	push dx
   840                                  
   841 000006B4 C706[6200]0000          	mov word[contador], 0
   842 000006BA B90000                      mov cx,0
   843 000006BD BA0000                      mov dx,0
   844                                      loop_print_dw_number:
   845 000006C0 3D0000                          cmp ax,0
   846 000006C3 740C                            je print1     	; if ax is zero
   847 000006C5 BB0A00                          mov bx,10     	; initialize bx to 10  
   848 000006C8 F7F3                            div bx    		; extract the last digit             
   849 000006CA 52                              push dx    		; push it in the stack         
   850 000006CB 41                              inc cx   		; increment the count          
   851 000006CC 31D2                            xor dx,dx		; set dx to 0
   852 000006CE E9EFFF                          jmp loop_print_dw_number
   853                                      print1:
   854 000006D1 81F90000                        cmp cx,0
   855 000006D5 7436                            je volta_print	; if cx is zero
   856 000006D7 5A                              pop dx			; pop the top of stack
   857                                  
   858                                          ;add 48 so that it
   859                                          ;represents the ASCII
   860                                          ;value of digits
   861 000006D8 81C23000                        add dx, 48
   862                                  
   863                                  		; 	imprime DX
   864 000006DC 50                      		push ax
   865 000006DD 53                      		push bx
   866 000006DE 51                      		push cx
   867 000006DF 89D0                    		mov ax, dx
   868 000006E1 52                      		push dx
   869                                  
   870 000006E2 B607                    		mov     	dh, 7			;linha 0-29
   871 000006E4 B206                    		mov     	dl, 6			;coluna 0-79
   872 000006E6 C606[0000]0F            		mov			byte[cor], branco_intenso
   873 000006EB 8B1E[6200]              		mov			bx, word[contador]
   874 000006EF 00DA                    		add			dl, bl
   875                                  
   876 000006F1 E81D00                  		call	cursor
   877 000006F4 E83100                  		call	caracter
   878 000006F7 FEC2                    		inc		dl
   879 000006F9 E81500                  		call	cursor
   880 000006FC 88E0                    		mov     al, ah
   881 000006FE E82700                  		call	caracter
   882                                  
   883 00000701 5A                      		pop dx
   884 00000702 59                      		pop cx
   885 00000703 5B                      		pop bx
   886 00000704 58                      		pop ax
   887                                  		; 	FIM imprime DX
   888                                  
   889 00000705 FF06[6200]              		inc word[contador]
   890 00000709 49                              dec cx			;decrease the count
   891 0000070A E9C4FF                          jmp print1
   892                                  
   893                                  volta_print:
   894 0000070D 5A                      	pop dx
   895 0000070E 59                      	pop cx
   896 0000070F 5B                      	pop bx
   897 00000710 C3                      	ret
   898                                  
   899                                  ;***************************************************************************
   900                                  ;
   901                                  ;   fun��o cursor
   902                                  ;
   903                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   904                                  cursor:
   905 00000711 9C                      		pushf
   906 00000712 50                      		push 		ax
   907 00000713 53                      		push 		bx
   908 00000714 51                      		push		cx
   909 00000715 52                      		push		dx
   910 00000716 56                      		push		si
   911 00000717 57                      		push		di
   912 00000718 55                      		push		bp
   913 00000719 B402                    		mov     	ah,2
   914 0000071B B700                    		mov     	bh,0
   915 0000071D CD10                    		int     	10h
   916 0000071F 5D                      		pop		bp
   917 00000720 5F                      		pop		di
   918 00000721 5E                      		pop		si
   919 00000722 5A                      		pop		dx
   920 00000723 59                      		pop		cx
   921 00000724 5B                      		pop		bx
   922 00000725 58                      		pop		ax
   923 00000726 9D                      		popf
   924 00000727 C3                      		ret
   925                                  ;_____________________________________________________________________________
   926                                  ;
   927                                  ;   fun��o caracter escrito na posi��o do cursor
   928                                  ;
   929                                  ; al= caracter a ser escrito
   930                                  ; cor definida na variavel cor
   931                                  caracter:
   932 00000728 9C                      		pushf
   933 00000729 50                      		push 		ax
   934 0000072A 53                      		push 		bx
   935 0000072B 51                      		push		cx
   936 0000072C 52                      		push		dx
   937 0000072D 56                      		push		si
   938 0000072E 57                      		push		di
   939 0000072F 55                      		push		bp
   940 00000730 B409                        	mov     	ah,9
   941 00000732 B700                        	mov     	bh,0
   942 00000734 B90100                      	mov     	cx,1
   943 00000737 8A1E[0000]                 		mov     	bl,[cor]
   944 0000073B CD10                        	int     	10h
   945 0000073D 5D                      		pop		bp
   946 0000073E 5F                      		pop		di
   947 0000073F 5E                      		pop		si
   948 00000740 5A                      		pop		dx
   949 00000741 59                      		pop		cx
   950 00000742 5B                      		pop		bx
   951 00000743 58                      		pop		ax
   952 00000744 9D                      		popf
   953 00000745 C3                      		ret
   954                                  ;_____________________________________________________________________________
   955                                  ;
   956                                  ;   fun��o plot_xy
   957                                  ;
   958                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   959                                  ; cor definida na variavel cor
   960                                  plot_xy:
   961 00000746 55                      		push		bp
   962 00000747 89E5                    		mov		bp,sp
   963 00000749 9C                      		pushf
   964 0000074A 50                      		push 		ax
   965 0000074B 53                      		push 		bx
   966 0000074C 51                      		push		cx
   967 0000074D 52                      		push		dx
   968 0000074E 56                      		push		si
   969 0000074F 57                      		push		di
   970 00000750 B40C                    	    mov     	ah,0ch
   971 00000752 A0[0000]                	    mov     	al,[cor]
   972 00000755 B700                    	    mov     	bh,0
   973 00000757 BADF01                  	    mov     	dx,479
   974 0000075A 2B5604                  		sub		dx,[bp+4]
   975 0000075D 8B4E06                  	    mov     	cx,[bp+6]
   976 00000760 CD10                    	    int     	10h
   977 00000762 5F                      		pop		di
   978 00000763 5E                      		pop		si
   979 00000764 5A                      		pop		dx
   980 00000765 59                      		pop		cx
   981 00000766 5B                      		pop		bx
   982 00000767 58                      		pop		ax
   983 00000768 9D                      		popf
   984 00000769 5D                      		pop		bp
   985 0000076A C20400                  		ret		4
   986                                  ;_____________________________________________________________________________
   987                                  ;    fun��o circle
   988                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   989                                  ; cor definida na variavel cor
   990                                  circle:
   991 0000076D 55                      	push 	bp
   992 0000076E 89E5                    	mov	 	bp,sp
   993 00000770 9C                      	pushf                        ;coloca os flags na pilha
   994 00000771 50                      	push 	ax
   995 00000772 53                      	push 	bx
   996 00000773 51                      	push	cx
   997 00000774 52                      	push	dx
   998 00000775 56                      	push	si
   999 00000776 57                      	push	di
  1000                                  	
  1001 00000777 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1002 0000077A 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1003 0000077D 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1004                                  	
  1005 00000780 89DA                    	mov 	dx,bx	
  1006 00000782 01CA                    	add		dx,cx       ;ponto extremo superior
  1007 00000784 50                      	push    ax			
  1008 00000785 52                      	push	dx
  1009 00000786 E8BDFF                  	call plot_xy
  1010                                  	
  1011 00000789 89DA                    	mov		dx,bx
  1012 0000078B 29CA                    	sub		dx,cx       ;ponto extremo inferior
  1013 0000078D 50                      	push    ax			
  1014 0000078E 52                      	push	dx
  1015 0000078F E8B4FF                  	call plot_xy
  1016                                  	
  1017 00000792 89C2                    	mov 	dx,ax	
  1018 00000794 01CA                    	add		dx,cx       ;ponto extremo direita
  1019 00000796 52                      	push    dx			
  1020 00000797 53                      	push	bx
  1021 00000798 E8ABFF                  	call plot_xy
  1022                                  	
  1023 0000079B 89C2                    	mov		dx,ax
  1024 0000079D 29CA                    	sub		dx,cx       ;ponto extremo esquerda
  1025 0000079F 52                      	push    dx			
  1026 000007A0 53                      	push	bx
  1027 000007A1 E8A2FF                  	call plot_xy
  1028                                  		
  1029 000007A4 89CF                    	mov		di,cx
  1030 000007A6 81EF0100                	sub		di,1	 ;di=r-1
  1031 000007AA BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1032                                  	
  1033                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1034                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1035                                  ;valores positivos para d
  1036                                  
  1037                                  stay:				;loop
  1038 000007AD 89FE                    	mov		si,di
  1039 000007AF 81FE0000                	cmp		si,0
  1040 000007B3 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1041 000007B5 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1042 000007B7 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1043 000007B9 81C60300                	add		si,3
  1044 000007BD 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1045 000007BF 42                      	inc		dx		;incrementa dx
  1046 000007C0 E90E00                  	jmp		plotar
  1047                                  inf:	
  1048 000007C3 89D6                    	mov		si,dx
  1049 000007C5 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1050 000007C7 D1E6                    	sal		si,1
  1051 000007C9 81C60500                	add		si,5
  1052 000007CD 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1053 000007CF 42                      	inc		dx		;incrementa x (dx)
  1054 000007D0 49                      	dec		cx		;decrementa y (cx)
  1055                                  	
  1056                                  plotar:	
  1057 000007D1 89D6                    	mov		si,dx
  1058 000007D3 01C6                    	add		si,ax
  1059 000007D5 56                      	push    si			;coloca a abcisa x+xc na pilha
  1060 000007D6 89CE                    	mov		si,cx
  1061 000007D8 01DE                    	add		si,bx
  1062 000007DA 56                      	push    si			;coloca a ordenada y+yc na pilha
  1063 000007DB E868FF                  	call plot_xy		;toma conta do segundo octante
  1064 000007DE 89C6                    	mov		si,ax
  1065 000007E0 01D6                    	add		si,dx
  1066 000007E2 56                      	push    si			;coloca a abcisa xc+x na pilha
  1067 000007E3 89DE                    	mov		si,bx
  1068 000007E5 29CE                    	sub		si,cx
  1069 000007E7 56                      	push    si			;coloca a ordenada yc-y na pilha
  1070 000007E8 E85BFF                  	call plot_xy		;toma conta do s�timo octante
  1071 000007EB 89C6                    	mov		si,ax
  1072 000007ED 01CE                    	add		si,cx
  1073 000007EF 56                      	push    si			;coloca a abcisa xc+y na pilha
  1074 000007F0 89DE                    	mov		si,bx
  1075 000007F2 01D6                    	add		si,dx
  1076 000007F4 56                      	push    si			;coloca a ordenada yc+x na pilha
  1077 000007F5 E84EFF                  	call plot_xy		;toma conta do segundo octante
  1078 000007F8 89C6                    	mov		si,ax
  1079 000007FA 01CE                    	add		si,cx
  1080 000007FC 56                      	push    si			;coloca a abcisa xc+y na pilha
  1081 000007FD 89DE                    	mov		si,bx
  1082 000007FF 29D6                    	sub		si,dx
  1083 00000801 56                      	push    si			;coloca a ordenada yc-x na pilha
  1084 00000802 E841FF                  	call plot_xy		;toma conta do oitavo octante
  1085 00000805 89C6                    	mov		si,ax
  1086 00000807 29D6                    	sub		si,dx
  1087 00000809 56                      	push    si			;coloca a abcisa xc-x na pilha
  1088 0000080A 89DE                    	mov		si,bx
  1089 0000080C 01CE                    	add		si,cx
  1090 0000080E 56                      	push    si			;coloca a ordenada yc+y na pilha
  1091 0000080F E834FF                  	call plot_xy		;toma conta do terceiro octante
  1092 00000812 89C6                    	mov		si,ax
  1093 00000814 29D6                    	sub		si,dx
  1094 00000816 56                      	push    si			;coloca a abcisa xc-x na pilha
  1095 00000817 89DE                    	mov		si,bx
  1096 00000819 29CE                    	sub		si,cx
  1097 0000081B 56                      	push    si			;coloca a ordenada yc-y na pilha
  1098 0000081C E827FF                  	call plot_xy		;toma conta do sexto octante
  1099 0000081F 89C6                    	mov		si,ax
  1100 00000821 29CE                    	sub		si,cx
  1101 00000823 56                      	push    si			;coloca a abcisa xc-y na pilha
  1102 00000824 89DE                    	mov		si,bx
  1103 00000826 29D6                    	sub		si,dx
  1104 00000828 56                      	push    si			;coloca a ordenada yc-x na pilha
  1105 00000829 E81AFF                  	call plot_xy		;toma conta do quinto octante
  1106 0000082C 89C6                    	mov		si,ax
  1107 0000082E 29CE                    	sub		si,cx
  1108 00000830 56                      	push    si			;coloca a abcisa xc-y na pilha
  1109 00000831 89DE                    	mov		si,bx
  1110 00000833 01D6                    	add		si,dx
  1111 00000835 56                      	push    si			;coloca a ordenada yc-x na pilha
  1112 00000836 E80DFF                  	call plot_xy		;toma conta do quarto octante
  1113                                  	
  1114 00000839 39D1                    	cmp		cx,dx
  1115 0000083B 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1116 0000083D E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  1117                                  
  1118                                  
  1119                                  fim_circle:
  1120 00000840 5F                      	pop		di
  1121 00000841 5E                      	pop		si
  1122 00000842 5A                      	pop		dx
  1123 00000843 59                      	pop		cx
  1124 00000844 5B                      	pop		bx
  1125 00000845 58                      	pop		ax
  1126 00000846 9D                      	popf
  1127 00000847 5D                      	pop		bp
  1128 00000848 C20600                  	ret		6
  1129                                  ;-----------------------------------------------------------------------------
  1130                                  ;    fun��o full_circle
  1131                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1132                                  ; cor definida na variavel cor					  
  1133                                  full_circle:
  1134 0000084B 55                      	push 	bp
  1135 0000084C 89E5                    	mov	 	bp,sp
  1136 0000084E 9C                      	pushf                        ;coloca os flags na pilha
  1137 0000084F 50                      	push 	ax
  1138 00000850 53                      	push 	bx
  1139 00000851 51                      	push	cx
  1140 00000852 52                      	push	dx
  1141 00000853 56                      	push	si
  1142 00000854 57                      	push	di
  1143                                  
  1144 00000855 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1145 00000858 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1146 0000085B 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1147                                  	
  1148 0000085E 89DE                    	mov		si,bx
  1149 00000860 29CE                    	sub		si,cx
  1150 00000862 50                      	push    ax			;coloca xc na pilha			
  1151 00000863 56                      	push	si			;coloca yc-r na pilha
  1152 00000864 89DE                    	mov		si,bx
  1153 00000866 01CE                    	add		si,cx
  1154 00000868 50                      	push	ax		;coloca xc na pilha
  1155 00000869 56                      	push	si		;coloca yc+r na pilha
  1156 0000086A E89B00                  	call line
  1157                                  	
  1158                                  		
  1159 0000086D 89CF                    	mov		di,cx
  1160 0000086F 81EF0100                	sub		di,1	 ;di=r-1
  1161 00000873 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1162                                  	
  1163                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1164                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1165                                  ;valores positivos para d
  1166                                  
  1167                                  stay_full:				;loop
  1168 00000876 89FE                    	mov		si,di
  1169 00000878 81FE0000                	cmp		si,0
  1170 0000087C 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1171 0000087E 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1172 00000880 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1173 00000882 81C60300                	add		si,3
  1174 00000886 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1175 00000888 42                      	inc		dx		;incrementa dx
  1176 00000889 E90E00                  	jmp		plotar_full
  1177                                  inf_full:	
  1178 0000088C 89D6                    	mov		si,dx
  1179 0000088E 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1180 00000890 D1E6                    	sal		si,1
  1181 00000892 81C60500                	add		si,5
  1182 00000896 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1183 00000898 42                      	inc		dx		;incrementa x (dx)
  1184 00000899 49                      	dec		cx		;decrementa y (cx)
  1185                                  	
  1186                                  plotar_full:	
  1187 0000089A 89C6                    	mov		si,ax
  1188 0000089C 01CE                    	add		si,cx
  1189 0000089E 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1190 0000089F 89DE                    	mov		si,bx
  1191 000008A1 29D6                    	sub		si,dx
  1192 000008A3 56                      	push    si		;coloca a ordenada yc-x na pilha
  1193 000008A4 89C6                    	mov		si,ax
  1194 000008A6 01CE                    	add		si,cx
  1195 000008A8 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1196 000008A9 89DE                    	mov		si,bx
  1197 000008AB 01D6                    	add		si,dx
  1198 000008AD 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1199 000008AE E85700                  	call 	line
  1200                                  	
  1201 000008B1 89C6                    	mov		si,ax
  1202 000008B3 01D6                    	add		si,dx
  1203 000008B5 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1204 000008B6 89DE                    	mov		si,bx
  1205 000008B8 29CE                    	sub		si,cx
  1206 000008BA 56                      	push    si		;coloca a ordenada yc-y na pilha
  1207 000008BB 89C6                    	mov		si,ax
  1208 000008BD 01D6                    	add		si,dx
  1209 000008BF 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1210 000008C0 89DE                    	mov		si,bx
  1211 000008C2 01CE                    	add		si,cx
  1212 000008C4 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1213 000008C5 E84000                  	call	line
  1214                                  	
  1215 000008C8 89C6                    	mov		si,ax
  1216 000008CA 29D6                    	sub		si,dx
  1217 000008CC 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1218 000008CD 89DE                    	mov		si,bx
  1219 000008CF 29CE                    	sub		si,cx
  1220 000008D1 56                      	push    si		;coloca a ordenada yc-y na pilha
  1221 000008D2 89C6                    	mov		si,ax
  1222 000008D4 29D6                    	sub		si,dx
  1223 000008D6 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1224 000008D7 89DE                    	mov		si,bx
  1225 000008D9 01CE                    	add		si,cx
  1226 000008DB 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1227 000008DC E82900                  	call	line
  1228                                  	
  1229 000008DF 89C6                    	mov		si,ax
  1230 000008E1 29CE                    	sub		si,cx
  1231 000008E3 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1232 000008E4 89DE                    	mov		si,bx
  1233 000008E6 29D6                    	sub		si,dx
  1234 000008E8 56                      	push    si		;coloca a ordenada yc-x na pilha
  1235 000008E9 89C6                    	mov		si,ax
  1236 000008EB 29CE                    	sub		si,cx
  1237 000008ED 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1238 000008EE 89DE                    	mov		si,bx
  1239 000008F0 01D6                    	add		si,dx
  1240 000008F2 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1241 000008F3 E81200                  	call	line
  1242                                  	
  1243 000008F6 39D1                    	cmp		cx,dx
  1244 000008F8 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1245 000008FA E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1246                                  	
  1247                                  	
  1248                                  fim_full_circle:
  1249 000008FD 5F                      	pop		di
  1250 000008FE 5E                      	pop		si
  1251 000008FF 5A                      	pop		dx
  1252 00000900 59                      	pop		cx
  1253 00000901 5B                      	pop		bx
  1254 00000902 58                      	pop		ax
  1255 00000903 9D                      	popf
  1256 00000904 5D                      	pop		bp
  1257 00000905 C20600                  	ret		6
  1258                                  ;-----------------------------------------------------------------------------
  1259                                  ;
  1260                                  ;   fun��o line
  1261                                  ;
  1262                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1263                                  line:
  1264 00000908 55                      		push		bp
  1265 00000909 89E5                    		mov		bp,sp
  1266 0000090B 9C                      		pushf                        ;coloca os flags na pilha
  1267 0000090C 50                      		push 		ax
  1268 0000090D 53                      		push 		bx
  1269 0000090E 51                      		push		cx
  1270 0000090F 52                      		push		dx
  1271 00000910 56                      		push		si
  1272 00000911 57                      		push		di
  1273 00000912 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1274 00000915 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1275 00000918 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1276 0000091B 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1277 0000091E 39C8                    		cmp		ax,cx
  1278 00000920 7408                    		je		line2
  1279 00000922 721C                    		jb		line1
  1280 00000924 91                      		xchg		ax,cx
  1281 00000925 87DA                    		xchg		bx,dx
  1282 00000927 E91600                  		jmp		line1
  1283                                  line2:		; deltax=0
  1284 0000092A 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1285 0000092C 7202                    		jb		line3
  1286 0000092E 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1287                                  line3:	; dx > bx
  1288 00000930 50                      		push		ax
  1289 00000931 53                      		push		bx
  1290 00000932 E811FE                  		call 		plot_xy
  1291 00000935 39D3                    		cmp		bx,dx
  1292 00000937 7503                    		jne		line31
  1293 00000939 E9C600                  		jmp		fim_line
  1294 0000093C 43                      line31:		inc		bx
  1295 0000093D E9F0FF                  		jmp		line3
  1296                                  ;deltax <>0
  1297                                  line1:
  1298                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1299                                  	; cx > ax
  1300 00000940 51                      		push		cx
  1301 00000941 29C1                    		sub		cx,ax
  1302 00000943 890E[0600]              		mov		[deltax],cx
  1303 00000947 59                      		pop		cx
  1304 00000948 52                      		push		dx
  1305 00000949 29DA                    		sub		dx,bx
  1306 0000094B 7702                    		ja		line32
  1307 0000094D F7DA                    		neg		dx
  1308                                  line32:		
  1309 0000094F 8916[0800]              		mov		[deltay],dx
  1310 00000953 5A                      		pop		dx
  1311                                  
  1312 00000954 50                      		push		ax
  1313 00000955 A1[0600]                		mov		ax,[deltax]
  1314 00000958 3B06[0800]              		cmp		ax,[deltay]
  1315 0000095C 58                      		pop		ax
  1316 0000095D 724D                    		jb		line5
  1317                                  
  1318                                  	; cx > ax e deltax>deltay
  1319 0000095F 51                      		push		cx
  1320 00000960 29C1                    		sub		cx,ax
  1321 00000962 890E[0600]              		mov		[deltax],cx
  1322 00000966 59                      		pop		cx
  1323 00000967 52                      		push		dx
  1324 00000968 29DA                    		sub		dx,bx
  1325 0000096A 8916[0800]              		mov		[deltay],dx
  1326 0000096E 5A                      		pop		dx
  1327                                  
  1328 0000096F 89C6                    		mov		si,ax
  1329                                  line4:
  1330 00000971 50                      		push		ax
  1331 00000972 52                      		push		dx
  1332 00000973 56                      		push		si
  1333 00000974 29C6                    		sub		si,ax	;(x-x1)
  1334 00000976 A1[0800]                		mov		ax,[deltay]
  1335 00000979 F7EE                    		imul		si
  1336 0000097B 8B36[0600]              		mov		si,[deltax]		;arredondar
  1337 0000097F D1EE                    		shr		si,1
  1338                                  ; se numerador (DX)>0 soma se <0 subtrai
  1339 00000981 81FA0000                		cmp		dx,0
  1340 00000985 7C09                    		jl		ar1
  1341 00000987 01F0                    		add		ax,si
  1342 00000989 81D20000                		adc		dx,0
  1343 0000098D E90600                  		jmp		arc1
  1344 00000990 29F0                    ar1:		sub		ax,si
  1345 00000992 81DA0000                		sbb		dx,0
  1346                                  arc1:
  1347 00000996 F73E[0600]              		idiv		word [deltax]
  1348 0000099A 01D8                    		add		ax,bx
  1349 0000099C 5E                      		pop		si
  1350 0000099D 56                      		push		si
  1351 0000099E 50                      		push		ax
  1352 0000099F E8A4FD                  		call		plot_xy
  1353 000009A2 5A                      		pop		dx
  1354 000009A3 58                      		pop		ax
  1355 000009A4 39CE                    		cmp		si,cx
  1356 000009A6 745A                    		je		fim_line
  1357 000009A8 46                      		inc		si
  1358 000009A9 E9C5FF                  		jmp		line4
  1359                                  
  1360 000009AC 39D3                    line5:		cmp		bx,dx
  1361 000009AE 7203                    		jb 		line7
  1362 000009B0 91                      		xchg		ax,cx
  1363 000009B1 87DA                    		xchg		bx,dx
  1364                                  line7:
  1365 000009B3 51                      		push		cx
  1366 000009B4 29C1                    		sub		cx,ax
  1367 000009B6 890E[0600]              		mov		[deltax],cx
  1368 000009BA 59                      		pop		cx
  1369 000009BB 52                      		push		dx
  1370 000009BC 29DA                    		sub		dx,bx
  1371 000009BE 8916[0800]              		mov		[deltay],dx
  1372 000009C2 5A                      		pop		dx
  1373 000009C3 89DE                    		mov		si,bx
  1374                                  line6:
  1375 000009C5 52                      		push		dx
  1376 000009C6 56                      		push		si
  1377 000009C7 50                      		push		ax
  1378 000009C8 29DE                    		sub		si,bx	;(y-y1)
  1379 000009CA A1[0600]                		mov		ax,[deltax]
  1380 000009CD F7EE                    		imul		si
  1381 000009CF 8B36[0800]              		mov		si,[deltay]		;arredondar
  1382 000009D3 D1EE                    		shr		si,1
  1383                                  ; se numerador (DX)>0 soma se <0 subtrai
  1384 000009D5 81FA0000                		cmp		dx,0
  1385 000009D9 7C09                    		jl		ar2
  1386 000009DB 01F0                    		add		ax,si
  1387 000009DD 81D20000                		adc		dx,0
  1388 000009E1 E90600                  		jmp		arc2
  1389 000009E4 29F0                    ar2:		sub		ax,si
  1390 000009E6 81DA0000                		sbb		dx,0
  1391                                  arc2:
  1392 000009EA F73E[0800]              		idiv		word [deltay]
  1393 000009EE 89C7                    		mov		di,ax
  1394 000009F0 58                      		pop		ax
  1395 000009F1 01C7                    		add		di,ax
  1396 000009F3 5E                      		pop		si
  1397 000009F4 57                      		push		di
  1398 000009F5 56                      		push		si
  1399 000009F6 E84DFD                  		call		plot_xy
  1400 000009F9 5A                      		pop		dx
  1401 000009FA 39D6                    		cmp		si,dx
  1402 000009FC 7404                    		je		fim_line
  1403 000009FE 46                      		inc		si
  1404 000009FF E9C3FF                  		jmp		line6
  1405                                  
  1406                                  fim_line:
  1407 00000A02 5F                      		pop		di
  1408 00000A03 5E                      		pop		si
  1409 00000A04 5A                      		pop		dx
  1410 00000A05 59                      		pop		cx
  1411 00000A06 5B                      		pop		bx
  1412 00000A07 58                      		pop		ax
  1413 00000A08 9D                      		popf
  1414 00000A09 5D                      		pop		bp
  1415 00000A0A C20800                  		ret		8
  1416                                  ;*******************************************************************
  1417                                  segment data
  1418                                  
  1419                                  
  1420 00000000 0F                      cor		db		branco_intenso
  1421                                  
  1422                                  ;	I R G B COR
  1423                                  ;	0 0 0 0 preto
  1424                                  ;	0 0 0 1 azul
  1425                                  ;	0 0 1 0 verde
  1426                                  ;	0 0 1 1 cyan
  1427                                  ;	0 1 0 0 vermelho
  1428                                  ;	0 1 0 1 magenta
  1429                                  ;	0 1 1 0 marrom
  1430                                  ;	0 1 1 1 branco
  1431                                  ;	1 0 0 0 cinza
  1432                                  ;	1 0 0 1 azul claro
  1433                                  ;	1 0 1 0 verde claro
  1434                                  ;	1 0 1 1 cyan claro
  1435                                  ;	1 1 0 0 rosa
  1436                                  ;	1 1 0 1 magenta claro
  1437                                  ;	1 1 1 0 amarelo
  1438                                  ;	1 1 1 1 branco intenso
  1439                                  
  1440                                  preto			equ		0
  1441                                  azul			equ		1
  1442                                  verde			equ		2
  1443                                  cyan			equ		3
  1444                                  vermelho		equ		4
  1445                                  magenta			equ		5
  1446                                  marrom			equ		6
  1447                                  branco			equ		7
  1448                                  cinza			equ		8
  1449                                  azul_claro		equ		9
  1450                                  verde_claro		equ		10
  1451                                  cyan_claro		equ		11
  1452                                  rosa			equ		12
  1453                                  magenta_claro	equ		13
  1454                                  amarelo			equ		14
  1455                                  branco_intenso	equ		15
  1456                                  
  1457 00000001 00                      modo_anterior	db		0
  1458 00000002 0000                    linha   		dw  	0
  1459 00000004 0000                    coluna  		dw  	0
  1460 00000006 0000                    deltax			dw		0
  1461 00000008 0000                    deltay			dw		0	
  1462 0000000A 557369656C20466572-     nome_aluno    	db  	'Usiel Ferreira Lopes Junior'
  1463 00000013 7265697261204C6F70-
  1464 0000001C 6573204A756E696F72 
  1465 00000025 4162726972              abrir_str    	db  	'Abrir'
  1466 0000002A 4649525F31              fir1_str    	db  	'FIR_1'
  1467 0000002F 4649525F32              fir2_str    	db  	'FIR_2'
  1468 00000034 4649525F33              fir3_str    	db  	'FIR_3'
  1469 00000039 53616972                sair_str    	db  	'Sair'
  1470 0000003D 3E203E203E              seta_str    	db  	'> > >'
  1471                                  
  1472 00000042 73696E616C2E747874-     filename 		db 		'sinal.txt',0
  1473 0000004B 00                 
  1474 0000004C 0000                    handle 			dw 		0
  1475 0000004E 00                      aberto 			db 		0
  1476 0000004F 0000                    qtd_lida 		dw 		0
  1477                                  
  1478 00000051 <res 00000010>          buffer 			resb 	16		
  1479 00000061 24                      				db 		'$'
  1480                                  
  1481 00000062 0000                    contador 		dw 		0
  1482 00000064 0000                    contador2 		dw 		0
  1483 00000066 00                      sinal 			db 		0
  1484 00000067 F401                    qtd_pixels  	dw 		500
  1485                                  
  1486 00000069 00<rept>                v_in_mod 		times 	500 	db 	0  	; Vetor Módulo
  1487 0000025D 00<rept>                v_in_sn 		times 	500		db 	0  	; Vetor Sinal
  1488                                  
  1489 00000451 0000<rept>              v_out_mod 		times 	500		dw 	0  	; Vetor Módulo
  1490 00000839 00<rept>                v_out_sn 		times 	500		db 	0  	; Vetor Saída
  1491                                  
  1492 00000A2D 0000<rept>              v_select_mod 	times 	500		dw 	0  	; Vetor Módulo
  1493 00000E15 00<rept>                v_select_sn		times 	500		db 	0  	; Vetor Saída
  1494                                  
  1495 00001009 0000                    ponto_central	dw 		0
  1496                                  
  1497                                  ; 	Obs o tamanho de v_out pode ir até  len(v_in) + len(filtro) - 1,
  1498                                  ; 	neste caso 510, mascomo vamos plotar apenas 500 pixels 
  1499                                  ;	não faz sentido realizar o calculo de convolução até o final.
  1500                                  
  1501 0000100B 0B                      filtros_len 	db 		11
  1502 0000100C 010101010101010101-     filtro1 		db 		1,1,1,1,1,1,1,1,1,1,1
  1503 00001015 0101               
  1504 00001017 0B                      filtro1_div		db  	11
  1505                                  
  1506 00001018 010101010202020101-     filtro2 		db 		1,1,1,1,2,2,2,1,1,1,1
  1507 00001021 0101               
  1508 00001023 0E                      filtro2_div		db  	14
  1509                                  
  1510 00001024 01010202FDFDFD0202-     filtro3 		db 		1,1,2,2,-3,-3,-3,2,2,1,1
  1511 0000102D 0101               
  1512 0000102F 09                      filtro3_div		db  	9
  1513                                  
  1514 00001030 00<rept>                f_select		times 	11		db 	0
  1515 0000103B 00                      f_select_div	db		0
  1516                                  
  1517 0000103C 0000                    x_start			dw		0
  1518 0000103E 0000                    x_end			dw		0
  1519 00001040 0000                    h_start			dw		0
  1520                                  
  1521                                  ;*************************************************************************
  1522                                  segment stack stack
  1523 00000000 <res 00000200>              resb 		512
  1524                                  stacktop:
  1525                                  
  1526                                  
