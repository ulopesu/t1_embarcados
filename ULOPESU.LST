     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                	mov 		ax,data
     8 00000003 8ED8                    	mov 		ds,ax
     9 00000005 B8[0000]                	mov 		ax,stack
    10 00000008 8ED0                    	mov 		ss,ax
    11 0000000A BC[0002]                	mov 		sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                    	mov  		ah,0Fh
    15 0000000F CD10                    	int  		10h
    16 00000011 A2[0100]                	mov  		[modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                    	mov     	al,12h
    20 00000016 B400                    	mov     	ah,0
    21 00000018 CD10                    	int     	10h
    22 0000001A E80300                  	call desenha_layout
    23 0000001D E99202                  	jmp espera_mouse
    24                                  	; jmp read_file			APENAS PARA TESTAR DIRETAMENTE A FUNÇÃO
    25                                  
    26                                  desenha_layout:
    27                                  ; desenha divisorias da tela 
    28                                  	; escreve nome
    29 00000020 B91B00                  	mov     	cx,27			;n�mero de caracteres
    30 00000023 BB0000                  	mov     	bx,0
    31 00000026 B61D                    	mov     	dh,29			;linha 0-29
    32 00000028 B223                    	mov     	dl,35			;coluna 0-79
    33 0000002A C606[0000]0A            	mov		byte[cor], verde_claro
    34                                  	l_w_name:
    35 0000002F E84F06                  		call	cursor
    36 00000032 8A87[0A00]              		mov     al,[bx+nome_aluno]
    37 00000036 E85F06                  		call	caracter
    38 00000039 43                      		inc     bx			;proximo caracter
    39 0000003A FEC2                    		inc		dl			;avanca a coluna
    40 0000003C E2F1                    		loop    l_w_name
    41                                  
    42                                  	; escreve sair
    43 0000003E B90400                  	mov     	cx,4			;n�mero de caracteres
    44 00000041 BB0000                  	mov     	bx,0
    45 00000044 B61B                    	mov     	dh,27			;linha 0-29
    46 00000046 B206                    	mov     	dl,6			;coluna 0-79
    47 00000048 C606[0000]0C            	mov		byte[cor], rosa
    48                                  	l_w_sair:
    49 0000004D E83106                  		call	cursor
    50 00000050 8A87[3900]              		mov     al,[bx+sair_str]
    51 00000054 E84106                  		call	caracter
    52 00000057 43                      		inc     bx			;proximo caracter
    53 00000058 FEC2                    		inc		dl			;avanca a coluna
    54 0000005A E2F1                    		loop    l_w_sair
    55                                  
    56                                  	; escreve FIR_3
    57 0000005C B90500                  	mov     	cx,5			;n�mero de caracteres
    58 0000005F BB0000                  	mov     	bx,0
    59 00000062 B616                    	mov     	dh,22			;linha 0-29
    60 00000064 B206                    	mov     	dl,6			;coluna 0-79
    61 00000066 C606[0000]0B            	mov		byte[cor], cyan_claro
    62                                  	l_w_fir3:
    63 0000006B E81306                  		call	cursor
    64 0000006E 8A87[3400]              		mov     al,[bx+fir3_str]
    65 00000072 E82306                  		call	caracter
    66 00000075 43                      		inc     bx			;proximo caracter
    67 00000076 FEC2                    		inc		dl			;avanca a coluna
    68 00000078 E2F1                    		loop    l_w_fir3
    69                                  
    70                                  	; escreve FIR_2
    71 0000007A B90500                  	mov     	cx,5			;n�mero de caracteres
    72 0000007D BB0000                  	mov     	bx,0
    73 00000080 B611                    	mov     	dh,17			;linha 0-29
    74 00000082 B206                    	mov     	dl,6			;coluna 0-79
    75 00000084 C606[0000]0E            	mov		byte[cor], amarelo
    76                                  	l_w_fir2:
    77 00000089 E8F505                  		call	cursor
    78 0000008C 8A87[2F00]              		mov     al,[bx+fir2_str]
    79 00000090 E80506                  		call	caracter
    80 00000093 43                      		inc     bx			;proximo caracter
    81 00000094 FEC2                    		inc		dl			;avanca a coluna
    82 00000096 E2F1                    		loop    l_w_fir2
    83                                  
    84                                  	; escreve FIR_1
    85 00000098 B90500                  	mov     	cx,5			;n�mero de caracteres
    86 0000009B BB0000                  	mov     	bx,0
    87 0000009E B60C                    	mov     	dh,12			;linha 0-29
    88 000000A0 B206                    	mov     	dl,6			;coluna 0-79
    89 000000A2 C606[0000]0D            	mov		byte[cor], magenta_claro
    90                                  	l_w_fir1:
    91 000000A7 E8D705                  		call	cursor
    92 000000AA 8A87[2A00]              		mov     al,[bx+fir1_str]
    93 000000AE E8E705                  		call	caracter
    94 000000B1 43                      		inc     bx			;proximo caracter
    95 000000B2 FEC2                    		inc		dl			;avanca a coluna
    96 000000B4 E2F1                    		loop    l_w_fir1
    97                                  
    98                                  	; escreve setas 1
    99 000000B6 B90500                  	mov     	cx,5			;n�mero de caracteres
   100 000000B9 BB0000                  	mov     	bx,0
   101 000000BC B606                    	mov     	dh,6			;linha 0-29
   102 000000BE B206                    	mov     	dl,6			;coluna 0-79
   103 000000C0 C606[0000]0F            	mov		byte[cor], branco_intenso
   104 000000C5 E85101                  	call l_w_seta
   105                                  
   106                                  	; escreve setas 2
   107 000000C8 B90500                  	mov     	cx,5			;n�mero de caracteres
   108 000000CB BB0000                  	mov     	bx,0
   109 000000CE B608                    	mov     	dh,8			;linha 0-29
   110 000000D0 B206                    	mov     	dl,6			;coluna 0-79
   111 000000D2 C606[0000]0F            	mov		byte[cor], branco_intenso
   112 000000D7 E83F01                  	call l_w_seta
   113                                  
   114                                  	; escreve abrir
   115 000000DA B90500                  	mov     	cx,5			;n�mero de caracteres
   116 000000DD BB0000                  	mov     	bx,0
   117 000000E0 B602                    	mov     	dh,2			;linha 0-29
   118 000000E2 B206                    	mov     	dl,6			;coluna 0-79
   119 000000E4 C606[0000]02            	mov		byte[cor], verde
   120                                  	l_w_abrir:
   121 000000E9 E89505                  		call	cursor
   122 000000EC 8A87[2500]              		mov     al,[bx+abrir_str]
   123 000000F0 E8A505                  		call	caracter
   124 000000F3 43                      		inc     bx			;proximo caracter
   125 000000F4 FEC2                    		inc		dl			;avanca a coluna
   126 000000F6 E2F1                    		loop    l_w_abrir
   127                                  
   128                                  
   129                                  	; bordas externas
   130 000000F8 C606[0000]0F            	mov		byte[cor], branco_intenso
   131 000000FD B80000                  	mov		ax,0
   132 00000100 50                      	push		ax
   133 00000101 B80000                  	mov		ax,0
   134 00000104 50                      	push		ax
   135 00000105 B80000                  	mov		ax,0
   136 00000108 50                      	push		ax
   137 00000109 B8DF01                  	mov		ax,479
   138 0000010C 50                      	push		ax
   139 0000010D E86807                  	call		line
   140                                  
   141 00000110 C606[0000]0F            	mov		byte[cor], branco_intenso
   142 00000115 B80000                  	mov		ax,0
   143 00000118 50                      	push		ax
   144 00000119 B80000                  	mov		ax,0
   145 0000011C 50                      	push		ax
   146 0000011D B87F02                  	mov		ax,639
   147 00000120 50                      	push		ax
   148 00000121 B80000                  	mov		ax,0
   149 00000124 50                      	push		ax
   150 00000125 E85007                  	call		line
   151                                  
   152 00000128 C606[0000]0F            	mov		byte[cor], branco_intenso
   153 0000012D B87F02                  	mov		ax,639
   154 00000130 50                      	push		ax
   155 00000131 B80000                  	mov		ax,0
   156 00000134 50                      	push		ax
   157 00000135 B87F02                  	mov		ax,639
   158 00000138 50                      	push		ax
   159 00000139 B8DF01                  	mov		ax,479
   160 0000013C 50                      	push		ax
   161 0000013D E83807                  	call		line
   162                                  
   163 00000140 C606[0000]0F            	mov		byte[cor], branco_intenso
   164 00000145 B80000                  	mov		ax,0
   165 00000148 50                      	push		ax
   166 00000149 B8DF01                  	mov		ax,479
   167 0000014C 50                      	push		ax
   168 0000014D B87F02                  	mov		ax,639
   169 00000150 50                      	push		ax
   170 00000151 B8DF01                  	mov		ax,479
   171 00000154 50                      	push		ax
   172 00000155 E82007                  	call		line
   173                                  
   174                                  	; bordas internas centrais
   175 00000158 C606[0000]0F            	mov		byte[cor], branco_intenso
   176 0000015D B88A00                  	mov		ax,138
   177 00000160 50                      	push		ax
   178 00000161 B80000                  	mov		ax,0
   179 00000164 50                      	push		ax
   180 00000165 B88A00                  	mov		ax,138
   181 00000168 50                      	push		ax
   182 00000169 B8DF01                  	mov		ax,479
   183 0000016C 50                      	push		ax
   184 0000016D E80807                  	call		line
   185                                  
   186 00000170 C606[0000]0F            	mov		byte[cor], branco_intenso
   187 00000175 B88B00                  	mov		ax,139
   188 00000178 50                      	push		ax
   189 00000179 B81300                  	mov		ax,19
   190 0000017C 50                      	push		ax
   191 0000017D B87F02                  	mov		ax,639
   192 00000180 50                      	push		ax
   193 00000181 B81300                  	mov		ax,19
   194 00000184 50                      	push		ax
   195 00000185 E8F006                  	call		line
   196                                  
   197 00000188 C606[0000]0F            	mov		byte[cor], branco_intenso
   198 0000018D B88B00                  	mov		ax,139
   199 00000190 50                      	push		ax
   200 00000191 B8F900                  	mov		ax,249
   201 00000194 50                      	push		ax
   202 00000195 B87F02                  	mov		ax,639
   203 00000198 50                      	push		ax
   204 00000199 B8F900                  	mov		ax,249
   205 0000019C 50                      	push		ax
   206 0000019D E8D806                  	call		line
   207                                  
   208                                  	; bordas internas menu
   209 000001A0 C606[0000]0F            	mov		byte[cor], branco_intenso
   210 000001A5 B80000                  	mov		ax,0
   211 000001A8 50                      	push		ax
   212 000001A9 B84F00                  	mov		ax,79
   213 000001AC 50                      	push		ax
   214 000001AD B88A00                  	mov		ax,138
   215 000001B0 50                      	push		ax
   216 000001B1 B84F00                  	mov		ax,79
   217 000001B4 50                      	push		ax
   218 000001B5 E8C006                  	call		line
   219                                  
   220 000001B8 C606[0000]0F            	mov		byte[cor], branco_intenso
   221 000001BD B80000                  	mov		ax,0
   222 000001C0 50                      	push		ax
   223 000001C1 B89F00                  	mov		ax,159
   224 000001C4 50                      	push		ax
   225 000001C5 B88A00                  	mov		ax,138
   226 000001C8 50                      	push		ax
   227 000001C9 B89F00                  	mov		ax,159
   228 000001CC 50                      	push		ax
   229 000001CD E8A806                  	call		line
   230                                  
   231 000001D0 C606[0000]0F            	mov		byte[cor], branco_intenso
   232 000001D5 B80000                  	mov		ax,0
   233 000001D8 50                      	push		ax
   234 000001D9 B8EF00                  	mov		ax,239
   235 000001DC 50                      	push		ax
   236 000001DD B88A00                  	mov		ax,138
   237 000001E0 50                      	push		ax
   238 000001E1 B8EF00                  	mov		ax,239
   239 000001E4 50                      	push		ax
   240 000001E5 E89006                  	call		line
   241                                  
   242 000001E8 C606[0000]0F            	mov		byte[cor], branco_intenso
   243 000001ED B80000                  	mov		ax,0
   244 000001F0 50                      	push		ax
   245 000001F1 B83F01                  	mov		ax,319
   246 000001F4 50                      	push		ax
   247 000001F5 B88A00                  	mov		ax,138
   248 000001F8 50                      	push		ax
   249 000001F9 B83F01                  	mov		ax,319
   250 000001FC 50                      	push		ax
   251 000001FD E87806                  	call		line
   252                                  
   253 00000200 C606[0000]0F            	mov		byte[cor], branco_intenso
   254 00000205 B80000                  	mov		ax,0
   255 00000208 50                      	push		ax
   256 00000209 B88F01                  	mov		ax,399
   257 0000020C 50                      	push		ax
   258 0000020D B88A00                  	mov		ax,138
   259 00000210 50                      	push		ax
   260 00000211 B88F01                  	mov		ax,399
   261 00000214 50                      	push		ax
   262 00000215 E86006                  	call		line
   263 00000218 C3                      	ret
   264                                  
   265                                  l_w_seta:
   266 00000219 E86504                  	call	cursor
   267 0000021C 8A87[3D00]              	mov     al, [bx+seta_str]
   268 00000220 E87504                  	call	caracter
   269 00000223 43                      	inc     bx			;proximo caracter
   270 00000224 FEC2                    	inc		dl			;avanca a coluna
   271 00000226 E2F1                    	loop    l_w_seta
   272 00000228 C3                      	ret
   273                                  
   274                                  limpar_areas:
   275 00000229 E80400                  	call limpar_area1
   276 0000022C E83A00                  	call limpar_area2
   277 0000022F C3                      	ret
   278                                  
   279                                  limpar_area1:
   280 00000230 50                      	push ax
   281 00000231 53                      	push bx
   282 00000232 51                      	push cx
   283 00000233 C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   284 00000239 C606[0000]00            	mov	byte[cor],preto
   285                                  		loop_limpar_area1:
   286 0000023E 8B1E[6200]              			mov bx, word[contador]
   287 00000242 81FBE400                			cmp bx, 228
   288 00000246 745A                    			je volta_limpa
   289                                  		
   290                                  			;x1 ->  139
   291 00000248 B88B00                  			mov		ax, 139   ;->x1
   292 0000024B 50                      			push	ax
   293                                  		
   294                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   295 0000024C 31C9                    			xor cx, cx
   296 0000024E B9DE01                  			mov cx, 478
   297 00000251 29D9                    			sub cx, bx
   298 00000253 89C8                    			mov	ax, cx     ;->y1
   299 00000255 50                      			push ax
   300                                  		
   301                                  			;x2 = 638
   302 00000256 31C0                    			xor ax, ax
   303 00000258 057E02                  			add ax, 638
   304 0000025B 50                      			push ax
   305                                  		
   306                                  			;y2 = y1
   307 0000025C 89C8                    			mov	ax, cx     ;->y2=y1
   308 0000025E 50                      			push ax
   309 0000025F E81606                  			call line
   310                                  		
   311 00000262 FF06[6200]              			inc word[contador]
   312 00000266 E9D5FF                  			jmp loop_limpar_area1
   313                                  
   314                                  limpar_area2:
   315 00000269 50                      	push ax
   316 0000026A 53                      	push bx
   317 0000026B 51                      	push cx
   318 0000026C C706[6200]0000          	mov word[contador], 0     ; resetamos o contador
   319 00000272 C606[0000]00            	mov	byte[cor],preto
   320                                  		loop_limpar_area2:
   321 00000277 8B1E[6200]              			mov bx, word[contador]
   322 0000027B 81FBE400                			cmp bx, 228
   323 0000027F 7421                    			je volta_limpa
   324                                  		
   325                                  			;x1 ->  139
   326 00000281 B88B00                  			mov		ax, 139   ;->x1
   327 00000284 50                      			push	ax
   328                                  		
   329                                  			;y1 = [478 - contador] -> comeca em 478 e vai subtraindo o contador...
   330 00000285 31C9                    			xor cx, cx
   331 00000287 B9F800                  			mov cx, 248
   332 0000028A 29D9                    			sub cx, bx
   333 0000028C 89C8                    			mov	ax, cx     ;->y1
   334 0000028E 50                      			push ax
   335                                  		
   336                                  			;x2 = 638
   337 0000028F 31C0                    			xor ax, ax
   338 00000291 057E02                  			add ax, 638
   339 00000294 50                      			push ax
   340                                  		
   341                                  			;y2 = y1
   342 00000295 89C8                    			mov	ax, cx     ;->y2=y1
   343 00000297 50                      			push ax
   344 00000298 E8DD05                  			call line
   345                                  
   346 0000029B FF06[6200]              			inc word[contador]
   347 0000029F E9D5FF                  			jmp loop_limpar_area2
   348                                  
   349                                  volta_limpa:
   350 000002A2 59                      	pop cx
   351 000002A3 5B                      	pop bx
   352 000002A4 58                      	pop ax
   353 000002A5 C3                      	ret
   354                                  
   355                                  exit:
   356                                  	; mov    	ah,08h
   357                                  	; int     21h
   358                                  
   359 000002A6 B400                    	mov  	ah,0   					; set video mode
   360 000002A8 A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   361 000002AB CD10                    	int  	10h
   362                                  
   363 000002AD B8004C                  	mov     ax,4C00H ; Exit to DOS function 
   364 000002B0 CD21                    	int     21h
   365                                  
   366                                  espera_mouse:
   367                                  		;mostrando mouse na tela
   368 000002B2 B80100                  		mov ax, 01h
   369 000002B5 CD33                    		int 33h
   370                                  		
   371                                  		;lendo mouse
   372 000002B7 31DB                    		xor bx, bx
   373 000002B9 B80300                  		mov ax, 03h
   374 000002BC CD33                    		int 33h
   375                                  
   376 000002BE 81FB0100                		cmp bx, 1
   377 000002C2 7403                    		je verifica
   378 000002C4 E9EBFF                  		jmp espera_mouse
   379                                  
   380                                  verifica:
   381                                  	;cx -> posicao horizontal do mouse
   382                                  	;dx -> posicao vertical do mouse	(INVERTIDO)
   383 000002C7 81F98C00                	cmp cx, 140
   384 000002CB 7DE5                    	jnl espera_mouse ;se o click ocorrer fora da barra de funcoes, nao faz nada e volta a esperar o mouse
   385 000002CD 81FA5000                	cmp dx, 80
   386 000002D1 7C21                    	jl read_file	;abrir     	   dx < 80
   387 000002D3 81FAA000                	cmp dx, 160
   388 000002D7 7C36                    	jl load_data	;load  	080 <= dx < 160
   389 000002D9 81FAF000                	cmp dx, 240
   390 000002DD 7C46                    	jl run_fir1		;FIR3  	160 <= dx < 240
   391 000002DF 81FA4001                	cmp dx, 320
   392 000002E3 7C6E                    	jl run_fir2		;FIR2  	240 <= dx < 320
   393 000002E5 81FA9001                	cmp dx, 400
   394 000002E9 7C6B                    	jl run_fir3		;FIR1  	320 <= dx < 400
   395 000002EB 81FAE001                	cmp dx, 480
   396 000002EF 7CB5                    	jl exit			;sair  	   dx > 400
   397 000002F1 E9BEFF                  	jmp espera_mouse
   398                                  
   399                                  read_file:
   400 000002F4 803E[4E00]01            	cmp byte[aberto],1
   401 000002F9 745E                    	je fecha_arq_sinal
   402 000002FB C606[4E00]01            	mov byte[aberto], 1
   403 00000300 E86500                  	call open_file
   404 00000303 E87E00                  	call le_numeros
   405 00000306 E8EA01                  	call config_plotar_entrada
   406 00000309 E8CA02                  	call plotar_vetor
   407 0000030C E9A3FF                  	jmp espera_mouse
   408                                  
   409                                  load_data:
   410 0000030F 803E[4E00]00            	cmp byte[aberto],0
   411 00000314 74DE                    	je read_file
   412 00000316 E86B00                  	call le_numeros
   413 00000319 E814FF                  	call limpar_area1
   414 0000031C E8D401                  	call config_plotar_entrada
   415 0000031F E8B402                  	call plotar_vetor
   416 00000322 E98DFF                  	jmp espera_mouse
   417                                  
   418                                  run_fir1:
   419                                  	; copy filter 
   420 00000325 C706[6200]0000          	mov word[contador], 0
   421                                  	loop_copy_f1:
   422 0000032B 8B1E[6200]              		mov bx, word[contador]
   423 0000032F 8A8F[240C]              		mov cl, byte[filtro1 + bx]
   424 00000333 888F[480C]              		mov byte[f_select + bx], cl
   425 00000337 FF06[6200]              		inc word[contador]
   426 0000033B 8B1E[6200]              		mov bx, word[contador]
   427 0000033F 3A1E[230C]              		cmp bl, byte[filtros_len]
   428 00000343 7CE6                    		jl loop_copy_f1
   429 00000345 8A1E[2F0C]              	mov bl, byte[filtro1_div]
   430 00000349 881E[530C]              	mov byte[f_select_div], bl
   431 0000034D E8A000                  	call aplicar_filtro
   432                                  	; call ajustar_vout
   433                                  	; call config_plotar_saida
   434                                  	; call plotar_vetor
   435 00000350 E95FFF                  	jmp espera_mouse
   436                                  
   437                                  run_fir2:
   438 00000353 E95CFF                  	jmp espera_mouse
   439                                  
   440                                  run_fir3:
   441 00000356 E959FF                  	jmp espera_mouse
   442                                  
   443                                  fecha_arq_sinal:
   444 00000359 E81F00                  	call close_file
   445 0000035C C706[4E00]0000          	mov word [aberto], 0
   446 00000362 E8CBFE                  	call limpar_area1
   447 00000365 E88CFF                  	call read_file
   448                                  
   449                                  open_file:
   450 00000368 C706[4F00]0000          	mov word[qtd_lida], 0  	; reseta a quantidade lida
   451 0000036E BA[4200]                	mov dx, filename 		; coloca o endere�o do nome do arquivo em dx (make a pointer to the filename)
   452 00000371 B000                    	mov al, 0        		; modo escrita e leitura (0 - for reading. 1 - for writing. 2 - both)
   453 00000373 B43D                    	mov ah, 3Dh      		; 3Dh of DOS Services opens a file
   454 00000375 CD21                    	int 21h    		 		; Call DOS (interruption 21h)
   455 00000377 A3[4C00]                	mov [handle], ax  		; Function 3Dh returns the file handle in AX, here we save it for later use.
   456 0000037A C3                      	ret
   457                                  
   458                                  close_file:
   459 0000037B 8B1E[4C00]              	mov bx, [handle]
   460 0000037F B43E                    	mov ah, 3eh
   461 00000381 CD21                    	int 21h ; close file...
   462 00000383 C3                      	ret
   463                                  
   464                                  le_numeros:
   465 00000384 C706[6200]0000          	mov word[contador], 0
   466                                  	loop_le_numeros:
   467                                  		;DOS Service Function number 3FH reads from a file.
   468 0000038A B43F                    		mov ah, 3FH
   469 0000038C B91000                  		mov cx, 16         	; I will assume "sinal.txt" has at least 16 bytes in it (ex:-5.6200000e+02  ).
   470 0000038F BA[5100]                		mov dx, buffer   	; DOS Functions like DX having pointers for some reason.
   471 00000392 8B1E[4C00]              		mov bx, [handle]  	; BX needs the file handle.
   472 00000396 CD21                    		int 21h           	; call DOS
   473                                  
   474                                  		; verifica se o final do arquivo foi encontrado 
   475 00000398 39C8                    		cmp ax, cx ;EOF reached?
   476 0000039A 752E                    		jne EOF
   477                                  
   478 0000039C FF06[4F00]              		inc word[qtd_lida]
   479                                  
   480                                  		; Here we will put a $ after 4 bytes in the buffer
   481 000003A0 BA[5100]                		mov dx, buffer
   482 000003A3 01C2                    		add dx,ax
   483 000003A5 89D3                    		mov bx,dx
   484 000003A7 C60724                  		mov byte [bx], '$'
   485                                  
   486 000003AA E83800                  		call get_sinal_and_convert
   487                                  
   488 000003AD FF06[6200]              		inc word[contador]
   489 000003B1 8B1E[6700]              		mov bx, word[qtd_pixels]
   490                                  
   491                                  		; verifica se os 500 números já foram lidos
   492 000003B5 391E[6200]              		cmp word[contador], bx
   493 000003B9 75CF                    		jne loop_le_numeros
   494 000003BB 7400                    		je  volta_le_numeros
   495                                  
   496                                  volta_le_numeros:
   497 000003BD E80100                  	call imprime_qtd_lida
   498 000003C0 C3                      	ret
   499                                  
   500                                  imprime_qtd_lida:
   501 000003C1 50                      	push ax
   502 000003C2 A1[4F00]                	mov ax, word[qtd_lida]
   503 000003C5 E85B02                  	call print_dw_number
   504 000003C8 58                      	pop ax
   505 000003C9 C3                      	ret
   506                                  
   507                                  EOF:
   508 000003CA E927FF                  	jmp read_file	;	COMEÇA A LEITURA DO ARQUIVO DESDE O INÍCIO
   509                                  
   510                                  sinal_negativo:
   511 000003CD 8B1E[6200]              	mov bx, word[contador]
   512 000003D1 C687[5D02]01            	mov byte[v_in_sn+bx], 1
   513 000003D6 E97001                  	jmp converte_str
   514                                  
   515                                  sinal_positivo:
   516 000003D9 8B1E[6200]              	mov bx, word[contador]
   517 000003DD C687[5D02]00            	mov byte[v_in_sn+bx], 0
   518 000003E2 E96401                  	jmp converte_str
   519                                  
   520                                  get_sinal_and_convert:
   521 000003E5 30E4                    	xor 	ah, ah                ; limpa ah
   522 000003E7 A0[5100]                	mov 	al, byte[buffer] 	  ; pega o primeiro valor do buffer, que indica o sinal (+ ou -)
   523 000003EA 3C2D                    	cmp  	al, 45				  ; compara com (-) em ASCII
   524 000003EC 74DF                    	je sinal_negativo
   525 000003EE 75E9                    	jne sinal_positivo
   526                                  
   527                                  ;	f1[qtd_pixels] * f1[filtros_len]
   528                                  aplicar_filtro:
   529 000003F0 C706[6200]0000          	mov word[contador], 0
   530                                  	l1_aplicar_filtro:
   531 000003F6 8B1E[6200]              		mov bx, word[contador]
   532 000003FA C787[5104]0000          		mov word[v_out_mod + bx], 0
   533 00000400 B80000                  		mov ax,  0					;	set x_start
   534 00000403 8B1E[230C]              		mov bx, word[filtros_len]
   535 00000407 F7DB                    		neg bx
   536 00000409 031E[6200]              		add bx, word[contador]
   537 0000040D 81C30100                		add bx, 1
   538 00000411 E88800                  		call max_ax_bx 
   539 00000414 890E[540C]              		mov word[x_start], cx
   540 00000418 A1[6200]                		mov ax, [contador]			;	set x_end
   541 0000041B 050100                  		add ax, 1
   542 0000041E 8B1E[6700]              		mov bx, [qtd_pixels]
   543 00000422 E87000                  		call min_ax_bx
   544 00000425 890E[560C]              		mov word[x_end], cx
   545 00000429 A1[6200]                		mov ax, word[contador]		;	set h_start
   546 0000042C 8B1E[230C]              		mov bx, [filtros_len]
   547 00000430 81EB0100                		sub bx, 1
   548 00000434 E85E00                  		call min_ax_bx
   549 00000437 890E[580C]              		mov[h_start], cx
   550                                  
   551 0000043B A1[540C]                		mov ax, word[x_start]		; 	inicio loop_2
   552 0000043E A3[6400]                		mov word[contador2], ax
   553                                  		l2_aplicar_filtro:
   554 00000441 E81F00                  			call conv_vin_filtro
   555 00000444 FF06[6400]              			inc word[contador2]			;	fim l2_aplicar_filtro
   556 00000448 8B1E[560C]              			mov bx, word[x_end]
   557 0000044C 391E[6400]              			cmp word[contador2], bx
   558 00000450 7CEF                    			jl l2_aplicar_filtro
   559 00000452 FF06[6200]              		inc word[contador]				;	fim l1_aplicar_filtro
   560 00000456 8B1E[6700]              		mov bx, word[qtd_pixels]
   561 0000045A 391E[6200]              		cmp word[contador], bx
   562 0000045E 7C96                    		jl l1_aplicar_filtro
   563 00000460 7400                    		je volta_aplicar_filtro
   564                                  
   565                                  volta_aplicar_filtro:
   566 00000462 C3                      	ret
   567                                  
   568                                  conv_vin_filtro:
   569 00000463 8B1E[580C]              	mov bx, word[h_start]
   570 00000467 8B87[480C]              	mov ax, [f_select + bx]
   571 0000046B 8B1E[6400]              	mov bx, word[contador2]
   572 0000046F 8B8F[6900]              	mov cx, [v_in_mod + bx]
   573 00000473 E80E00                  	call aplicar_sn_cx			; aplicar o sinal [v_in_sn + bx] a cx
   574 00000476 F7E9                    	imul cx
   575 00000478 0187[5104]              	add word[v_out_mod + bx], ax
   576 0000047C FF0E[580C]              	dec word[h_start]			; decrementa h_start
   577 00000480 C3                      	ret
   578                                  
   579                                  neg_cx:
   580 00000481 F7D9                    	neg cx
   581 00000483 C3                      	ret
   582                                  
   583                                  aplicar_sn_cx:
   584 00000484 8B97[5D02]              	mov dx, [v_in_sn + bx]
   585 00000488 81FA0000                	cmp dx, 0
   586 0000048C 75F3                    	jne neg_cx
   587 0000048E C3                      	ret
   588                                  
   589                                  set_cx_ax:
   590 0000048F 89C1                    	mov cx, ax
   591 00000491 C3                      	ret
   592                                  
   593                                  set_cx_bx:
   594 00000492 89D9                    	mov cx, bx
   595 00000494 C3                      	ret
   596                                  
   597                                  min_ax_bx:			; MIN(AX, BX) -> CX
   598 00000495 39D8                    	cmp ax, bx
   599 00000497 7CF6                    	jl set_cx_ax
   600 00000499 E9F6FF                  	jmp set_cx_bx
   601                                  
   602                                  max_ax_bx:			; MAX(AX, BX) -> CX
   603 0000049C 39D8                    	cmp ax, bx
   604 0000049E 7FEF                    	jg set_cx_ax
   605 000004A0 E9EFFF                  	jmp set_cx_bx
   606                                  
   607                                  ajustar_vout:
   608 000004A3 C706[6200]0000          	mov word[contador], 0
   609                                  	loop_as_vout:
   610 000004A9 8B1E[6200]              		mov bx, word[contador]
   611 000004AD E82400                  		call set_sn_vout
   612 000004B0 E82E00                  		call set_mod_vout
   613                                  		; fim loop_as_vout
   614 000004B3 FF06[6200]              		inc word[contador]
   615 000004B7 8B1E[6700]              		mov bx, word[qtd_pixels]
   616 000004BB 391E[6200]              		cmp word[contador], bx
   617 000004BF 7CE8                    		jl loop_as_vout
   618 000004C1 7400                    		je ret_ajustar_vout
   619                                  ret_ajustar_vout:
   620 000004C3 C3                      	ret
   621                                  
   622                                  corrige_sn_vout_neg:
   623 000004C4 C687[4506]01            	mov byte[v_out_sn + bx], 1
   624 000004C9 8A8F[5104]              	mov cl, byte[v_out_mod + bx]
   625 000004CD F6D9                    	neg cl
   626 000004CF 888F[5104]              	mov byte[v_out_mod + bx], cl
   627 000004D3 C3                      	ret
   628                                  
   629                                  set_sn_vout:
   630 000004D4 80BF[5104]00            	cmp byte[v_out_mod + bx], 0
   631 000004D9 7CE9                    	jl corrige_sn_vout_neg
   632 000004DB C687[4506]00            	mov byte[v_out_sn + bx], 0
   633 000004E0 C3                      	ret
   634                                  
   635                                  set_mod_vout:
   636 000004E1 8A87[5104]              	mov al, byte[v_out_mod + bx]
   637 000004E5 8A0E[530C]              	mov	cl, byte[f_select_div]
   638 000004E9 BA0000                  	mov dx, 0
   639 000004EC F6F1                    	div cl
   640 000004EE 8887[5104]              	mov byte[v_out_mod + bx], al
   641 000004F2 C3                      	ret
   642                                  
   643                                  config_plotar_entrada:
   644                                  	;	Configurações para  a função plotar
   645 000004F3 C706[6200]0000          	mov word[contador], 0
   646                                  	loop_config1:
   647 000004F9 8B1E[6200]              		mov bx, word[contador]
   648 000004FD 8A87[6900]              		mov al, byte[v_in_mod + bx]
   649 00000501 8887[3908]              		mov byte[v_select_mod + bx], al
   650 00000505 8A87[5D02]              		mov al, byte[v_in_sn + bx]
   651 00000509 8887[2D0A]              		mov byte[v_select_sn + bx], al
   652 0000050D FF06[6200]              		inc word[contador]
   653 00000511 3B1E[6700]              		cmp bx, word[qtd_pixels]
   654 00000515 7CE2                    		jl loop_config1
   655 00000517 C706[210C]6C01          	mov word[ponto_central], 364
   656 0000051D C3                      	ret
   657                                  
   658                                  config_plotar_saida:
   659 0000051E C706[6200]0000          	mov word[contador], 0
   660                                  	loop_config2:
   661 00000524 8B1E[6200]              		mov bx, word[contador]
   662 00000528 8A87[5104]              		mov al, byte[v_out_mod + bx]
   663 0000052C 8887[3908]              		mov byte[v_select_mod + bx], al
   664 00000530 8A87[4506]              		mov al, byte[v_out_sn + bx]
   665 00000534 8887[2D0A]              		mov byte[v_select_sn + bx], al
   666 00000538 FF06[6200]              		inc word[contador]
   667 0000053C 3B1E[6700]              		cmp bx, word[qtd_pixels]
   668 00000540 7CE2                    		jl loop_config2
   669 00000542 C706[210C]8500          	mov word[ponto_central], 133
   670 00000548 C3                      	ret
   671                                  
   672                                  converte_str:
   673 00000549 C606[5100]30            	mov byte[buffer], 30h
   674 0000054E A0[5E00]                	mov al, byte[buffer + 13] ; anda 12 no vetor para ver o indice da potencia
   675 00000551 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   676                                  	
   677                                  	;caso e02
   678 00000553 3C02                    	cmp al, 2
   679 00000555 7416                    	je calc_cem
   680                                  	
   681                                  	;caso e01
   682 00000557 3C01                    	cmp al, 1
   683 00000559 7450                    	je calc_dez
   684                                  	
   685                                  	;caso e00
   686 0000055B 30E4                    	xor ah,ah                 		; limpa ah
   687 0000055D A0[5100]                	mov al, byte[buffer]
   688 00000560 2C30                    	sub al, 30h               		; subtrai 30h do ASCII para saber o valor em decimal
   689                                  	
   690 00000562 8B1E[6200]              	mov bx, word[contador]     		; pegamos o contador para incrementar na posicao do v_in_mod
   691 00000566 0087[6900]              	add byte[v_in_mod+bx], al    ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   692 0000056A E96800                  	jmp cvt_retorna
   693                                  
   694                                  calc_cem:
   695                                  	;lembrar de push e pop antes de multiplicar
   696 0000056D 50                      	push ax
   697 0000056E 52                      	push dx
   698                                  	
   699 0000056F 30E4                    	xor ah,ah                 ; limpa ah
   700 00000571 A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   701 00000574 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   702 00000576 B96400                  	mov  cx, 100              ; cx = 100
   703 00000579 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   704                                  	
   705 0000057B 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao da v_in_mod
   706 0000057F 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" na "v_in_mod[]"
   707                                  
   708 00000583 30E4                    	xor ah,ah                 ; limpa ah
   709 00000585 A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   710 00000588 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   711 0000058A B90A00                  	mov  cx, 10               ; cx = 10
   712 0000058D F7E1                    	mul  cx                   ; dx:ax = ax * cx
   713                                  	
   714 0000058F 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   715 00000593 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   716                                  	
   717 00000597 30E4                    	xor ah,ah                 ; limpa ah
   718 00000599 A0[5500]                	mov al, byte[buffer+4]    ; al = ? (terceiro numero)
   719 0000059C 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   720                                  	
   721 0000059E 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   722 000005A2 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   723                                  
   724 000005A6 5A                      	pop dx                 ; volta aos valores originais
   725 000005A7 58                      	pop ax                 ; volta aos valores originais
   726 000005A8 E92A00                  	jmp cvt_retorna
   727                                  	
   728                                  	
   729                                  calc_dez:
   730                                  	;lembrar de push e pop antes de multiplicar
   731 000005AB 50                      	push ax
   732 000005AC 52                      	push dx
   733                                  	
   734 000005AD 30E4                    	xor ah,ah                 ; limpa ah
   735 000005AF A0[5200]                	mov al, byte[buffer+1]      ; al = ? (primeiro numero)
   736 000005B2 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   737 000005B4 B90A00                  	mov  cx, 10               ; cx = 10
   738 000005B7 F7E1                    	mul  cx                   ; dx:ax = ax * cx
   739                                  	
   740 000005B9 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   741 000005BD 8887[6900]              	mov byte[v_in_mod+bx], al   ; salvamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   742                                  
   743 000005C1 30E4                    	xor ah,ah                 ; limpa ah
   744 000005C3 A0[5400]                	mov al, byte[buffer+3]    ; al = ? (segundo numero)
   745 000005C6 2C30                    	sub al, 30h               ; subtrai 30h do ASCII para saber o valor em decimal
   746                                  	
   747 000005C8 8B1E[6200]              	mov bx, word[contador]    ; pegamos o contador para incrementar na posicao do v_in_mod
   748 000005CC 0087[6900]              	add byte[v_in_mod+bx], al   ; somamos o valor da parte baixa da multiplicacao de "al" no "v_in_mod[]"
   749                                  	
   750 000005D0 5A                      	pop dx                    ; volta aos valores originais
   751 000005D1 58                      	pop ax                    ; volta aos valores originais
   752 000005D2 E90000                  	jmp cvt_retorna
   753                                  
   754                                  cvt_retorna:
   755 000005D5 C3                      	ret
   756                                  
   757                                  plotar_vetor:
   758 000005D6 8B0E[6700]              	mov cx, word[qtd_pixels]
   759 000005DA 81E90100                	sub cx, 1
   760 000005DE C706[6200]0000          	mov word[contador], 0
   761 000005E4 C606[0000]0F            	mov	byte[cor],branco_intenso
   762                                  
   763                                  plot_num:
   764 000005E9 A1[6200]                	mov		ax, word[contador]
   765 000005EC 058C00                  	add		ax, 140
   766 000005EF 50                      	push	ax
   767 000005F0 E80F00                  	call ajuste_ax
   768 000005F3 50                      	push	ax
   769 000005F4 B80100                  	mov ax, 1
   770 000005F7 50                      	push	ax
   771 000005F8 E8C001                  	call	full_circle
   772 000005FB FF06[6200]              	inc word[contador]
   773 000005FF E2E8                    	loop plot_num
   774 00000601 C3                      	ret
   775                                  
   776                                  ajuste_ax:
   777 00000602 8B1E[6200]              	mov bx, word[contador]
   778 00000606 B80000                  	mov ax, 0
   779 00000609 8A87[2D0A]              	mov al, byte[v_select_sn + bx]
   780 0000060D 3C00                    	cmp al, 0
   781 0000060F 7402                    	je set_ax_positivo
   782 00000611 7508                    	jne set_ax_negativo
   783                                  
   784                                  set_ax_positivo:
   785 00000613 A1[210C]                	mov ax, word[ponto_central]
   786 00000616 0287[3908]              	add al, byte[v_select_mod + bx]
   787 0000061A C3                      	ret
   788                                  
   789                                  set_ax_negativo:
   790 0000061B A1[210C]                	mov ax, word[ponto_central]
   791 0000061E 2A87[3908]              	sub al, byte[v_select_mod + bx]
   792 00000622 C3                      	ret
   793                                  
   794                                  ;	imprime, em decimal, o valor númerico de AX 
   795                                  print_dw_number:
   796                                      ;initialize count
   797 00000623 53                      	push bx
   798 00000624 51                      	push cx
   799 00000625 52                      	push dx
   800                                  
   801 00000626 C706[6200]0000          	mov word[contador], 0
   802 0000062C B90000                      mov cx,0
   803 0000062F BA0000                      mov dx,0
   804                                      loop_print_dw_number:
   805 00000632 3D0000                          cmp ax,0
   806 00000635 740C                            je print1     	; if ax is zero
   807 00000637 BB0A00                          mov bx,10     	; initialize bx to 10  
   808 0000063A F7F3                            div bx    		; extract the last digit             
   809 0000063C 52                              push dx    		; push it in the stack         
   810 0000063D 41                              inc cx   		; increment the count          
   811 0000063E 31D2                            xor dx,dx		; set dx to 0
   812 00000640 E9EFFF                          jmp loop_print_dw_number
   813                                      print1:
   814 00000643 81F90000                        cmp cx,0
   815 00000647 7434                            je volta_print	; if cx is zero
   816 00000649 5A                              pop dx			; pop the top of stack
   817                                  
   818                                          ;add 48 so that it
   819                                          ;represents the ASCII
   820                                          ;value of digits
   821 0000064A 81C23000                        add dx, 48
   822                                  
   823                                  		; 	imprime DX
   824 0000064E 50                      		push ax
   825 0000064F 53                      		push bx
   826 00000650 51                      		push cx
   827 00000651 89D0                    		mov ax, dx
   828 00000653 52                      		push dx
   829                                  
   830 00000654 B607                    		mov     	dh, 7			;linha 0-29
   831 00000656 B206                    		mov     	dl, 6			;coluna 0-79
   832 00000658 C606[0000]0F            		mov			byte[cor], branco_intenso
   833 0000065D 0216[6200]              		add			dl, byte[contador]
   834                                  
   835 00000661 E81D00                  		call	cursor
   836 00000664 E83100                  		call	caracter
   837 00000667 FEC2                    		inc		dl
   838 00000669 E81500                  		call	cursor
   839 0000066C 88E0                    		mov     al, ah
   840 0000066E E82700                  		call	caracter
   841                                  
   842 00000671 5A                      		pop dx
   843 00000672 59                      		pop cx
   844 00000673 5B                      		pop bx
   845 00000674 58                      		pop ax
   846                                  		; 	FIM imprime DX
   847                                  
   848 00000675 FF06[6200]              		inc word[contador]
   849 00000679 49                              dec cx			;decrease the count
   850 0000067A E9C6FF                          jmp print1
   851                                  volta_print:
   852 0000067D 5A                      	pop dx
   853 0000067E 59                      	pop cx
   854 0000067F 5B                      	pop bx
   855 00000680 C3                      	ret
   856                                  
   857                                  ;***************************************************************************
   858                                  ;
   859                                  ;   fun��o cursor
   860                                  ;
   861                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   862                                  cursor:
   863 00000681 9C                      		pushf
   864 00000682 50                      		push 		ax
   865 00000683 53                      		push 		bx
   866 00000684 51                      		push		cx
   867 00000685 52                      		push		dx
   868 00000686 56                      		push		si
   869 00000687 57                      		push		di
   870 00000688 55                      		push		bp
   871 00000689 B402                    		mov     	ah,2
   872 0000068B B700                    		mov     	bh,0
   873 0000068D CD10                    		int     	10h
   874 0000068F 5D                      		pop		bp
   875 00000690 5F                      		pop		di
   876 00000691 5E                      		pop		si
   877 00000692 5A                      		pop		dx
   878 00000693 59                      		pop		cx
   879 00000694 5B                      		pop		bx
   880 00000695 58                      		pop		ax
   881 00000696 9D                      		popf
   882 00000697 C3                      		ret
   883                                  ;_____________________________________________________________________________
   884                                  ;
   885                                  ;   fun��o caracter escrito na posi��o do cursor
   886                                  ;
   887                                  ; al= caracter a ser escrito
   888                                  ; cor definida na variavel cor
   889                                  caracter:
   890 00000698 9C                      		pushf
   891 00000699 50                      		push 		ax
   892 0000069A 53                      		push 		bx
   893 0000069B 51                      		push		cx
   894 0000069C 52                      		push		dx
   895 0000069D 56                      		push		si
   896 0000069E 57                      		push		di
   897 0000069F 55                      		push		bp
   898 000006A0 B409                        	mov     	ah,9
   899 000006A2 B700                        	mov     	bh,0
   900 000006A4 B90100                      	mov     	cx,1
   901 000006A7 8A1E[0000]                 		mov     	bl,[cor]
   902 000006AB CD10                        	int     	10h
   903 000006AD 5D                      		pop		bp
   904 000006AE 5F                      		pop		di
   905 000006AF 5E                      		pop		si
   906 000006B0 5A                      		pop		dx
   907 000006B1 59                      		pop		cx
   908 000006B2 5B                      		pop		bx
   909 000006B3 58                      		pop		ax
   910 000006B4 9D                      		popf
   911 000006B5 C3                      		ret
   912                                  ;_____________________________________________________________________________
   913                                  ;
   914                                  ;   fun��o plot_xy
   915                                  ;
   916                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   917                                  ; cor definida na variavel cor
   918                                  plot_xy:
   919 000006B6 55                      		push		bp
   920 000006B7 89E5                    		mov		bp,sp
   921 000006B9 9C                      		pushf
   922 000006BA 50                      		push 		ax
   923 000006BB 53                      		push 		bx
   924 000006BC 51                      		push		cx
   925 000006BD 52                      		push		dx
   926 000006BE 56                      		push		si
   927 000006BF 57                      		push		di
   928 000006C0 B40C                    	    mov     	ah,0ch
   929 000006C2 A0[0000]                	    mov     	al,[cor]
   930 000006C5 B700                    	    mov     	bh,0
   931 000006C7 BADF01                  	    mov     	dx,479
   932 000006CA 2B5604                  		sub		dx,[bp+4]
   933 000006CD 8B4E06                  	    mov     	cx,[bp+6]
   934 000006D0 CD10                    	    int     	10h
   935 000006D2 5F                      		pop		di
   936 000006D3 5E                      		pop		si
   937 000006D4 5A                      		pop		dx
   938 000006D5 59                      		pop		cx
   939 000006D6 5B                      		pop		bx
   940 000006D7 58                      		pop		ax
   941 000006D8 9D                      		popf
   942 000006D9 5D                      		pop		bp
   943 000006DA C20400                  		ret		4
   944                                  ;_____________________________________________________________________________
   945                                  ;    fun��o circle
   946                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   947                                  ; cor definida na variavel cor
   948                                  circle:
   949 000006DD 55                      	push 	bp
   950 000006DE 89E5                    	mov	 	bp,sp
   951 000006E0 9C                      	pushf                        ;coloca os flags na pilha
   952 000006E1 50                      	push 	ax
   953 000006E2 53                      	push 	bx
   954 000006E3 51                      	push	cx
   955 000006E4 52                      	push	dx
   956 000006E5 56                      	push	si
   957 000006E6 57                      	push	di
   958                                  	
   959 000006E7 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   960 000006EA 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   961 000006ED 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   962                                  	
   963 000006F0 89DA                    	mov 	dx,bx	
   964 000006F2 01CA                    	add		dx,cx       ;ponto extremo superior
   965 000006F4 50                      	push    ax			
   966 000006F5 52                      	push	dx
   967 000006F6 E8BDFF                  	call plot_xy
   968                                  	
   969 000006F9 89DA                    	mov		dx,bx
   970 000006FB 29CA                    	sub		dx,cx       ;ponto extremo inferior
   971 000006FD 50                      	push    ax			
   972 000006FE 52                      	push	dx
   973 000006FF E8B4FF                  	call plot_xy
   974                                  	
   975 00000702 89C2                    	mov 	dx,ax	
   976 00000704 01CA                    	add		dx,cx       ;ponto extremo direita
   977 00000706 52                      	push    dx			
   978 00000707 53                      	push	bx
   979 00000708 E8ABFF                  	call plot_xy
   980                                  	
   981 0000070B 89C2                    	mov		dx,ax
   982 0000070D 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   983 0000070F 52                      	push    dx			
   984 00000710 53                      	push	bx
   985 00000711 E8A2FF                  	call plot_xy
   986                                  		
   987 00000714 89CF                    	mov		di,cx
   988 00000716 81EF0100                	sub		di,1	 ;di=r-1
   989 0000071A BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   990                                  	
   991                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   992                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   993                                  ;valores positivos para d
   994                                  
   995                                  stay:				;loop
   996 0000071D 89FE                    	mov		si,di
   997 0000071F 81FE0000                	cmp		si,0
   998 00000723 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   999 00000725 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1000 00000727 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1001 00000729 81C60300                	add		si,3
  1002 0000072D 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1003 0000072F 42                      	inc		dx		;incrementa dx
  1004 00000730 E90E00                  	jmp		plotar
  1005                                  inf:	
  1006 00000733 89D6                    	mov		si,dx
  1007 00000735 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1008 00000737 D1E6                    	sal		si,1
  1009 00000739 81C60500                	add		si,5
  1010 0000073D 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1011 0000073F 42                      	inc		dx		;incrementa x (dx)
  1012 00000740 49                      	dec		cx		;decrementa y (cx)
  1013                                  	
  1014                                  plotar:	
  1015 00000741 89D6                    	mov		si,dx
  1016 00000743 01C6                    	add		si,ax
  1017 00000745 56                      	push    si			;coloca a abcisa x+xc na pilha
  1018 00000746 89CE                    	mov		si,cx
  1019 00000748 01DE                    	add		si,bx
  1020 0000074A 56                      	push    si			;coloca a ordenada y+yc na pilha
  1021 0000074B E868FF                  	call plot_xy		;toma conta do segundo octante
  1022 0000074E 89C6                    	mov		si,ax
  1023 00000750 01D6                    	add		si,dx
  1024 00000752 56                      	push    si			;coloca a abcisa xc+x na pilha
  1025 00000753 89DE                    	mov		si,bx
  1026 00000755 29CE                    	sub		si,cx
  1027 00000757 56                      	push    si			;coloca a ordenada yc-y na pilha
  1028 00000758 E85BFF                  	call plot_xy		;toma conta do s�timo octante
  1029 0000075B 89C6                    	mov		si,ax
  1030 0000075D 01CE                    	add		si,cx
  1031 0000075F 56                      	push    si			;coloca a abcisa xc+y na pilha
  1032 00000760 89DE                    	mov		si,bx
  1033 00000762 01D6                    	add		si,dx
  1034 00000764 56                      	push    si			;coloca a ordenada yc+x na pilha
  1035 00000765 E84EFF                  	call plot_xy		;toma conta do segundo octante
  1036 00000768 89C6                    	mov		si,ax
  1037 0000076A 01CE                    	add		si,cx
  1038 0000076C 56                      	push    si			;coloca a abcisa xc+y na pilha
  1039 0000076D 89DE                    	mov		si,bx
  1040 0000076F 29D6                    	sub		si,dx
  1041 00000771 56                      	push    si			;coloca a ordenada yc-x na pilha
  1042 00000772 E841FF                  	call plot_xy		;toma conta do oitavo octante
  1043 00000775 89C6                    	mov		si,ax
  1044 00000777 29D6                    	sub		si,dx
  1045 00000779 56                      	push    si			;coloca a abcisa xc-x na pilha
  1046 0000077A 89DE                    	mov		si,bx
  1047 0000077C 01CE                    	add		si,cx
  1048 0000077E 56                      	push    si			;coloca a ordenada yc+y na pilha
  1049 0000077F E834FF                  	call plot_xy		;toma conta do terceiro octante
  1050 00000782 89C6                    	mov		si,ax
  1051 00000784 29D6                    	sub		si,dx
  1052 00000786 56                      	push    si			;coloca a abcisa xc-x na pilha
  1053 00000787 89DE                    	mov		si,bx
  1054 00000789 29CE                    	sub		si,cx
  1055 0000078B 56                      	push    si			;coloca a ordenada yc-y na pilha
  1056 0000078C E827FF                  	call plot_xy		;toma conta do sexto octante
  1057 0000078F 89C6                    	mov		si,ax
  1058 00000791 29CE                    	sub		si,cx
  1059 00000793 56                      	push    si			;coloca a abcisa xc-y na pilha
  1060 00000794 89DE                    	mov		si,bx
  1061 00000796 29D6                    	sub		si,dx
  1062 00000798 56                      	push    si			;coloca a ordenada yc-x na pilha
  1063 00000799 E81AFF                  	call plot_xy		;toma conta do quinto octante
  1064 0000079C 89C6                    	mov		si,ax
  1065 0000079E 29CE                    	sub		si,cx
  1066 000007A0 56                      	push    si			;coloca a abcisa xc-y na pilha
  1067 000007A1 89DE                    	mov		si,bx
  1068 000007A3 01D6                    	add		si,dx
  1069 000007A5 56                      	push    si			;coloca a ordenada yc-x na pilha
  1070 000007A6 E80DFF                  	call plot_xy		;toma conta do quarto octante
  1071                                  	
  1072 000007A9 39D1                    	cmp		cx,dx
  1073 000007AB 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1074 000007AD E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  1075                                  
  1076                                  
  1077                                  fim_circle:
  1078 000007B0 5F                      	pop		di
  1079 000007B1 5E                      	pop		si
  1080 000007B2 5A                      	pop		dx
  1081 000007B3 59                      	pop		cx
  1082 000007B4 5B                      	pop		bx
  1083 000007B5 58                      	pop		ax
  1084 000007B6 9D                      	popf
  1085 000007B7 5D                      	pop		bp
  1086 000007B8 C20600                  	ret		6
  1087                                  ;-----------------------------------------------------------------------------
  1088                                  ;    fun��o full_circle
  1089                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1090                                  ; cor definida na variavel cor					  
  1091                                  full_circle:
  1092 000007BB 55                      	push 	bp
  1093 000007BC 89E5                    	mov	 	bp,sp
  1094 000007BE 9C                      	pushf                        ;coloca os flags na pilha
  1095 000007BF 50                      	push 	ax
  1096 000007C0 53                      	push 	bx
  1097 000007C1 51                      	push	cx
  1098 000007C2 52                      	push	dx
  1099 000007C3 56                      	push	si
  1100 000007C4 57                      	push	di
  1101                                  
  1102 000007C5 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1103 000007C8 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1104 000007CB 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1105                                  	
  1106 000007CE 89DE                    	mov		si,bx
  1107 000007D0 29CE                    	sub		si,cx
  1108 000007D2 50                      	push    ax			;coloca xc na pilha			
  1109 000007D3 56                      	push	si			;coloca yc-r na pilha
  1110 000007D4 89DE                    	mov		si,bx
  1111 000007D6 01CE                    	add		si,cx
  1112 000007D8 50                      	push	ax		;coloca xc na pilha
  1113 000007D9 56                      	push	si		;coloca yc+r na pilha
  1114 000007DA E89B00                  	call line
  1115                                  	
  1116                                  		
  1117 000007DD 89CF                    	mov		di,cx
  1118 000007DF 81EF0100                	sub		di,1	 ;di=r-1
  1119 000007E3 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1120                                  	
  1121                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1122                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1123                                  ;valores positivos para d
  1124                                  
  1125                                  stay_full:				;loop
  1126 000007E6 89FE                    	mov		si,di
  1127 000007E8 81FE0000                	cmp		si,0
  1128 000007EC 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1129 000007EE 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1130 000007F0 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1131 000007F2 81C60300                	add		si,3
  1132 000007F6 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1133 000007F8 42                      	inc		dx		;incrementa dx
  1134 000007F9 E90E00                  	jmp		plotar_full
  1135                                  inf_full:	
  1136 000007FC 89D6                    	mov		si,dx
  1137 000007FE 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1138 00000800 D1E6                    	sal		si,1
  1139 00000802 81C60500                	add		si,5
  1140 00000806 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1141 00000808 42                      	inc		dx		;incrementa x (dx)
  1142 00000809 49                      	dec		cx		;decrementa y (cx)
  1143                                  	
  1144                                  plotar_full:	
  1145 0000080A 89C6                    	mov		si,ax
  1146 0000080C 01CE                    	add		si,cx
  1147 0000080E 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1148 0000080F 89DE                    	mov		si,bx
  1149 00000811 29D6                    	sub		si,dx
  1150 00000813 56                      	push    si		;coloca a ordenada yc-x na pilha
  1151 00000814 89C6                    	mov		si,ax
  1152 00000816 01CE                    	add		si,cx
  1153 00000818 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1154 00000819 89DE                    	mov		si,bx
  1155 0000081B 01D6                    	add		si,dx
  1156 0000081D 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1157 0000081E E85700                  	call 	line
  1158                                  	
  1159 00000821 89C6                    	mov		si,ax
  1160 00000823 01D6                    	add		si,dx
  1161 00000825 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1162 00000826 89DE                    	mov		si,bx
  1163 00000828 29CE                    	sub		si,cx
  1164 0000082A 56                      	push    si		;coloca a ordenada yc-y na pilha
  1165 0000082B 89C6                    	mov		si,ax
  1166 0000082D 01D6                    	add		si,dx
  1167 0000082F 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1168 00000830 89DE                    	mov		si,bx
  1169 00000832 01CE                    	add		si,cx
  1170 00000834 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1171 00000835 E84000                  	call	line
  1172                                  	
  1173 00000838 89C6                    	mov		si,ax
  1174 0000083A 29D6                    	sub		si,dx
  1175 0000083C 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1176 0000083D 89DE                    	mov		si,bx
  1177 0000083F 29CE                    	sub		si,cx
  1178 00000841 56                      	push    si		;coloca a ordenada yc-y na pilha
  1179 00000842 89C6                    	mov		si,ax
  1180 00000844 29D6                    	sub		si,dx
  1181 00000846 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1182 00000847 89DE                    	mov		si,bx
  1183 00000849 01CE                    	add		si,cx
  1184 0000084B 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1185 0000084C E82900                  	call	line
  1186                                  	
  1187 0000084F 89C6                    	mov		si,ax
  1188 00000851 29CE                    	sub		si,cx
  1189 00000853 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1190 00000854 89DE                    	mov		si,bx
  1191 00000856 29D6                    	sub		si,dx
  1192 00000858 56                      	push    si		;coloca a ordenada yc-x na pilha
  1193 00000859 89C6                    	mov		si,ax
  1194 0000085B 29CE                    	sub		si,cx
  1195 0000085D 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1196 0000085E 89DE                    	mov		si,bx
  1197 00000860 01D6                    	add		si,dx
  1198 00000862 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1199 00000863 E81200                  	call	line
  1200                                  	
  1201 00000866 39D1                    	cmp		cx,dx
  1202 00000868 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1203 0000086A E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1204                                  	
  1205                                  	
  1206                                  fim_full_circle:
  1207 0000086D 5F                      	pop		di
  1208 0000086E 5E                      	pop		si
  1209 0000086F 5A                      	pop		dx
  1210 00000870 59                      	pop		cx
  1211 00000871 5B                      	pop		bx
  1212 00000872 58                      	pop		ax
  1213 00000873 9D                      	popf
  1214 00000874 5D                      	pop		bp
  1215 00000875 C20600                  	ret		6
  1216                                  ;-----------------------------------------------------------------------------
  1217                                  ;
  1218                                  ;   fun��o line
  1219                                  ;
  1220                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1221                                  line:
  1222 00000878 55                      		push		bp
  1223 00000879 89E5                    		mov		bp,sp
  1224 0000087B 9C                      		pushf                        ;coloca os flags na pilha
  1225 0000087C 50                      		push 		ax
  1226 0000087D 53                      		push 		bx
  1227 0000087E 51                      		push		cx
  1228 0000087F 52                      		push		dx
  1229 00000880 56                      		push		si
  1230 00000881 57                      		push		di
  1231 00000882 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1232 00000885 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1233 00000888 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1234 0000088B 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1235 0000088E 39C8                    		cmp		ax,cx
  1236 00000890 7408                    		je		line2
  1237 00000892 721C                    		jb		line1
  1238 00000894 91                      		xchg		ax,cx
  1239 00000895 87DA                    		xchg		bx,dx
  1240 00000897 E91600                  		jmp		line1
  1241                                  line2:		; deltax=0
  1242 0000089A 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1243 0000089C 7202                    		jb		line3
  1244 0000089E 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1245                                  line3:	; dx > bx
  1246 000008A0 50                      		push		ax
  1247 000008A1 53                      		push		bx
  1248 000008A2 E811FE                  		call 		plot_xy
  1249 000008A5 39D3                    		cmp		bx,dx
  1250 000008A7 7503                    		jne		line31
  1251 000008A9 E9C600                  		jmp		fim_line
  1252 000008AC 43                      line31:		inc		bx
  1253 000008AD E9F0FF                  		jmp		line3
  1254                                  ;deltax <>0
  1255                                  line1:
  1256                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1257                                  	; cx > ax
  1258 000008B0 51                      		push		cx
  1259 000008B1 29C1                    		sub		cx,ax
  1260 000008B3 890E[0600]              		mov		[deltax],cx
  1261 000008B7 59                      		pop		cx
  1262 000008B8 52                      		push		dx
  1263 000008B9 29DA                    		sub		dx,bx
  1264 000008BB 7702                    		ja		line32
  1265 000008BD F7DA                    		neg		dx
  1266                                  line32:		
  1267 000008BF 8916[0800]              		mov		[deltay],dx
  1268 000008C3 5A                      		pop		dx
  1269                                  
  1270 000008C4 50                      		push		ax
  1271 000008C5 A1[0600]                		mov		ax,[deltax]
  1272 000008C8 3B06[0800]              		cmp		ax,[deltay]
  1273 000008CC 58                      		pop		ax
  1274 000008CD 724D                    		jb		line5
  1275                                  
  1276                                  	; cx > ax e deltax>deltay
  1277 000008CF 51                      		push		cx
  1278 000008D0 29C1                    		sub		cx,ax
  1279 000008D2 890E[0600]              		mov		[deltax],cx
  1280 000008D6 59                      		pop		cx
  1281 000008D7 52                      		push		dx
  1282 000008D8 29DA                    		sub		dx,bx
  1283 000008DA 8916[0800]              		mov		[deltay],dx
  1284 000008DE 5A                      		pop		dx
  1285                                  
  1286 000008DF 89C6                    		mov		si,ax
  1287                                  line4:
  1288 000008E1 50                      		push		ax
  1289 000008E2 52                      		push		dx
  1290 000008E3 56                      		push		si
  1291 000008E4 29C6                    		sub		si,ax	;(x-x1)
  1292 000008E6 A1[0800]                		mov		ax,[deltay]
  1293 000008E9 F7EE                    		imul		si
  1294 000008EB 8B36[0600]              		mov		si,[deltax]		;arredondar
  1295 000008EF D1EE                    		shr		si,1
  1296                                  ; se numerador (DX)>0 soma se <0 subtrai
  1297 000008F1 81FA0000                		cmp		dx,0
  1298 000008F5 7C09                    		jl		ar1
  1299 000008F7 01F0                    		add		ax,si
  1300 000008F9 81D20000                		adc		dx,0
  1301 000008FD E90600                  		jmp		arc1
  1302 00000900 29F0                    ar1:		sub		ax,si
  1303 00000902 81DA0000                		sbb		dx,0
  1304                                  arc1:
  1305 00000906 F73E[0600]              		idiv		word [deltax]
  1306 0000090A 01D8                    		add		ax,bx
  1307 0000090C 5E                      		pop		si
  1308 0000090D 56                      		push		si
  1309 0000090E 50                      		push		ax
  1310 0000090F E8A4FD                  		call		plot_xy
  1311 00000912 5A                      		pop		dx
  1312 00000913 58                      		pop		ax
  1313 00000914 39CE                    		cmp		si,cx
  1314 00000916 745A                    		je		fim_line
  1315 00000918 46                      		inc		si
  1316 00000919 E9C5FF                  		jmp		line4
  1317                                  
  1318 0000091C 39D3                    line5:		cmp		bx,dx
  1319 0000091E 7203                    		jb 		line7
  1320 00000920 91                      		xchg		ax,cx
  1321 00000921 87DA                    		xchg		bx,dx
  1322                                  line7:
  1323 00000923 51                      		push		cx
  1324 00000924 29C1                    		sub		cx,ax
  1325 00000926 890E[0600]              		mov		[deltax],cx
  1326 0000092A 59                      		pop		cx
  1327 0000092B 52                      		push		dx
  1328 0000092C 29DA                    		sub		dx,bx
  1329 0000092E 8916[0800]              		mov		[deltay],dx
  1330 00000932 5A                      		pop		dx
  1331 00000933 89DE                    		mov		si,bx
  1332                                  line6:
  1333 00000935 52                      		push		dx
  1334 00000936 56                      		push		si
  1335 00000937 50                      		push		ax
  1336 00000938 29DE                    		sub		si,bx	;(y-y1)
  1337 0000093A A1[0600]                		mov		ax,[deltax]
  1338 0000093D F7EE                    		imul		si
  1339 0000093F 8B36[0800]              		mov		si,[deltay]		;arredondar
  1340 00000943 D1EE                    		shr		si,1
  1341                                  ; se numerador (DX)>0 soma se <0 subtrai
  1342 00000945 81FA0000                		cmp		dx,0
  1343 00000949 7C09                    		jl		ar2
  1344 0000094B 01F0                    		add		ax,si
  1345 0000094D 81D20000                		adc		dx,0
  1346 00000951 E90600                  		jmp		arc2
  1347 00000954 29F0                    ar2:		sub		ax,si
  1348 00000956 81DA0000                		sbb		dx,0
  1349                                  arc2:
  1350 0000095A F73E[0800]              		idiv		word [deltay]
  1351 0000095E 89C7                    		mov		di,ax
  1352 00000960 58                      		pop		ax
  1353 00000961 01C7                    		add		di,ax
  1354 00000963 5E                      		pop		si
  1355 00000964 57                      		push		di
  1356 00000965 56                      		push		si
  1357 00000966 E84DFD                  		call		plot_xy
  1358 00000969 5A                      		pop		dx
  1359 0000096A 39D6                    		cmp		si,dx
  1360 0000096C 7404                    		je		fim_line
  1361 0000096E 46                      		inc		si
  1362 0000096F E9C3FF                  		jmp		line6
  1363                                  
  1364                                  fim_line:
  1365 00000972 5F                      		pop		di
  1366 00000973 5E                      		pop		si
  1367 00000974 5A                      		pop		dx
  1368 00000975 59                      		pop		cx
  1369 00000976 5B                      		pop		bx
  1370 00000977 58                      		pop		ax
  1371 00000978 9D                      		popf
  1372 00000979 5D                      		pop		bp
  1373 0000097A C20800                  		ret		8
  1374                                  ;*******************************************************************
  1375                                  segment data
  1376                                  
  1377                                  
  1378 00000000 0F                      cor		db		branco_intenso
  1379                                  
  1380                                  ;	I R G B COR
  1381                                  ;	0 0 0 0 preto
  1382                                  ;	0 0 0 1 azul
  1383                                  ;	0 0 1 0 verde
  1384                                  ;	0 0 1 1 cyan
  1385                                  ;	0 1 0 0 vermelho
  1386                                  ;	0 1 0 1 magenta
  1387                                  ;	0 1 1 0 marrom
  1388                                  ;	0 1 1 1 branco
  1389                                  ;	1 0 0 0 cinza
  1390                                  ;	1 0 0 1 azul claro
  1391                                  ;	1 0 1 0 verde claro
  1392                                  ;	1 0 1 1 cyan claro
  1393                                  ;	1 1 0 0 rosa
  1394                                  ;	1 1 0 1 magenta claro
  1395                                  ;	1 1 1 0 amarelo
  1396                                  ;	1 1 1 1 branco intenso
  1397                                  
  1398                                  preto			equ		0
  1399                                  azul			equ		1
  1400                                  verde			equ		2
  1401                                  cyan			equ		3
  1402                                  vermelho		equ		4
  1403                                  magenta			equ		5
  1404                                  marrom			equ		6
  1405                                  branco			equ		7
  1406                                  cinza			equ		8
  1407                                  azul_claro		equ		9
  1408                                  verde_claro		equ		10
  1409                                  cyan_claro		equ		11
  1410                                  rosa			equ		12
  1411                                  magenta_claro	equ		13
  1412                                  amarelo			equ		14
  1413                                  branco_intenso	equ		15
  1414                                  
  1415 00000001 00                      modo_anterior	db		0
  1416 00000002 0000                    linha   		dw  	0
  1417 00000004 0000                    coluna  		dw  	0
  1418 00000006 0000                    deltax			dw		0
  1419 00000008 0000                    deltay			dw		0	
  1420 0000000A 557369656C20466572-     nome_aluno    	db  	'Usiel Ferreira Lopes Junior'
  1421 00000013 7265697261204C6F70-
  1422 0000001C 6573204A756E696F72 
  1423 00000025 4162726972              abrir_str    	db  	'Abrir'
  1424 0000002A 4649525F31              fir1_str    	db  	'FIR_1'
  1425 0000002F 4649525F32              fir2_str    	db  	'FIR_2'
  1426 00000034 4649525F33              fir3_str    	db  	'FIR_3'
  1427 00000039 53616972                sair_str    	db  	'Sair'
  1428 0000003D 3E203E203E              seta_str    	db  	'> > >'
  1429                                  
  1430 00000042 73696E616C2E747874-     filename 		db 		'sinal.txt',0
  1431 0000004B 00                 
  1432 0000004C 0000                    handle 			dw 		0
  1433 0000004E 00                      aberto 			db 		0
  1434 0000004F 0000                    qtd_lida 		dw 		0
  1435                                  
  1436 00000051 <res 00000010>          buffer 			resb 	16		
  1437 00000061 24                      				db 		'$'
  1438                                  
  1439 00000062 0000                    contador 		dw 		0
  1440 00000064 0000                    contador2 		dw 		0
  1441 00000066 00                      sinal 			db 		0
  1442 00000067 F401                    qtd_pixels  	dw 		500
  1443                                  
  1444 00000069 00<rept>                v_in_mod 		times 	500 	db 	0  	; Vetor Módulo
  1445 0000025D 00<rept>                v_in_sn 		times 	500		db 	0  	; Vetor Sinal
  1446                                  
  1447 00000451 00<rept>                v_out_mod 		times 	500		db 	0  	; Vetor Módulo
  1448 00000645 00<rept>                v_out_sn 		times 	500		db 	0  	; Vetor Saída
  1449                                  
  1450 00000839 00<rept>                v_select_mod 	times 	500		db 	0  	; Vetor Módulo
  1451 00000A2D 00<rept>                v_select_sn		times 	500		db 	0  	; Vetor Saída
  1452                                  
  1453 00000C21 0000                    ponto_central	dw 		0
  1454                                  
  1455                                  ; 	Obs o tamanho de v_out pode ir até  len(v_in) + len(filtro) - 1,
  1456                                  ; 	neste caso 510, mascomo vamos plotar apenas 500 pixels 
  1457                                  ;	não faz sentido realizar o calculo de convolução até o final.
  1458                                  
  1459 00000C23 0B                      filtros_len 	db 		11
  1460 00000C24 010101010101010101-     filtro1 		db 		1,1,1,1,1,1,1,1,1,1,1
  1461 00000C2D 0101               
  1462 00000C2F 0B                      filtro1_div		db  	11
  1463                                  
  1464 00000C30 010101010202020101-     filtro2 		db 		1,1,1,1,2,2,2,1,1,1,1
  1465 00000C39 0101               
  1466 00000C3B 0E                      filtro2_div		db  	14
  1467                                  
  1468 00000C3C 01010202FDFDFD0202-     filtro3 		db 		1,1,2,2,-3,-3,-3,2,2,1,1
  1469 00000C45 0101               
  1470 00000C47 09                      filtro3_div		db  	9
  1471                                  
  1472 00000C48 00<rept>                f_select		times 	11		db 	0
  1473 00000C53 00                      f_select_div	db		0
  1474                                  
  1475 00000C54 0000                    x_start			dw		0
  1476 00000C56 0000                    x_end			dw		0
  1477 00000C58 0000                    h_start			dw		0
  1478                                  
  1479                                  ;*************************************************************************
  1480                                  segment stack stack
  1481 00000000 <res 00000200>              resb 		512
  1482                                  stacktop:
  1483                                  
  1484                                  
